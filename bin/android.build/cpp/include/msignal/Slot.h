// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_msignal_Slot
#define INCLUDED_msignal_Slot

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(msignal,Slot)

namespace msignal{


class HXCPP_CLASS_ATTRIBUTES Slot_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Slot_obj OBJ_;
		Slot_obj();

	public:
		enum { _hx_ClassId = 0x1d29f933 };

		void __construct( ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="msignal.Slot")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"msignal.Slot"); }
		static hx::ObjectPtr< Slot_obj > __new( ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority);
		static hx::ObjectPtr< Slot_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Slot_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Slot",1e,0a,2f,37); }

		 ::Dynamic listener;
		bool once;
		int priority;
		bool enabled;
		 ::Dynamic signal;
		void remove();
		::Dynamic remove_dyn();

		 ::Dynamic get_listener();
		::Dynamic get_listener_dyn();

		 ::Dynamic set_listener( ::Dynamic value);
		::Dynamic set_listener_dyn();

};

} // end namespace msignal

#endif /* INCLUDED_msignal_Slot */ 
