// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_msignal_SlotList
#define INCLUDED_msignal_SlotList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(msignal,SlotList)

namespace msignal{


class HXCPP_CLASS_ATTRIBUTES SlotList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SlotList_obj OBJ_;
		SlotList_obj();

	public:
		enum { _hx_ClassId = 0x1a28f569 };

		void __construct( ::Dynamic head, ::msignal::SlotList tail);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="msignal.SlotList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"msignal.SlotList"); }
		static hx::ObjectPtr< SlotList_obj > __new( ::Dynamic head, ::msignal::SlotList tail);
		static hx::ObjectPtr< SlotList_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic head, ::msignal::SlotList tail);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SlotList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		static void __init__();

		::String __ToString() const { return HX_("SlotList",9c,b9,0d,75); }

		static void __boot();
		static  ::msignal::SlotList NIL;
		 ::Dynamic head;
		 ::msignal::SlotList tail;
		bool nonEmpty;
		int length;
		int get_length();
		::Dynamic get_length_dyn();

		 ::msignal::SlotList prepend( ::Dynamic slot);
		::Dynamic prepend_dyn();

		 ::msignal::SlotList append( ::Dynamic slot);
		::Dynamic append_dyn();

		 ::msignal::SlotList insertWithPriority( ::Dynamic slot);
		::Dynamic insertWithPriority_dyn();

		 ::msignal::SlotList filterNot( ::Dynamic listener);
		::Dynamic filterNot_dyn();

		bool contains( ::Dynamic listener);
		::Dynamic contains_dyn();

		 ::Dynamic find( ::Dynamic listener);
		::Dynamic find_dyn();

};

} // end namespace msignal

#endif /* INCLUDED_msignal_SlotList */ 
