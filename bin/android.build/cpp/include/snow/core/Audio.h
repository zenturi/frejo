// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_core_Audio
#define INCLUDED_snow_core_Audio

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_snow_modules_interfaces_Audio
#include <snow/modules/interfaces/Audio.h>
#endif
HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)
HX_DECLARE_CLASS2(snow,core,Audio)
HX_DECLARE_CLASS3(snow,modules,interfaces,Audio)
HX_DECLARE_CLASS3(snow,systems,audio,AudioInstance)
HX_DECLARE_CLASS3(snow,systems,audio,AudioSource)
HX_DECLARE_CLASS2(snow,types,SystemEvent)

namespace snow{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Audio_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Audio_obj OBJ_;
		Audio_obj();

	public:
		enum { _hx_ClassId = 0x42d34754 };

		void __construct( ::snow::Snow _app);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.core.Audio")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.core.Audio"); }
		static hx::ObjectPtr< Audio_obj > __new( ::snow::Snow _app);
		static hx::ObjectPtr< Audio_obj > __alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Audio_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Audio",b6,e8,ad,ba); }

		static  ::Dynamic audio_format_from_path(::String _path);
		static ::Dynamic audio_format_from_path_dyn();

		 ::snow::Snow app;
		bool active;
		void onevent( ::snow::types::SystemEvent event);
		::Dynamic onevent_dyn();

		void shutdown();
		::Dynamic shutdown_dyn();

		void suspend();
		::Dynamic suspend_dyn();

		void resume();
		::Dynamic resume_dyn();

		 ::snow::api::Promise data_from_load(::String _path, ::Dynamic _is_stream, ::Dynamic _format);
		::Dynamic data_from_load_dyn();

		 ::snow::api::Promise data_from_bytes(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format);
		::Dynamic data_from_bytes_dyn();

		 ::Dynamic play( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused);
		::Dynamic play_dyn();

		 ::Dynamic loop( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused);
		::Dynamic loop_dyn();

		void pause( ::Dynamic _handle);
		::Dynamic pause_dyn();

		void unpause( ::Dynamic _handle);
		::Dynamic unpause_dyn();

		void stop( ::Dynamic _handle);
		::Dynamic stop_dyn();

		void volume( ::Dynamic _handle,Float _volume);
		::Dynamic volume_dyn();

		void pan( ::Dynamic _handle,Float _pan);
		::Dynamic pan_dyn();

		void pitch( ::Dynamic _handle,Float _pitch);
		::Dynamic pitch_dyn();

		void position( ::Dynamic _handle,Float _time);
		::Dynamic position_dyn();

		Float volume_of( ::Dynamic _handle);
		::Dynamic volume_of_dyn();

		Float pan_of( ::Dynamic _handle);
		::Dynamic pan_of_dyn();

		Float pitch_of( ::Dynamic _handle);
		::Dynamic pitch_of_dyn();

		Float position_of( ::Dynamic _handle);
		::Dynamic position_of_dyn();

		int state_of( ::Dynamic _handle);
		::Dynamic state_of_dyn();

		bool loop_of( ::Dynamic _handle);
		::Dynamic loop_of_dyn();

		 ::snow::systems::audio::AudioInstance instance_of( ::Dynamic _handle);
		::Dynamic instance_of_dyn();

};

} // end namespace snow
} // end namespace core

#endif /* INCLUDED_snow_core_Audio */ 
