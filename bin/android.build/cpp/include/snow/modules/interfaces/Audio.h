// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_modules_interfaces_Audio
#define INCLUDED_snow_modules_interfaces_Audio

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)
HX_DECLARE_CLASS3(snow,modules,interfaces,Audio)
HX_DECLARE_CLASS3(snow,systems,audio,AudioInstance)
HX_DECLARE_CLASS3(snow,systems,audio,AudioSource)
HX_DECLARE_CLASS2(snow,types,SystemEvent)

namespace snow{
namespace modules{
namespace interfaces{


class HXCPP_CLASS_ATTRIBUTES Audio_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		static void __boot();
		void (hx::Object :: *_hx_onevent)( ::snow::types::SystemEvent event); 
		static inline void onevent( ::Dynamic _hx_, ::snow::types::SystemEvent event) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_onevent)(event);
		}
		void (hx::Object :: *_hx_shutdown)(); 
		static inline void shutdown( ::Dynamic _hx_) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_shutdown)();
		}
		 ::snow::api::Promise (hx::Object :: *_hx_data_from_load)(::String _path, ::Dynamic _is_stream, ::Dynamic _format); 
		static inline  ::snow::api::Promise data_from_load( ::Dynamic _hx_,::String _path, ::Dynamic _is_stream, ::Dynamic _format) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_data_from_load)(_path,_is_stream,_format);
		}
		 ::snow::api::Promise (hx::Object :: *_hx_data_from_bytes)(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format); 
		static inline  ::snow::api::Promise data_from_bytes( ::Dynamic _hx_,::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_data_from_bytes)(_id,_bytes,_format);
		}
		 ::Dynamic (hx::Object :: *_hx_play)( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused); 
		static inline  ::Dynamic play( ::Dynamic _hx_, ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_play)(_source,_volume,_paused);
		}
		 ::Dynamic (hx::Object :: *_hx_loop)( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused); 
		static inline  ::Dynamic loop( ::Dynamic _hx_, ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_loop)(_source,_volume,_paused);
		}
		void (hx::Object :: *_hx_pause)( ::Dynamic _handle); 
		static inline void pause( ::Dynamic _hx_, ::Dynamic _handle) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_pause)(_handle);
		}
		void (hx::Object :: *_hx_unpause)( ::Dynamic _handle); 
		static inline void unpause( ::Dynamic _hx_, ::Dynamic _handle) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_unpause)(_handle);
		}
		void (hx::Object :: *_hx_stop)( ::Dynamic _handle); 
		static inline void stop( ::Dynamic _hx_, ::Dynamic _handle) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_stop)(_handle);
		}
		void (hx::Object :: *_hx_volume)( ::Dynamic _handle,Float _volume); 
		static inline void volume( ::Dynamic _hx_, ::Dynamic _handle,Float _volume) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_volume)(_handle,_volume);
		}
		void (hx::Object :: *_hx_pan)( ::Dynamic _handle,Float _pan); 
		static inline void pan( ::Dynamic _hx_, ::Dynamic _handle,Float _pan) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_pan)(_handle,_pan);
		}
		void (hx::Object :: *_hx_pitch)( ::Dynamic _handle,Float _pitch); 
		static inline void pitch( ::Dynamic _hx_, ::Dynamic _handle,Float _pitch) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_pitch)(_handle,_pitch);
		}
		void (hx::Object :: *_hx_position)( ::Dynamic _handle,Float _time); 
		static inline void position( ::Dynamic _hx_, ::Dynamic _handle,Float _time) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_position)(_handle,_time);
		}
		Float (hx::Object :: *_hx_volume_of)( ::Dynamic _handle); 
		static inline Float volume_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_volume_of)(_handle);
		}
		Float (hx::Object :: *_hx_pan_of)( ::Dynamic _handle); 
		static inline Float pan_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_pan_of)(_handle);
		}
		Float (hx::Object :: *_hx_pitch_of)( ::Dynamic _handle); 
		static inline Float pitch_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_pitch_of)(_handle);
		}
		Float (hx::Object :: *_hx_position_of)( ::Dynamic _handle); 
		static inline Float position_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_position_of)(_handle);
		}
		int (hx::Object :: *_hx_state_of)( ::Dynamic _handle); 
		static inline int state_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_state_of)(_handle);
		}
		bool (hx::Object :: *_hx_loop_of)( ::Dynamic _handle); 
		static inline bool loop_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_loop_of)(_handle);
		}
		 ::snow::systems::audio::AudioInstance (hx::Object :: *_hx_instance_of)( ::Dynamic _handle); 
		static inline  ::snow::systems::audio::AudioInstance instance_of( ::Dynamic _hx_, ::Dynamic _handle) {
			return (_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_instance_of)(_handle);
		}
		void (hx::Object :: *_hx_suspend)(); 
		static inline void suspend( ::Dynamic _hx_) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_suspend)();
		}
		void (hx::Object :: *_hx_resume)(); 
		static inline void resume( ::Dynamic _hx_) {
			(_hx_.mPtr->*( static_cast< ::snow::modules::interfaces::Audio_obj *>(_hx_.mPtr->_hx_getInterface(0x955683b8)))->_hx_resume)();
		}
};

} // end namespace snow
} // end namespace modules
} // end namespace interfaces

#endif /* INCLUDED_snow_modules_interfaces_Audio */ 
