// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_Snow
#define INCLUDED_snow_Snow

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Main)
HX_DECLARE_CLASS2(frejo,app,Application)
HX_DECLARE_CLASS1(snow,App)
HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS2(snow,core,Extension)
HX_DECLARE_CLASS2(snow,core,Runtime)
HX_DECLARE_CLASS3(snow,core,native,Runtime)
HX_DECLARE_CLASS3(snow,modules,sdl,Runtime)
HX_DECLARE_CLASS3(snow,systems,assets,Assets)
HX_DECLARE_CLASS3(snow,systems,audio,Audio)
HX_DECLARE_CLASS3(snow,systems,input,Input)
HX_DECLARE_CLASS3(snow,systems,io,IO)
HX_DECLARE_CLASS2(snow,types,InputEvent)
HX_DECLARE_CLASS2(snow,types,SystemEvent)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace snow{


class HXCPP_CLASS_ATTRIBUTES Snow_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Snow_obj OBJ_;
		Snow_obj();

	public:
		enum { _hx_ClassId = 0x4a8bad8a };

		void __construct( ::Main _host);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.Snow")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.Snow"); }
		static hx::ObjectPtr< Snow_obj > __new( ::Main _host);
		static hx::ObjectPtr< Snow_obj > __alloc(hx::Ctx *_hx_ctx, ::Main _host);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Snow_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Snow",a3,8e,30,37); }

		static void __boot();
		static void next( ::Dynamic func);
		static ::Dynamic next_dyn();

		static void defer( ::Dynamic func);
		static ::Dynamic defer_dyn();

		static Float get_timestamp();
		static ::Dynamic get_timestamp_dyn();

		static ::Array< ::Dynamic> next_queue;
		static ::Array< ::Dynamic> defer_queue;
		 ::Main host;
		 ::Dynamic config;
		bool freeze;
		bool ready;
		 ::snow::modules::sdl::Runtime runtime;
		 ::snow::systems::io::IO io;
		 ::snow::systems::input::Input input;
		 ::snow::systems::audio::Audio audio;
		 ::snow::systems::assets::Assets assets;
		::String platform;
		::String os;
		bool debug;
		bool shutting_down;
		bool has_shutdown;
		::Array< ::Dynamic> extensions;
		 ::snow::types::SystemEvent sys_event;
		 ::snow::types::WindowEvent win_event;
		bool immediate_shutdown;
		void shutdown();
		::Dynamic shutdown_dyn();

		void dispatch_event(int _type);
		::Dynamic dispatch_event_dyn();

		bool window_in_background;
		void dispatch_window_event(int _type,Float _timestamp,int _window_id,int _x,int _y);
		::Dynamic dispatch_window_event_dyn();

		void dispatch_input_event( ::snow::types::InputEvent _event);
		::Dynamic dispatch_input_event_dyn();

		int i;
		void onevent( ::snow::types::SystemEvent _event);
		::Dynamic onevent_dyn();

		Float get_time();
		::Dynamic get_time_dyn();

		::String get_uniqueid();
		::Dynamic get_uniqueid_dyn();

		bool had_ready_event;
		void on_ready_event();
		::Dynamic on_ready_event_dyn();

		void on_tick_event();
		::Dynamic on_tick_event_dyn();

		 ::snow::api::Promise setup_configs();
		::Dynamic setup_configs_dyn();

		void setup_host_config();
		::Dynamic setup_host_config_dyn();

		 ::snow::api::Promise default_user_config();
		::Dynamic default_user_config_dyn();

		 ::Dynamic default_config();
		::Dynamic default_config_dyn();

		 ::Dynamic default_render_config();
		::Dynamic default_render_config_dyn();

		 ::Dynamic default_window_config();
		::Dynamic default_window_config_dyn();

		bool set_freeze(bool _freeze);
		::Dynamic set_freeze_dyn();

		void step();
		::Dynamic step_dyn();

		void cycle_next_queue();
		::Dynamic cycle_next_queue_dyn();

		void cycle_defer_queue();
		::Dynamic cycle_defer_queue_dyn();

		 ::Dynamic copy_window_config( ::Dynamic _config);
		::Dynamic copy_window_config_dyn();

		 ::Dynamic copy_render_config( ::Dynamic _config);
		::Dynamic copy_render_config_dyn();

		::String make_uniqueid( ::Dynamic val);
		::Dynamic make_uniqueid_dyn();

};

} // end namespace snow

#endif /* INCLUDED_snow_Snow */ 
