// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_api_Promise
#define INCLUDED_snow_api_Promise

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,api,Promise)

namespace snow{
namespace api{


class HXCPP_CLASS_ATTRIBUTES Promise_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Promise_obj OBJ_;
		Promise_obj();

	public:
		enum { _hx_ClassId = 0x79374d4c };

		void __construct( ::Dynamic func);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.api.Promise")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.api.Promise"); }
		static hx::ObjectPtr< Promise_obj > __new( ::Dynamic func);
		static hx::ObjectPtr< Promise_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic func);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Promise_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Promise",7b,f5,3a,c5); }

		static  ::snow::api::Promise all(::Array< ::Dynamic> list);
		static ::Dynamic all_dyn();

		static  ::snow::api::Promise race(::Array< ::Dynamic> list);
		static ::Dynamic race_dyn();

		static  ::snow::api::Promise reject( ::Dynamic reason);
		static ::Dynamic reject_dyn();

		static  ::snow::api::Promise resolve( ::Dynamic val);
		static ::Dynamic resolve_dyn();

		int state;
		 ::Dynamic result;
		::cpp::VirtualArray reject_reactions;
		::cpp::VirtualArray fulfill_reactions;
		::cpp::VirtualArray settle_reactions;
		bool was_caught;
		 ::snow::api::Promise then( ::Dynamic on_fulfilled, ::Dynamic on_rejected);
		::Dynamic then_dyn();

		 ::snow::api::Promise error( ::Dynamic on_rejected);
		::Dynamic error_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		void add_settle( ::Dynamic f);
		::Dynamic add_settle_dyn();

		 ::snow::api::Promise new_linked_promise();
		::Dynamic new_linked_promise_dyn();

		 ::snow::api::Promise new_linked_resolve();
		::Dynamic new_linked_resolve_dyn();

		 ::snow::api::Promise new_linked_reject();
		::Dynamic new_linked_reject_dyn();

		 ::snow::api::Promise new_linked_resolve_empty();
		::Dynamic new_linked_resolve_empty_dyn();

		 ::snow::api::Promise new_linked_reject_empty();
		::Dynamic new_linked_reject_empty_dyn();

		void add_fulfill( ::Dynamic f);
		::Dynamic add_fulfill_dyn();

		void add_reject( ::Dynamic f);
		::Dynamic add_reject_dyn();

		void onfulfill( ::Dynamic val);
		::Dynamic onfulfill_dyn();

		void onreject( ::Dynamic reason);
		::Dynamic onreject_dyn();

		void onsettle();
		::Dynamic onsettle_dyn();

		void onexception( ::Dynamic err);
		::Dynamic onexception_dyn();

		::String state_string();
		::Dynamic state_string_dyn();

};

} // end namespace snow
} // end namespace api

#endif /* INCLUDED_snow_api_Promise */ 
