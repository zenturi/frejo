// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_opengl__GL_IntRef_Impl_
#define INCLUDED_opengl__GL_IntRef_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(opengl,_GL,IntRef_Impl_)

namespace opengl{
namespace _GL{


class HXCPP_CLASS_ATTRIBUTES IntRef_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IntRef_Impl__obj OBJ_;
		IntRef_Impl__obj();

	public:
		enum { _hx_ClassId = 0x5df2f2b5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="opengl._GL.IntRef_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"opengl._GL.IntRef_Impl_"); }

		hx::ObjectPtr< IntRef_Impl__obj > __new() {
			hx::ObjectPtr< IntRef_Impl__obj > __this = new IntRef_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< IntRef_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			IntRef_Impl__obj *__this = (IntRef_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IntRef_Impl__obj), false, "opengl._GL.IntRef_Impl_"));
			*(void **)__this = IntRef_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IntRef_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IntRef_Impl_",64,df,37,41); }

		static ::cpp::Pointer< int > fromInt(int _val);
		static ::Dynamic fromInt_dyn();

};

} // end namespace opengl
} // end namespace _GL

#endif /* INCLUDED_opengl__GL_IntRef_Impl_ */ 
