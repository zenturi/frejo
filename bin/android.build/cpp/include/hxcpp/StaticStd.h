// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_hxcpp_StaticStd
#define INCLUDED_hxcpp_StaticStd

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxcpp,StaticStd)

namespace hxcpp{


class HXCPP_CLASS_ATTRIBUTES StaticStd_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef StaticStd_obj OBJ_;
		StaticStd_obj();

	public:
		enum { _hx_ClassId = 0x3eb02c82 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxcpp.StaticStd")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"hxcpp.StaticStd"); }

		hx::ObjectPtr< StaticStd_obj > __new() {
			hx::ObjectPtr< StaticStd_obj > __this = new StaticStd_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< StaticStd_obj > __alloc(hx::Ctx *_hx_ctx) {
			StaticStd_obj *__this = (StaticStd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StaticStd_obj), false, "hxcpp.StaticStd"));
			*(void **)__this = StaticStd_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~StaticStd_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("StaticStd",75,04,eb,28); }

};

} // end namespace hxcpp

#endif /* INCLUDED_hxcpp_StaticStd */ 
