// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_nanovg_NvgAlign
#define INCLUDED_nanovg_NvgAlign

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nanovg,NvgAlign)

namespace nanovg{


class HXCPP_CLASS_ATTRIBUTES NvgAlign_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NvgAlign_obj OBJ_;
		NvgAlign_obj();

	public:
		enum { _hx_ClassId = 0x15468e0f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nanovg.NvgAlign")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"nanovg.NvgAlign"); }

		hx::ObjectPtr< NvgAlign_obj > __new() {
			hx::ObjectPtr< NvgAlign_obj > __this = new NvgAlign_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< NvgAlign_obj > __alloc(hx::Ctx *_hx_ctx) {
			NvgAlign_obj *__this = (NvgAlign_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NvgAlign_obj), false, "nanovg.NvgAlign"));
			*(void **)__this = NvgAlign_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NvgAlign_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NvgAlign",46,73,c4,7b); }

		static void __boot();
		static int ALIGN_LEFT;
		static int ALIGN_CENTER;
		static int ALIGN_RIGHT;
		static int ALIGN_TOP;
		static int ALIGN_MIDDLE;
		static int ALIGN_BOTTOM;
		static int ALIGN_BASELINE;
};

} // end namespace nanovg

#endif /* INCLUDED_nanovg_NvgAlign */ 
