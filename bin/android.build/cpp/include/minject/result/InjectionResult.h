// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_result_InjectionResult
#define INCLUDED_minject_result_InjectionResult

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(minject,result,InjectionResult)

namespace minject{
namespace result{


class HXCPP_CLASS_ATTRIBUTES InjectionResult_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef InjectionResult_obj OBJ_;
		InjectionResult_obj();

	public:
		enum { _hx_ClassId = 0x70932e79 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="minject.result.InjectionResult")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"minject.result.InjectionResult"); }
		static hx::ObjectPtr< InjectionResult_obj > __new();
		static hx::ObjectPtr< InjectionResult_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InjectionResult_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InjectionResult",f4,d3,6b,59); }

		virtual  ::Dynamic getResponse( ::minject::Injector injector);
		::Dynamic getResponse_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace minject
} // end namespace result

#endif /* INCLUDED_minject_result_InjectionResult */ 
