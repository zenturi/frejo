// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_base_MediatorBase
#define INCLUDED_mmvc_base_MediatorBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_api_IMediator
#include <mmvc/api/IMediator.h>
#endif
HX_DECLARE_CLASS2(mmvc,api,IMediator)
HX_DECLARE_CLASS2(mmvc,base,MediatorBase)
HX_DECLARE_CLASS1(msignal,Slot)

namespace mmvc{
namespace base{


class HXCPP_CLASS_ATTRIBUTES MediatorBase_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MediatorBase_obj OBJ_;
		MediatorBase_obj();

	public:
		enum { _hx_ClassId = 0x446a16c6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.base.MediatorBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.base.MediatorBase"); }
		static hx::ObjectPtr< MediatorBase_obj > __new();
		static hx::ObjectPtr< MediatorBase_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MediatorBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("MediatorBase",04,7e,7b,f5); }

		 ::Dynamic view;
		bool removed;
		::Array< ::Dynamic> slots;
		void preRegister();
		::Dynamic preRegister_dyn();

		virtual void onRegister();
		::Dynamic onRegister_dyn();

		void preRemove();
		::Dynamic preRemove_dyn();

		virtual void onRemove();
		::Dynamic onRemove_dyn();

		 ::Dynamic getViewComponent();
		::Dynamic getViewComponent_dyn();

		void setViewComponent( ::Dynamic viewComponent);
		::Dynamic setViewComponent_dyn();

		void mediate( ::msignal::Slot slot);
		::Dynamic mediate_dyn();

};

} // end namespace mmvc
} // end namespace base

#endif /* INCLUDED_mmvc_base_MediatorBase */ 
