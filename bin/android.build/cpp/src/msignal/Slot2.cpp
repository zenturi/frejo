// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Signal2
#include <msignal/Signal2.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_Slot2
#include <msignal/Slot2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69c843746273c43f_176_new,"msignal.Slot2","new",0x505f602d,"msignal.Slot2.new","msignal/Slot.hx",176,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_69c843746273c43f_185_execute,"msignal.Slot2","execute",0xd3b10482,"msignal.Slot2.execute","msignal/Slot.hx",185,0x8d27aea6)
namespace msignal{

void Slot2_obj::__construct( ::msignal::Signal2 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_69c843746273c43f_176_new)
HXDLIN( 176)		super::__construct(signal,listener,once,priority);
            	}

Dynamic Slot2_obj::__CreateEmpty() { return new Slot2_obj; }

void *Slot2_obj::_hx_vtable = 0;

Dynamic Slot2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Slot2_obj > _hx_result = new Slot2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Slot2_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d29f933) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1d29f933;
	} else {
		return inClassId==(int)0x6790139f;
	}
}

void Slot2_obj::execute( ::Dynamic value1, ::Dynamic value2){
            	HX_STACKFRAME(&_hx_pos_69c843746273c43f_185_execute)
HXLINE( 186)		if (!(this->enabled)) {
HXLINE( 186)			return;
            		}
HXLINE( 187)		if (this->once) {
HXLINE( 187)			this->remove();
            		}
HXLINE( 189)		if (hx::IsNotNull( this->param1 )) {
HXLINE( 189)			value1 = this->param1;
            		}
HXLINE( 190)		if (hx::IsNotNull( this->param2 )) {
HXLINE( 190)			value2 = this->param2;
            		}
HXLINE( 192)		this->get_listener()(value1,value2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Slot2_obj,execute,(void))


hx::ObjectPtr< Slot2_obj > Slot2_obj::__new( ::msignal::Signal2 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	hx::ObjectPtr< Slot2_obj > __this = new Slot2_obj();
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

hx::ObjectPtr< Slot2_obj > Slot2_obj::__alloc(hx::Ctx *_hx_ctx, ::msignal::Signal2 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	Slot2_obj *__this = (Slot2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Slot2_obj), true, "msignal.Slot2"));
	*(void **)__this = Slot2_obj::_hx_vtable;
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

Slot2_obj::Slot2_obj()
{
}

void Slot2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Slot2);
	HX_MARK_MEMBER_NAME(param1,"param1");
	HX_MARK_MEMBER_NAME(param2,"param2");
	 ::msignal::Slot_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Slot2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(param1,"param1");
	HX_VISIT_MEMBER_NAME(param2,"param2");
	 ::msignal::Slot_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Slot2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"param1") ) { return hx::Val( param1 ); }
		if (HX_FIELD_EQ(inName,"param2") ) { return hx::Val( param2 ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Slot2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"param1") ) { param1=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"param2") ) { param2=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Slot2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("param1",04,fb,7a,ed));
	outFields->push(HX_("param2",05,fb,7a,ed));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Slot2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Slot2_obj,param1),HX_("param1",04,fb,7a,ed)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Slot2_obj,param2),HX_("param2",05,fb,7a,ed)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Slot2_obj_sStaticStorageInfo = 0;
#endif

static ::String Slot2_obj_sMemberFields[] = {
	HX_("param1",04,fb,7a,ed),
	HX_("param2",05,fb,7a,ed),
	HX_("execute",35,0a,0d,cc),
	::String(null()) };

hx::Class Slot2_obj::__mClass;

void Slot2_obj::__register()
{
	Slot2_obj _hx_dummy;
	Slot2_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Slot2",bb,c5,6e,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Slot2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Slot2_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Slot2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Slot2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
