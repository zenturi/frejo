// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Signal1
#include <msignal/Signal1.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_Slot1
#include <msignal/Slot1.h>
#endif
#ifndef INCLUDED_msignal_SlotList
#include <msignal/SlotList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2a60f21c9c4d844_215_new,"msignal.Signal1","new",0xa83ebac2,"msignal.Signal1.new","msignal/Signal.hx",215,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a60f21c9c4d844_222_dispatch,"msignal.Signal1","dispatch",0x37a20118,"msignal.Signal1.dispatch","msignal/Signal.hx",222,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a60f21c9c4d844_234_createSlot,"msignal.Signal1","createSlot",0xe9d9a4f8,"msignal.Signal1.createSlot","msignal/Signal.hx",234,0xeae291fc)
namespace msignal{

void Signal1_obj::__construct( ::Dynamic type){
            	HX_STACKFRAME(&_hx_pos_e2a60f21c9c4d844_215_new)
HXDLIN( 215)		super::__construct(::cpp::VirtualArray_obj::__new(1)->init(0,type));
            	}

Dynamic Signal1_obj::__CreateEmpty() { return new Signal1_obj; }

void *Signal1_obj::_hx_vtable = 0;

Dynamic Signal1_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Signal1_obj > _hx_result = new Signal1_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Signal1_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1e1399e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1e1399e0;
	} else {
		return inClassId==(int)0x76ff40dd;
	}
}

void Signal1_obj::dispatch( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e2a60f21c9c4d844_222_dispatch)
HXLINE( 223)		 ::msignal::SlotList slotsToProcess = this->slots;
HXLINE( 225)		while(slotsToProcess->nonEmpty){
HXLINE( 227)			( ( ::msignal::Slot1)(slotsToProcess->head) )->execute(value);
HXLINE( 228)			slotsToProcess = slotsToProcess->tail;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal1_obj,dispatch,(void))

 ::Dynamic Signal1_obj::createSlot( ::Dynamic _tmp_listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_e2a60f21c9c4d844_234_createSlot)
HXDLIN( 234)		 ::Dynamic listener = _tmp_listener;
HXDLIN( 234)		return  ::msignal::Slot1_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),listener,once,priority);
            	}



hx::ObjectPtr< Signal1_obj > Signal1_obj::__new( ::Dynamic type) {
	hx::ObjectPtr< Signal1_obj > __this = new Signal1_obj();
	__this->__construct(type);
	return __this;
}

hx::ObjectPtr< Signal1_obj > Signal1_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic type) {
	Signal1_obj *__this = (Signal1_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Signal1_obj), true, "msignal.Signal1"));
	*(void **)__this = Signal1_obj::_hx_vtable;
	__this->__construct(type);
	return __this;
}

Signal1_obj::Signal1_obj()
{
}

hx::Val Signal1_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"dispatch") ) { return hx::Val( dispatch_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createSlot") ) { return hx::Val( createSlot_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Signal1_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Signal1_obj_sStaticStorageInfo = 0;
#endif

static ::String Signal1_obj_sMemberFields[] = {
	HX_("dispatch",ba,ce,63,1e),
	HX_("createSlot",1a,9f,e3,5e),
	::String(null()) };

hx::Class Signal1_obj::__mClass;

void Signal1_obj::__register()
{
	Signal1_obj _hx_dummy;
	Signal1_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Signal1",d0,f1,dd,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Signal1_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Signal1_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Signal1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Signal1_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
