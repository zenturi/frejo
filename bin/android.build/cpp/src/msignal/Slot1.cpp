// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Signal1
#include <msignal/Signal1.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_Slot1
#include <msignal/Slot1.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e39a84092ba9314_143_new,"msignal.Slot1","new",0xbcf8cbac,"msignal.Slot1.new","msignal/Slot.hx",143,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_6e39a84092ba9314_151_execute,"msignal.Slot1","execute",0x00bf9b81,"msignal.Slot1.execute","msignal/Slot.hx",151,0x8d27aea6)
namespace msignal{

void Slot1_obj::__construct( ::msignal::Signal1 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_6e39a84092ba9314_143_new)
HXDLIN( 143)		super::__construct(signal,listener,once,priority);
            	}

Dynamic Slot1_obj::__CreateEmpty() { return new Slot1_obj; }

void *Slot1_obj::_hx_vtable = 0;

Dynamic Slot1_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Slot1_obj > _hx_result = new Slot1_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Slot1_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d29f933) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1d29f933;
	} else {
		return inClassId==(int)0x6790139e;
	}
}

void Slot1_obj::execute( ::Dynamic value1){
            	HX_STACKFRAME(&_hx_pos_6e39a84092ba9314_151_execute)
HXLINE( 152)		if (!(this->enabled)) {
HXLINE( 152)			return;
            		}
HXLINE( 153)		if (this->once) {
HXLINE( 153)			this->remove();
            		}
HXLINE( 154)		if (hx::IsNotNull( this->param )) {
HXLINE( 154)			value1 = this->param;
            		}
HXLINE( 155)		this->get_listener()(value1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Slot1_obj,execute,(void))


hx::ObjectPtr< Slot1_obj > Slot1_obj::__new( ::msignal::Signal1 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	hx::ObjectPtr< Slot1_obj > __this = new Slot1_obj();
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

hx::ObjectPtr< Slot1_obj > Slot1_obj::__alloc(hx::Ctx *_hx_ctx, ::msignal::Signal1 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	Slot1_obj *__this = (Slot1_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Slot1_obj), true, "msignal.Slot1"));
	*(void **)__this = Slot1_obj::_hx_vtable;
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

Slot1_obj::Slot1_obj()
{
}

void Slot1_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Slot1);
	HX_MARK_MEMBER_NAME(param,"param");
	 ::msignal::Slot_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Slot1_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(param,"param");
	 ::msignal::Slot_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Slot1_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"param") ) { return hx::Val( param ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Slot1_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"param") ) { param=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Slot1_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("param",8d,80,55,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Slot1_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Slot1_obj,param),HX_("param",8d,80,55,bd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Slot1_obj_sStaticStorageInfo = 0;
#endif

static ::String Slot1_obj_sMemberFields[] = {
	HX_("param",8d,80,55,bd),
	HX_("execute",35,0a,0d,cc),
	::String(null()) };

hx::Class Slot1_obj::__mClass;

void Slot1_obj::__register()
{
	Slot1_obj _hx_dummy;
	Slot1_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Slot1",ba,c5,6e,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Slot1_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Slot1_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Slot1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Slot1_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
