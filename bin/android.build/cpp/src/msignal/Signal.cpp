// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_SlotList
#include <msignal/SlotList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_50_new,"msignal.Signal","new",0x1a833cb3,"msignal.Signal.new","msignal/Signal.hx",50,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_65_add,"msignal.Signal","add",0x1a795e74,"msignal.Signal.add","msignal/Signal.hx",65,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_78_addOnce,"msignal.Signal","addOnce",0xf4875215,"msignal.Signal.addOnce","msignal/Signal.hx",78,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_93_addWithPriority,"msignal.Signal","addWithPriority",0x5150ac1e,"msignal.Signal.addWithPriority","msignal/Signal.hx",93,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_106_addOnceWithPriority,"msignal.Signal","addOnceWithPriority",0x200e0d3f,"msignal.Signal.addOnceWithPriority","msignal/Signal.hx",106,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_116_remove,"msignal.Signal","remove",0xcba165d1,"msignal.Signal.remove","msignal/Signal.hx",116,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_129_removeAll,"msignal.Signal","removeAll",0xbbe303d0,"msignal.Signal.removeAll","msignal/Signal.hx",129,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_133_registerListener,"msignal.Signal","registerListener",0x68c419c4,"msignal.Signal.registerListener","msignal/Signal.hx",133,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_149_registrationPossible,"msignal.Signal","registrationPossible",0x7873dbd7,"msignal.Signal.registrationPossible","msignal/Signal.hx",149,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_169_createSlot,"msignal.Signal","createSlot",0x4c14b327,"msignal.Signal.createSlot","msignal/Signal.hx",169,0xeae291fc)
HX_LOCAL_STACK_FRAME(_hx_pos_1fa81368c8f1ae5e_174_get_numListeners,"msignal.Signal","get_numListeners",0xd16c76af,"msignal.Signal.get_numListeners","msignal/Signal.hx",174,0xeae291fc)
namespace msignal{

void Signal_obj::__construct(::cpp::VirtualArray valueClasses){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_50_new)
HXLINE(  51)		if (hx::IsNull( valueClasses )) {
HXLINE(  51)			valueClasses = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(  52)		this->valueClasses = valueClasses;
HXLINE(  53)		this->slots = ::msignal::SlotList_obj::NIL;
HXLINE(  54)		this->priorityBased = false;
            	}

Dynamic Signal_obj::__CreateEmpty() { return new Signal_obj; }

void *Signal_obj::_hx_vtable = 0;

Dynamic Signal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Signal_obj > _hx_result = new Signal_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Signal_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76ff40dd;
}

 ::Dynamic Signal_obj::add( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_65_add)
HXDLIN(  65)		return this->registerListener(listener,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,add,return )

 ::Dynamic Signal_obj::addOnce( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_78_addOnce)
HXDLIN(  78)		return this->registerListener(listener,true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,addOnce,return )

 ::Dynamic Signal_obj::addWithPriority( ::Dynamic listener, ::Dynamic __o_priority){
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_93_addWithPriority)
HXDLIN(  93)		return this->registerListener(listener,false,priority);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Signal_obj,addWithPriority,return )

 ::Dynamic Signal_obj::addOnceWithPriority( ::Dynamic listener, ::Dynamic __o_priority){
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_106_addOnceWithPriority)
HXDLIN( 106)		return this->registerListener(listener,true,priority);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Signal_obj,addOnceWithPriority,return )

 ::Dynamic Signal_obj::remove( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_116_remove)
HXLINE( 117)		 ::Dynamic slot = this->slots->find(listener);
HXLINE( 118)		if (hx::IsNull( slot )) {
HXLINE( 118)			return null();
            		}
HXLINE( 120)		this->slots = this->slots->filterNot(listener);
HXLINE( 121)		return slot;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,remove,return )

void Signal_obj::removeAll(){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_129_removeAll)
HXDLIN( 129)		this->slots = ::msignal::SlotList_obj::NIL;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Signal_obj,removeAll,(void))

 ::Dynamic Signal_obj::registerListener( ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_133_registerListener)
HXLINE( 134)		if (this->registrationPossible(listener,once)) {
HXLINE( 136)			 ::Dynamic newSlot = this->createSlot(listener,once,priority);
HXLINE( 138)			bool _hx_tmp;
HXDLIN( 138)			if (!(this->priorityBased)) {
HXLINE( 138)				_hx_tmp = hx::IsNotEq( priority,0 );
            			}
            			else {
HXLINE( 138)				_hx_tmp = false;
            			}
HXDLIN( 138)			if (_hx_tmp) {
HXLINE( 138)				this->priorityBased = true;
            			}
HXLINE( 139)			bool _hx_tmp1;
HXDLIN( 139)			if (!(this->priorityBased)) {
HXLINE( 139)				_hx_tmp1 = hx::IsEq( priority,0 );
            			}
            			else {
HXLINE( 139)				_hx_tmp1 = false;
            			}
HXDLIN( 139)			if (_hx_tmp1) {
HXLINE( 139)				this->slots = this->slots->prepend(newSlot);
            			}
            			else {
HXLINE( 140)				this->slots = this->slots->insertWithPriority(newSlot);
            			}
HXLINE( 142)			return newSlot;
            		}
HXLINE( 145)		return this->slots->find(listener);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Signal_obj,registerListener,return )

bool Signal_obj::registrationPossible( ::Dynamic listener, ::Dynamic once){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_149_registrationPossible)
HXLINE( 150)		if (!(this->slots->nonEmpty)) {
HXLINE( 150)			return true;
            		}
HXLINE( 152)		 ::Dynamic existingSlot = this->slots->find(listener);
HXLINE( 153)		if (hx::IsNull( existingSlot )) {
HXLINE( 153)			return true;
            		}
HXLINE( 164)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Signal_obj,registrationPossible,return )

 ::Dynamic Signal_obj::createSlot( ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_169_createSlot)
HXDLIN( 169)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Signal_obj,createSlot,return )

int Signal_obj::get_numListeners(){
            	HX_STACKFRAME(&_hx_pos_1fa81368c8f1ae5e_174_get_numListeners)
HXDLIN( 174)		return this->slots->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Signal_obj,get_numListeners,return )


hx::ObjectPtr< Signal_obj > Signal_obj::__new(::cpp::VirtualArray valueClasses) {
	hx::ObjectPtr< Signal_obj > __this = new Signal_obj();
	__this->__construct(valueClasses);
	return __this;
}

hx::ObjectPtr< Signal_obj > Signal_obj::__alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray valueClasses) {
	Signal_obj *__this = (Signal_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Signal_obj), true, "msignal.Signal"));
	*(void **)__this = Signal_obj::_hx_vtable;
	__this->__construct(valueClasses);
	return __this;
}

Signal_obj::Signal_obj()
{
}

void Signal_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Signal);
	HX_MARK_MEMBER_NAME(valueClasses,"valueClasses");
	HX_MARK_MEMBER_NAME(numListeners,"numListeners");
	HX_MARK_MEMBER_NAME(slots,"slots");
	HX_MARK_MEMBER_NAME(priorityBased,"priorityBased");
	HX_MARK_END_CLASS();
}

void Signal_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(valueClasses,"valueClasses");
	HX_VISIT_MEMBER_NAME(numListeners,"numListeners");
	HX_VISIT_MEMBER_NAME(slots,"slots");
	HX_VISIT_MEMBER_NAME(priorityBased,"priorityBased");
}

hx::Val Signal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slots") ) { return hx::Val( slots ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addOnce") ) { return hx::Val( addOnce_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"removeAll") ) { return hx::Val( removeAll_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createSlot") ) { return hx::Val( createSlot_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"valueClasses") ) { return hx::Val( valueClasses ); }
		if (HX_FIELD_EQ(inName,"numListeners") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numListeners() : numListeners ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"priorityBased") ) { return hx::Val( priorityBased ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addWithPriority") ) { return hx::Val( addWithPriority_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerListener") ) { return hx::Val( registerListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numListeners") ) { return hx::Val( get_numListeners_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"addOnceWithPriority") ) { return hx::Val( addOnceWithPriority_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"registrationPossible") ) { return hx::Val( registrationPossible_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Signal_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"slots") ) { slots=inValue.Cast<  ::msignal::SlotList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"valueClasses") ) { valueClasses=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numListeners") ) { numListeners=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"priorityBased") ) { priorityBased=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Signal_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("valueClasses",35,37,0c,72));
	outFields->push(HX_("numListeners",59,6e,fe,9a));
	outFields->push(HX_("slots",b5,60,cc,7e));
	outFields->push(HX_("priorityBased",2f,51,fb,e5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Signal_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Signal_obj,valueClasses),HX_("valueClasses",35,37,0c,72)},
	{hx::fsInt,(int)offsetof(Signal_obj,numListeners),HX_("numListeners",59,6e,fe,9a)},
	{hx::fsObject /*::msignal::SlotList*/ ,(int)offsetof(Signal_obj,slots),HX_("slots",b5,60,cc,7e)},
	{hx::fsBool,(int)offsetof(Signal_obj,priorityBased),HX_("priorityBased",2f,51,fb,e5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Signal_obj_sStaticStorageInfo = 0;
#endif

static ::String Signal_obj_sMemberFields[] = {
	HX_("valueClasses",35,37,0c,72),
	HX_("numListeners",59,6e,fe,9a),
	HX_("slots",b5,60,cc,7e),
	HX_("priorityBased",2f,51,fb,e5),
	HX_("add",21,f2,49,00),
	HX_("addOnce",42,c0,ef,85),
	HX_("addWithPriority",4b,8f,46,5a),
	HX_("addOnceWithPriority",ec,8a,39,26),
	HX_("remove",44,9c,88,04),
	HX_("removeAll",3d,17,e5,ca),
	HX_("registerListener",f7,fd,f4,36),
	HX_("registrationPossible",8a,55,56,d8),
	HX_("createSlot",1a,9f,e3,5e),
	HX_("get_numListeners",e2,5a,9d,9f),
	::String(null()) };

hx::Class Signal_obj::__mClass;

void Signal_obj::__register()
{
	Signal_obj _hx_dummy;
	Signal_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Signal",41,67,fc,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Signal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Signal_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Signal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Signal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
