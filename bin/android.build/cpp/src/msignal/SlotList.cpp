// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_SlotList
#include <msignal/SlotList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fc02bad902711957_51_new,"msignal.SlotList","new",0x5eabee07,"msignal.SlotList.new","msignal/SlotList.hx",51,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_73078aebd0efd453_28___init__,"::msignal::SlotList_obj","__init__",0x475fc875,"::msignal::SlotList_obj.__init__","msignal/SlotList.hx",28,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_82_get_length,"msignal.SlotList","get_length",0x330cf9e8,"msignal.SlotList.get_length","msignal/SlotList.hx",82,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_109_prepend,"msignal.SlotList","prepend",0x68f61435,"msignal.SlotList.prepend","msignal/SlotList.hx",109,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_121_append,"msignal.SlotList","append",0x520e8693,"msignal.SlotList.append","msignal/SlotList.hx",121,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_155_insertWithPriority,"msignal.SlotList","insertWithPriority",0xe3d67a9c,"msignal.SlotList.insertWithPriority","msignal/SlotList.hx",155,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_193_filterNot,"msignal.SlotList","filterNot",0xa0af6922,"msignal.SlotList.filterNot","msignal/SlotList.hx",193,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_225_contains,"msignal.SlotList","contains",0xee335f18,"msignal.SlotList.contains","msignal/SlotList.hx",225,0xabc95ce8)
HX_LOCAL_STACK_FRAME(_hx_pos_fc02bad902711957_246_find,"msignal.SlotList","find",0x727da4b2,"msignal.SlotList.find","msignal/SlotList.hx",246,0xabc95ce8)
namespace msignal{

void SlotList_obj::__construct( ::Dynamic head, ::msignal::SlotList tail){
            	HX_STACKFRAME(&_hx_pos_fc02bad902711957_51_new)
HXLINE(  52)		this->nonEmpty = false;
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (hx::IsNull( head )) {
HXLINE(  54)			_hx_tmp = hx::IsNull( tail );
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  61)			this->nonEmpty = false;
            		}
            		else {
HXLINE(  63)			if (hx::IsNotNull( head )) {
HXLINE(  71)				this->head = head;
HXLINE(  72)				 ::msignal::SlotList _hx_tmp1;
HXDLIN(  72)				if (hx::IsNull( tail )) {
HXLINE(  72)					_hx_tmp1 = ::msignal::SlotList_obj::NIL;
            				}
            				else {
HXLINE(  72)					_hx_tmp1 = tail;
            				}
HXDLIN(  72)				this->tail = _hx_tmp1;
HXLINE(  73)				this->nonEmpty = true;
            			}
            		}
            	}

Dynamic SlotList_obj::__CreateEmpty() { return new SlotList_obj; }

void *SlotList_obj::_hx_vtable = 0;

Dynamic SlotList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SlotList_obj > _hx_result = new SlotList_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SlotList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a28f569;
}

void SlotList_obj::__init__(){
            	HX_GC_STACKFRAME(&_hx_pos_73078aebd0efd453_28___init__)
HXDLIN(  28)		::msignal::SlotList_obj::NIL =  ::msignal::SlotList_obj::__alloc( HX_CTX ,null(),null());
            	}


int SlotList_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_fc02bad902711957_82_get_length)
HXLINE(  83)		if (!(this->nonEmpty)) {
HXLINE(  83)			return 0;
            		}
HXLINE(  84)		if (hx::IsEq( this->tail,::msignal::SlotList_obj::NIL )) {
HXLINE(  84)			return 1;
            		}
HXLINE(  90)		int result = 0;
HXLINE(  91)		 ::msignal::SlotList p = hx::ObjectPtr<OBJ_>(this);
HXLINE(  93)		while(p->nonEmpty){
HXLINE(  95)			result = (result + 1);
HXLINE(  96)			p = p->tail;
            		}
HXLINE(  99)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SlotList_obj,get_length,return )

 ::msignal::SlotList SlotList_obj::prepend( ::Dynamic slot){
            	HX_GC_STACKFRAME(&_hx_pos_fc02bad902711957_109_prepend)
HXDLIN( 109)		return  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,prepend,return )

 ::msignal::SlotList SlotList_obj::append( ::Dynamic slot){
            	HX_GC_STACKFRAME(&_hx_pos_fc02bad902711957_121_append)
HXLINE( 122)		if (hx::IsNull( slot )) {
HXLINE( 122)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 123)		if (!(this->nonEmpty)) {
HXLINE( 123)			return  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,null());
            		}
HXLINE( 126)		if (hx::IsEq( this->tail,::msignal::SlotList_obj::NIL )) {
HXLINE( 128)			return  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,null())->prepend(this->head);
            		}
HXLINE( 133)		 ::msignal::SlotList wholeClone =  ::msignal::SlotList_obj::__alloc( HX_CTX ,this->head,null());
HXLINE( 134)		 ::msignal::SlotList subClone = wholeClone;
HXLINE( 135)		 ::msignal::SlotList current = this->tail;
HXLINE( 137)		while(current->nonEmpty){
HXLINE( 139)			subClone = (subClone->tail =  ::msignal::SlotList_obj::__alloc( HX_CTX ,current->head,null()));
HXLINE( 140)			current = current->tail;
            		}
HXLINE( 144)		subClone->tail =  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,null());
HXLINE( 145)		return wholeClone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,append,return )

 ::msignal::SlotList SlotList_obj::insertWithPriority( ::Dynamic slot){
            	HX_GC_STACKFRAME(&_hx_pos_fc02bad902711957_155_insertWithPriority)
HXLINE( 156)		if (!(this->nonEmpty)) {
HXLINE( 156)			return  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,null());
            		}
HXLINE( 158)		int priority = ( ( ::msignal::Slot)(slot) )->priority;
HXLINE( 161)		if ((priority >= ( ( ::msignal::Slot)(this->head) )->priority)) {
HXLINE( 161)			return this->prepend(slot);
            		}
HXLINE( 163)		 ::msignal::SlotList wholeClone =  ::msignal::SlotList_obj::__alloc( HX_CTX ,this->head,null());
HXLINE( 164)		 ::msignal::SlotList subClone = wholeClone;
HXLINE( 165)		 ::msignal::SlotList current = this->tail;
HXLINE( 168)		while(current->nonEmpty){
HXLINE( 170)			if ((priority > ( ( ::msignal::Slot)(current->head) )->priority)) {
HXLINE( 172)				subClone->tail = current->prepend(slot);
HXLINE( 173)				return wholeClone;
            			}
HXLINE( 176)			subClone = (subClone->tail =  ::msignal::SlotList_obj::__alloc( HX_CTX ,current->head,null()));
HXLINE( 177)			current = current->tail;
            		}
HXLINE( 181)		subClone->tail =  ::msignal::SlotList_obj::__alloc( HX_CTX ,slot,null());
HXLINE( 182)		return wholeClone;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,insertWithPriority,return )

 ::msignal::SlotList SlotList_obj::filterNot( ::Dynamic listener){
            	HX_GC_STACKFRAME(&_hx_pos_fc02bad902711957_193_filterNot)
HXLINE( 194)		bool _hx_tmp;
HXDLIN( 194)		if (!(!(this->nonEmpty))) {
HXLINE( 194)			_hx_tmp = hx::IsNull( listener );
            		}
            		else {
HXLINE( 194)			_hx_tmp = true;
            		}
HXDLIN( 194)		if (_hx_tmp) {
HXLINE( 194)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 196)		if (::Reflect_obj::compareMethods(( ( ::msignal::Slot)(this->head) )->get_listener(),listener)) {
HXLINE( 196)			return this->tail;
            		}
HXLINE( 199)		 ::msignal::SlotList wholeClone =  ::msignal::SlotList_obj::__alloc( HX_CTX ,this->head,null());
HXLINE( 200)		 ::msignal::SlotList subClone = wholeClone;
HXLINE( 201)		 ::msignal::SlotList current = this->tail;
HXLINE( 203)		while(current->nonEmpty){
HXLINE( 205)			if (::Reflect_obj::compareMethods(( ( ::msignal::Slot)(current->head) )->get_listener(),listener)) {
HXLINE( 208)				subClone->tail = current->tail;
HXLINE( 209)				return wholeClone;
            			}
HXLINE( 212)			subClone = (subClone->tail =  ::msignal::SlotList_obj::__alloc( HX_CTX ,current->head,null()));
HXLINE( 213)			current = current->tail;
            		}
HXLINE( 217)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,filterNot,return )

bool SlotList_obj::contains( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_fc02bad902711957_225_contains)
HXLINE( 226)		if (!(this->nonEmpty)) {
HXLINE( 226)			return false;
            		}
HXLINE( 228)		 ::msignal::SlotList p = hx::ObjectPtr<OBJ_>(this);
HXLINE( 229)		while(p->nonEmpty){
HXLINE( 231)			if (::Reflect_obj::compareMethods(( ( ::msignal::Slot)(p->head) )->get_listener(),listener)) {
HXLINE( 231)				return true;
            			}
HXLINE( 232)			p = p->tail;
            		}
HXLINE( 235)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,contains,return )

 ::Dynamic SlotList_obj::find( ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_fc02bad902711957_246_find)
HXLINE( 247)		if (!(this->nonEmpty)) {
HXLINE( 247)			return null();
            		}
HXLINE( 249)		 ::msignal::SlotList p = hx::ObjectPtr<OBJ_>(this);
HXLINE( 250)		while(p->nonEmpty){
HXLINE( 252)			if (::Reflect_obj::compareMethods(( ( ::msignal::Slot)(p->head) )->get_listener(),listener)) {
HXLINE( 252)				return p->head;
            			}
HXLINE( 253)			p = p->tail;
            		}
HXLINE( 256)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SlotList_obj,find,return )

 ::msignal::SlotList SlotList_obj::NIL;


hx::ObjectPtr< SlotList_obj > SlotList_obj::__new( ::Dynamic head, ::msignal::SlotList tail) {
	hx::ObjectPtr< SlotList_obj > __this = new SlotList_obj();
	__this->__construct(head,tail);
	return __this;
}

hx::ObjectPtr< SlotList_obj > SlotList_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic head, ::msignal::SlotList tail) {
	SlotList_obj *__this = (SlotList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SlotList_obj), true, "msignal.SlotList"));
	*(void **)__this = SlotList_obj::_hx_vtable;
	__this->__construct(head,tail);
	return __this;
}

SlotList_obj::SlotList_obj()
{
}

void SlotList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SlotList);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(tail,"tail");
	HX_MARK_MEMBER_NAME(nonEmpty,"nonEmpty");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void SlotList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(tail,"tail");
	HX_VISIT_MEMBER_NAME(nonEmpty,"nonEmpty");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val SlotList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"tail") ) { return hx::Val( tail ); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nonEmpty") ) { return hx::Val( nonEmpty ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"filterNot") ) { return hx::Val( filterNot_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"insertWithPriority") ) { return hx::Val( insertWithPriority_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SlotList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"NIL") ) { outValue = ( NIL ); return true; }
	}
	return false;
}

hx::Val SlotList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tail") ) { tail=inValue.Cast<  ::msignal::SlotList >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nonEmpty") ) { nonEmpty=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SlotList_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"NIL") ) { NIL=ioValue.Cast<  ::msignal::SlotList >(); return true; }
	}
	return false;
}

void SlotList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("tail",90,b6,f6,4c));
	outFields->push(HX_("nonEmpty",40,e2,c4,99));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SlotList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SlotList_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsObject /*::msignal::SlotList*/ ,(int)offsetof(SlotList_obj,tail),HX_("tail",90,b6,f6,4c)},
	{hx::fsBool,(int)offsetof(SlotList_obj,nonEmpty),HX_("nonEmpty",40,e2,c4,99)},
	{hx::fsInt,(int)offsetof(SlotList_obj,length),HX_("length",e6,94,07,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SlotList_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::msignal::SlotList*/ ,(void *) &SlotList_obj::NIL,HX_("NIL",b1,6f,3b,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SlotList_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("tail",90,b6,f6,4c),
	HX_("nonEmpty",40,e2,c4,99),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("prepend",0e,97,e0,37),
	HX_("append",da,e1,d3,8f),
	HX_("insertWithPriority",63,24,1b,fa),
	HX_("filterNot",3b,14,63,e1),
	HX_("contains",1f,5a,7b,2c),
	HX_("find",39,d0,bb,43),
	::String(null()) };

static void SlotList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SlotList_obj::NIL,"NIL");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SlotList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SlotList_obj::NIL,"NIL");
};

#endif

hx::Class SlotList_obj::__mClass;

static ::String SlotList_obj_sStaticFields[] = {
	HX_("NIL",b1,6f,3b,00),
	::String(null())
};

void SlotList_obj::__register()
{
	SlotList_obj _hx_dummy;
	SlotList_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.SlotList",95,de,74,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SlotList_obj::__GetStatic;
	__mClass->mSetStaticField = &SlotList_obj::__SetStatic;
	__mClass->mMarkFunc = SlotList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SlotList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SlotList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SlotList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SlotList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SlotList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SlotList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SlotList_obj::__boot()
{
}

} // end namespace msignal
