// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Signal0
#include <msignal/Signal0.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_Slot0
#include <msignal/Slot0.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb679ffd90d9cab0_117_new,"msignal.Slot0","new",0x2992372b,"msignal.Slot0.new","msignal/Slot.hx",117,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_fb679ffd90d9cab0_124_execute,"msignal.Slot0","execute",0x2dce3280,"msignal.Slot0.execute","msignal/Slot.hx",124,0x8d27aea6)
namespace msignal{

void Slot0_obj::__construct( ::msignal::Signal0 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_fb679ffd90d9cab0_117_new)
HXDLIN( 117)		super::__construct(signal,listener,once,priority);
            	}

Dynamic Slot0_obj::__CreateEmpty() { return new Slot0_obj; }

void *Slot0_obj::_hx_vtable = 0;

Dynamic Slot0_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Slot0_obj > _hx_result = new Slot0_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Slot0_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d29f933) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1d29f933;
	} else {
		return inClassId==(int)0x6790139d;
	}
}

void Slot0_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_fb679ffd90d9cab0_124_execute)
HXLINE( 125)		if (!(this->enabled)) {
HXLINE( 125)			return;
            		}
HXLINE( 126)		if (this->once) {
HXLINE( 126)			this->remove();
            		}
HXLINE( 127)		this->get_listener()();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Slot0_obj,execute,(void))


hx::ObjectPtr< Slot0_obj > Slot0_obj::__new( ::msignal::Signal0 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	hx::ObjectPtr< Slot0_obj > __this = new Slot0_obj();
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

hx::ObjectPtr< Slot0_obj > Slot0_obj::__alloc(hx::Ctx *_hx_ctx, ::msignal::Signal0 signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	Slot0_obj *__this = (Slot0_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Slot0_obj), true, "msignal.Slot0"));
	*(void **)__this = Slot0_obj::_hx_vtable;
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

Slot0_obj::Slot0_obj()
{
}

hx::Val Slot0_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Slot0_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Slot0_obj_sStaticStorageInfo = 0;
#endif

static ::String Slot0_obj_sMemberFields[] = {
	HX_("execute",35,0a,0d,cc),
	::String(null()) };

hx::Class Slot0_obj::__mClass;

void Slot0_obj::__register()
{
	Slot0_obj _hx_dummy;
	Slot0_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Slot0",b9,c5,6e,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Slot0_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Slot0_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Slot0_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Slot0_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
