// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c4d6942200fce81_74_new,"msignal.Slot","new",0x22a43709,"msignal.Slot.new","msignal/Slot.hx",74,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_4c4d6942200fce81_87_remove,"msignal.Slot","remove",0x0fb1053b,"msignal.Slot.remove","msignal/Slot.hx",87,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_4c4d6942200fce81_97_get_listener,"msignal.Slot","get_listener",0x9de7b0b4,"msignal.Slot.get_listener","msignal/Slot.hx",97,0x8d27aea6)
HX_LOCAL_STACK_FRAME(_hx_pos_4c4d6942200fce81_106_set_listener,"msignal.Slot","set_listener",0xb2e0d428,"msignal.Slot.set_listener","msignal/Slot.hx",106,0x8d27aea6)
namespace msignal{

void Slot_obj::__construct( ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority){
 ::Dynamic once = __o_once.Default(false);
 ::Dynamic priority = __o_priority.Default(0);
            	HX_STACKFRAME(&_hx_pos_4c4d6942200fce81_74_new)
HXLINE(  75)		this->signal = signal;
HXLINE(  76)		this->set_listener(listener);
HXLINE(  77)		this->once = ( (bool)(once) );
HXLINE(  78)		this->priority = ( (int)(priority) );
HXLINE(  79)		this->enabled = true;
            	}

Dynamic Slot_obj::__CreateEmpty() { return new Slot_obj; }

void *Slot_obj::_hx_vtable = 0;

Dynamic Slot_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Slot_obj > _hx_result = new Slot_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Slot_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d29f933;
}

void Slot_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_4c4d6942200fce81_87_remove)
HXDLIN(  87)		 ::Dynamic _hx_tmp = this->signal;
HXDLIN(  87)		( ( ::msignal::Signal)(_hx_tmp) )->remove(this->get_listener());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Slot_obj,remove,(void))

 ::Dynamic Slot_obj::get_listener(){
            	HX_STACKFRAME(&_hx_pos_4c4d6942200fce81_97_get_listener)
HXDLIN(  97)		return this->listener;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Slot_obj,get_listener,return )

 ::Dynamic Slot_obj::set_listener( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4c4d6942200fce81_106_set_listener)
HXDLIN( 106)		return (this->listener = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Slot_obj,set_listener,return )


hx::ObjectPtr< Slot_obj > Slot_obj::__new( ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	hx::ObjectPtr< Slot_obj > __this = new Slot_obj();
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

hx::ObjectPtr< Slot_obj > Slot_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic signal, ::Dynamic listener, ::Dynamic __o_once, ::Dynamic __o_priority) {
	Slot_obj *__this = (Slot_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Slot_obj), true, "msignal.Slot"));
	*(void **)__this = Slot_obj::_hx_vtable;
	__this->__construct(signal,listener,__o_once,__o_priority);
	return __this;
}

Slot_obj::Slot_obj()
{
}

void Slot_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Slot);
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_MEMBER_NAME(once,"once");
	HX_MARK_MEMBER_NAME(priority,"priority");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(signal,"signal");
	HX_MARK_END_CLASS();
}

void Slot_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(listener,"listener");
	HX_VISIT_MEMBER_NAME(once,"once");
	HX_VISIT_MEMBER_NAME(priority,"priority");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(signal,"signal");
}

hx::Val Slot_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"once") ) { return hx::Val( once ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"signal") ) { return hx::Val( signal ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( inCallProp == hx::paccAlways ? get_listener() : listener ); }
		if (HX_FIELD_EQ(inName,"priority") ) { return hx::Val( priority ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_listener") ) { return hx::Val( get_listener_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_listener") ) { return hx::Val( set_listener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Slot_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"once") ) { once=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"signal") ) { signal=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_listener(inValue.Cast<  ::Dynamic >()) );listener=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"priority") ) { priority=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Slot_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("listener",74,00,32,38));
	outFields->push(HX_("once",81,7d,b2,49));
	outFields->push(HX_("priority",64,7b,3e,bb));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("signal",68,2e,86,b4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Slot_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Slot_obj,listener),HX_("listener",74,00,32,38)},
	{hx::fsBool,(int)offsetof(Slot_obj,once),HX_("once",81,7d,b2,49)},
	{hx::fsInt,(int)offsetof(Slot_obj,priority),HX_("priority",64,7b,3e,bb)},
	{hx::fsBool,(int)offsetof(Slot_obj,enabled),HX_("enabled",81,04,31,7e)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Slot_obj,signal),HX_("signal",68,2e,86,b4)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Slot_obj_sStaticStorageInfo = 0;
#endif

static ::String Slot_obj_sMemberFields[] = {
	HX_("listener",74,00,32,38),
	HX_("once",81,7d,b2,49),
	HX_("priority",64,7b,3e,bb),
	HX_("enabled",81,04,31,7e),
	HX_("signal",68,2e,86,b4),
	HX_("remove",44,9c,88,04),
	HX_("get_listener",7d,b4,4b,ed),
	HX_("set_listener",f1,d7,44,02),
	::String(null()) };

hx::Class Slot_obj::__mClass;

void Slot_obj::__register()
{
	Slot_obj _hx_dummy;
	Slot_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("msignal.Slot",97,fe,8f,d7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Slot_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Slot_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Slot_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Slot_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace msignal
