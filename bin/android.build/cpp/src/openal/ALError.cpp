// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_openal_ALError
#include <openal/ALError.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_388_desc,"openal.ALError","desc",0x25544e5b,"openal.ALError.desc","openal/AL.hx",388,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_382_boot,"openal.ALError","boot",0x2409743c,"openal.ALError.boot","openal/AL.hx",382,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_383_boot,"openal.ALError","boot",0x2409743c,"openal.ALError.boot","openal/AL.hx",383,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_384_boot,"openal.ALError","boot",0x2409743c,"openal.ALError.boot","openal/AL.hx",384,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_385_boot,"openal.ALError","boot",0x2409743c,"openal.ALError.boot","openal/AL.hx",385,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_14b38f1aefa00734_386_boot,"openal.ALError","boot",0x2409743c,"openal.ALError.boot","openal/AL.hx",386,0x05c85919)
namespace openal{

void ALError_obj::__construct() { }

Dynamic ALError_obj::__CreateEmpty() { return new ALError_obj; }

void *ALError_obj::_hx_vtable = 0;

Dynamic ALError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALError_obj > _hx_result = new ALError_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ALError_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x365c0648;
}

::String ALError_obj::INVALID_NAME;

::String ALError_obj::INVALID_ENUM;

::String ALError_obj::INVALID_VALUE;

::String ALError_obj::INVALID_OPERATION;

::String ALError_obj::OUT_OF_MEMORY;

::String ALError_obj::desc(int error){
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_388_desc)
HXLINE( 390)		if ((error == 40961)) {
HXLINE( 390)			return ::openal::ALError_obj::INVALID_NAME;
            		}
HXLINE( 391)		if ((error == 40962)) {
HXLINE( 391)			return ::openal::ALError_obj::INVALID_ENUM;
            		}
HXLINE( 392)		if ((error == 40963)) {
HXLINE( 392)			return ::openal::ALError_obj::INVALID_VALUE;
            		}
HXLINE( 393)		if ((error == 40964)) {
HXLINE( 393)			return ::openal::ALError_obj::INVALID_OPERATION;
            		}
HXLINE( 394)		if ((error == 40965)) {
HXLINE( 394)			return ::openal::ALError_obj::OUT_OF_MEMORY;
            		}
HXLINE( 396)		return HX_("AL.NO_ERROR: No Error",5c,db,9b,7b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALError_obj,desc,return )


ALError_obj::ALError_obj()
{
}

bool ALError_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { outValue = desc_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"INVALID_NAME") ) { outValue = ( INVALID_NAME ); return true; }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { outValue = ( INVALID_ENUM ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { outValue = ( INVALID_VALUE ); return true; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { outValue = ( OUT_OF_MEMORY ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { outValue = ( INVALID_OPERATION ); return true; }
	}
	return false;
}

bool ALError_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"INVALID_NAME") ) { INVALID_NAME=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { INVALID_ENUM=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { INVALID_VALUE=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { OUT_OF_MEMORY=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { INVALID_OPERATION=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ALError_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALError_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &ALError_obj::INVALID_NAME,HX_("INVALID_NAME",f3,7b,59,19)},
	{hx::fsString,(void *) &ALError_obj::INVALID_ENUM,HX_("INVALID_ENUM",a9,74,70,13)},
	{hx::fsString,(void *) &ALError_obj::INVALID_VALUE,HX_("INVALID_VALUE",a9,e8,26,b0)},
	{hx::fsString,(void *) &ALError_obj::INVALID_OPERATION,HX_("INVALID_OPERATION",5f,b1,c8,29)},
	{hx::fsString,(void *) &ALError_obj::OUT_OF_MEMORY,HX_("OUT_OF_MEMORY",18,f2,97,e1)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALError_obj::INVALID_NAME,"INVALID_NAME");
	HX_MARK_MEMBER_NAME(ALError_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALError_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALError_obj::INVALID_OPERATION,"INVALID_OPERATION");
	HX_MARK_MEMBER_NAME(ALError_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALError_obj::INVALID_NAME,"INVALID_NAME");
	HX_VISIT_MEMBER_NAME(ALError_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALError_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALError_obj::INVALID_OPERATION,"INVALID_OPERATION");
	HX_VISIT_MEMBER_NAME(ALError_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
};

#endif

hx::Class ALError_obj::__mClass;

static ::String ALError_obj_sStaticFields[] = {
	HX_("INVALID_NAME",f3,7b,59,19),
	HX_("INVALID_ENUM",a9,74,70,13),
	HX_("INVALID_VALUE",a9,e8,26,b0),
	HX_("INVALID_OPERATION",5f,b1,c8,29),
	HX_("OUT_OF_MEMORY",18,f2,97,e1),
	HX_("desc",51,5e,66,42),
	::String(null())
};

void ALError_obj::__register()
{
	ALError_obj _hx_dummy;
	ALError_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openal.ALError",a4,6c,00,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALError_obj::__GetStatic;
	__mClass->mSetStaticField = &ALError_obj::__SetStatic;
	__mClass->mMarkFunc = ALError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALError_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALError_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_382_boot)
HXDLIN( 382)		INVALID_NAME = HX_("AL.INVALID_NAME: Invalid parameter name",c7,71,ae,b1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_383_boot)
HXDLIN( 383)		INVALID_ENUM = HX_("AL.INVALID_ENUM: Invalid enum value",ed,d7,93,79);
            	}
{
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_384_boot)
HXDLIN( 384)		INVALID_VALUE = HX_("AL.INVALID_VALUE: Invalid parameter value",e5,f1,73,b6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_385_boot)
HXDLIN( 385)		INVALID_OPERATION = HX_("AL.INVALID_OPERATION: Illegal operation or call",76,d3,4a,4b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_14b38f1aefa00734_386_boot)
HXDLIN( 386)		OUT_OF_MEMORY = HX_("AL.OUT_OF_MEMORY: OpenAL has run out of memory",ad,11,86,ac);
            	}
}

} // end namespace openal
