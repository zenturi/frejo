// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_result_InjectClassResult
#include <minject/result/InjectClassResult.h>
#endif
#ifndef INCLUDED_minject_result_InjectionResult
#include <minject/result/InjectionResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_363c54d4602a62a9_32_new,"minject.result.InjectClassResult","new",0xc6f66e55,"minject.result.InjectClassResult.new","minject/result/InjectClassResult.hx",32,0x0c76b4db)
HX_LOCAL_STACK_FRAME(_hx_pos_363c54d4602a62a9_39_getResponse,"minject.result.InjectClassResult","getResponse",0xef118c2c,"minject.result.InjectClassResult.getResponse","minject/result/InjectClassResult.hx",39,0x0c76b4db)
HX_LOCAL_STACK_FRAME(_hx_pos_363c54d4602a62a9_44_toString,"minject.result.InjectClassResult","toString",0x23a27a97,"minject.result.InjectClassResult.toString","minject/result/InjectClassResult.hx",44,0x0c76b4db)
namespace minject{
namespace result{

void InjectClassResult_obj::__construct(hx::Class responseType){
            	HX_STACKFRAME(&_hx_pos_363c54d4602a62a9_32_new)
HXLINE(  33)		super::__construct();
HXLINE(  34)		this->responseType = responseType;
            	}

Dynamic InjectClassResult_obj::__CreateEmpty() { return new InjectClassResult_obj; }

void *InjectClassResult_obj::_hx_vtable = 0;

Dynamic InjectClassResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InjectClassResult_obj > _hx_result = new InjectClassResult_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InjectClassResult_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x488f79c9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x488f79c9;
	} else {
		return inClassId==(int)0x70932e79;
	}
}

 ::Dynamic InjectClassResult_obj::getResponse( ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_363c54d4602a62a9_39_getResponse)
HXDLIN(  39)		return injector->instantiate(this->responseType);
            	}


::String InjectClassResult_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_363c54d4602a62a9_44_toString)
HXDLIN(  44)		return (HX_("class ",e8,b8,10,05) + ::Type_obj::getClassName(this->responseType));
            	}



hx::ObjectPtr< InjectClassResult_obj > InjectClassResult_obj::__new(hx::Class responseType) {
	hx::ObjectPtr< InjectClassResult_obj > __this = new InjectClassResult_obj();
	__this->__construct(responseType);
	return __this;
}

hx::ObjectPtr< InjectClassResult_obj > InjectClassResult_obj::__alloc(hx::Ctx *_hx_ctx,hx::Class responseType) {
	InjectClassResult_obj *__this = (InjectClassResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InjectClassResult_obj), true, "minject.result.InjectClassResult"));
	*(void **)__this = InjectClassResult_obj::_hx_vtable;
	__this->__construct(responseType);
	return __this;
}

InjectClassResult_obj::InjectClassResult_obj()
{
}

void InjectClassResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InjectClassResult);
	HX_MARK_MEMBER_NAME(responseType,"responseType");
	HX_MARK_END_CLASS();
}

void InjectClassResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(responseType,"responseType");
}

hx::Val InjectClassResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getResponse") ) { return hx::Val( getResponse_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseType") ) { return hx::Val( responseType ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InjectClassResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"responseType") ) { responseType=inValue.Cast< hx::Class >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InjectClassResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("responseType",db,a1,8e,cf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InjectClassResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(InjectClassResult_obj,responseType),HX_("responseType",db,a1,8e,cf)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InjectClassResult_obj_sStaticStorageInfo = 0;
#endif

static ::String InjectClassResult_obj_sMemberFields[] = {
	HX_("responseType",db,a1,8e,cf),
	HX_("getResponse",37,71,00,c8),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class InjectClassResult_obj::__mClass;

void InjectClassResult_obj::__register()
{
	InjectClassResult_obj _hx_dummy;
	InjectClassResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.result.InjectClassResult",e3,9f,89,45);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InjectClassResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InjectClassResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InjectClassResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InjectClassResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
} // end namespace result
