// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_api_Debug
#include <snow/api/Debug.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9cb4979f47817942_250__get_spacing,"snow.api.Debug","_get_spacing",0x9b233895,"snow.api.Debug._get_spacing","snow/api/Debug.hx",250,0x9e629c0c)
HX_LOCAL_STACK_FRAME(_hx_pos_9cb4979f47817942_14_boot,"snow.api.Debug","boot",0xd772f12c,"snow.api.Debug.boot","snow/api/Debug.hx",14,0x9e629c0c)
HX_LOCAL_STACK_FRAME(_hx_pos_9cb4979f47817942_17_boot,"snow.api.Debug","boot",0xd772f12c,"snow.api.Debug.boot","snow/api/Debug.hx",17,0x9e629c0c)
namespace snow{
namespace api{

void Debug_obj::__construct() { }

Dynamic Debug_obj::__CreateEmpty() { return new Debug_obj; }

void *Debug_obj::_hx_vtable = 0;

Dynamic Debug_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Debug_obj > _hx_result = new Debug_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Debug_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e887fdc;
}

int Debug_obj::_level;

::Array< ::String > Debug_obj::_filter;

::Array< ::String > Debug_obj::_exclude;

int Debug_obj::_log_width;

::String Debug_obj::_get_spacing(::String _file){
            	HX_STACKFRAME(&_hx_pos_9cb4979f47817942_250__get_spacing)
HXLINE( 252)		::String _spaces = HX_("",00,00,00,00);
HXLINE( 255)		int _trace_length = (_file.length + 4);
HXLINE( 256)		int _diff = (::snow::api::Debug_obj::_log_width - _trace_length);
HXLINE( 257)		if ((_diff > 0)) {
HXLINE( 258)			int _g1 = 0;
HXDLIN( 258)			int _g = _diff;
HXDLIN( 258)			while((_g1 < _g)){
HXLINE( 258)				_g1 = (_g1 + 1);
HXDLIN( 258)				int i = (_g1 - 1);
HXLINE( 259)				_spaces = (_spaces + HX_(" ",20,00,00,00));
            			}
            		}
HXLINE( 263)		return _spaces;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,_get_spacing,return )


Debug_obj::Debug_obj()
{
}

bool Debug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { outValue = ( _level ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { outValue = ( _filter ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_exclude") ) { outValue = ( _exclude ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_log_width") ) { outValue = ( _log_width ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_get_spacing") ) { outValue = _get_spacing_dyn(); return true; }
	}
	return false;
}

bool Debug_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_level") ) { _level=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_filter") ) { _filter=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_exclude") ) { _exclude=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_log_width") ) { _log_width=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Debug_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Debug_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Debug_obj::_level,HX_("_level",c5,5c,4a,6e)},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Debug_obj::_filter,HX_("_filter",57,31,ac,f3)},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Debug_obj::_exclude,HX_("_exclude",5b,18,eb,e4)},
	{hx::fsInt,(void *) &Debug_obj::_log_width,HX_("_log_width",8c,08,c7,a7)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Debug_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Debug_obj::_level,"_level");
	HX_MARK_MEMBER_NAME(Debug_obj::_filter,"_filter");
	HX_MARK_MEMBER_NAME(Debug_obj::_exclude,"_exclude");
	HX_MARK_MEMBER_NAME(Debug_obj::_log_width,"_log_width");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Debug_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Debug_obj::_level,"_level");
	HX_VISIT_MEMBER_NAME(Debug_obj::_filter,"_filter");
	HX_VISIT_MEMBER_NAME(Debug_obj::_exclude,"_exclude");
	HX_VISIT_MEMBER_NAME(Debug_obj::_log_width,"_log_width");
};

#endif

hx::Class Debug_obj::__mClass;

static ::String Debug_obj_sStaticFields[] = {
	HX_("_level",c5,5c,4a,6e),
	HX_("_filter",57,31,ac,f3),
	HX_("_exclude",5b,18,eb,e4),
	HX_("_log_width",8c,08,c7,a7),
	HX_("_get_spacing",9b,41,bf,7d),
	::String(null())
};

void Debug_obj::__register()
{
	Debug_obj _hx_dummy;
	Debug_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.api.Debug",b4,15,e8,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Debug_obj::__GetStatic;
	__mClass->mSetStaticField = &Debug_obj::__SetStatic;
	__mClass->mMarkFunc = Debug_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Debug_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Debug_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Debug_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Debug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Debug_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Debug_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9cb4979f47817942_14_boot)
HXDLIN(  14)		_level = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9cb4979f47817942_17_boot)
HXDLIN(  17)		_log_width = 16;
            	}
}

} // end namespace snow
} // end namespace api
