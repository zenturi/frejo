// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_NativeAudioData
#include <snow/core/native/audio/NativeAudioData.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_OGG
#include <snow/core/native/audio/OGG.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_PCM
#include <snow/core/native/audio/PCM.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_WAV
#include <snow/core/native/audio/WAV.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_27_data_from_load,"snow.core.native.audio.NativeAudioData","data_from_load",0xc78e8fb6,"snow.core.native.audio.NativeAudioData.data_from_load","snow/core/native/audio/NativeAudioData.hx",27,0x07c946e2)
HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_21_data_from_load,"snow.core.native.audio.NativeAudioData","data_from_load",0xc78e8fb6,"snow.core.native.audio.NativeAudioData.data_from_load","snow/core/native/audio/NativeAudioData.hx",21,0x07c946e2)
HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_47_data_from_bytes,"snow.core.native.audio.NativeAudioData","data_from_bytes",0x19d7f0db,"snow.core.native.audio.NativeAudioData.data_from_bytes","snow/core/native/audio/NativeAudioData.hx",47,0x07c946e2)
HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_42_data_from_bytes,"snow.core.native.audio.NativeAudioData","data_from_bytes",0x19d7f0db,"snow.core.native.audio.NativeAudioData.data_from_bytes","snow/core/native/audio/NativeAudioData.hx",42,0x07c946e2)
HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_64_data_from_load_direct,"snow.core.native.audio.NativeAudioData","data_from_load_direct",0x68afcfd2,"snow.core.native.audio.NativeAudioData.data_from_load_direct","snow/core/native/audio/NativeAudioData.hx",64,0x07c946e2)
HX_LOCAL_STACK_FRAME(_hx_pos_0fcf64dd1d54d956_82_data_from_bytes_direct,"snow.core.native.audio.NativeAudioData","data_from_bytes_direct",0x430f0d4d,"snow.core.native.audio.NativeAudioData.data_from_bytes_direct","snow/core/native/audio/NativeAudioData.hx",82,0x07c946e2)
namespace snow{
namespace core{
namespace native{
namespace audio{

void NativeAudioData_obj::__construct() { }

Dynamic NativeAudioData_obj::__CreateEmpty() { return new NativeAudioData_obj; }

void *NativeAudioData_obj::_hx_vtable = 0;

Dynamic NativeAudioData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeAudioData_obj > _hx_result = new NativeAudioData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NativeAudioData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x387b7d70;
}

 ::snow::api::Promise NativeAudioData_obj::data_from_load( ::snow::Snow app,::String _path, ::Dynamic __o__is_stream, ::Dynamic _format){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::Dynamic,_is_stream, ::Dynamic,_format,::String,_path, ::snow::Snow,app) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_27_data_from_load)
HXLINE(  29)			 ::snow::types::AudioData _audio = ::snow::core::native::audio::NativeAudioData_obj::data_from_load_direct(app,_path,_is_stream,_format);
HXLINE(  31)			if (hx::IsNull( _audio )) {
HXLINE(  32)				::String _hx_tmp = ((HX_("failed to load `",c8,23,ec,54) + _path) + HX_("` as `",72,45,8a,0f));
HXDLIN(  32)				::String _hx_tmp1;
HXDLIN(  32)				if (hx::IsNull( _format )) {
HXLINE(  32)					_hx_tmp1 = (HX_("",00,00,00,00) + _format);
            				}
            				else {
HXLINE(  32)					 ::Dynamic _hx_switch_0 = _format;
            					if (  (_hx_switch_0==0) ){
HXLINE(  32)						_hx_tmp1 = HX_("af_unknown",f0,be,9a,03);
HXDLIN(  32)						goto _hx_goto_1;
            					}
            					if (  (_hx_switch_0==1) ){
HXLINE(  32)						_hx_tmp1 = HX_("af_custom",0b,db,9b,65);
HXDLIN(  32)						goto _hx_goto_1;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(  32)						_hx_tmp1 = HX_("af_ogg",b5,04,9d,c2);
HXDLIN(  32)						goto _hx_goto_1;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(  32)						_hx_tmp1 = HX_("af_wav",92,11,a3,c2);
HXDLIN(  32)						goto _hx_goto_1;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(  32)						_hx_tmp1 = HX_("af_pcm",80,c3,9d,c2);
HXDLIN(  32)						goto _hx_goto_1;
            					}
            					/* default */{
HXLINE(  32)						_hx_tmp1 = (HX_("",00,00,00,00) + _format);
            					}
            					_hx_goto_1:;
            				}
HXDLIN(  32)				reject(::snow::types::Error_obj::error(((_hx_tmp + _hx_tmp1) + HX_("` audio.",58,e6,82,0e))));
            			}
            			else {
HXLINE(  34)				resolve(_audio);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

 ::Dynamic _is_stream = __o__is_stream.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_21_data_from_load)
HXLINE(  23)		if (hx::IsNull( _path )) {
HXLINE(  23)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_path was null",fa,86,48,96)));
            		}
HXLINE(  25)		if (hx::IsNull( _format )) {
HXLINE(  25)			::String _ext = ::haxe::io::Path_obj::extension(_path);
HXDLIN(  25)			::String _hx_switch_1 = _ext;
            			if (  (_hx_switch_1==HX_("ogg",4f,94,54,00)) ){
HXLINE(  25)				_format = 2;
HXDLIN(  25)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_1==HX_("pcm",1a,53,55,00)) ){
HXLINE(  25)				_format = 4;
HXDLIN(  25)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_1==HX_("wav",2c,a1,5a,00)) ){
HXLINE(  25)				_format = 3;
HXDLIN(  25)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  25)				_format = 0;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  27)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_is_stream,_format,_path,app)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeAudioData_obj,data_from_load,return )

 ::snow::api::Promise NativeAudioData_obj::data_from_bytes( ::snow::Snow app,::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::snow::api::buffers::ArrayBufferView,_bytes, ::Dynamic,_format,::String,_id, ::snow::Snow,app) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_47_data_from_bytes)
HXLINE(  49)			 ::snow::types::AudioData _audio = ::snow::core::native::audio::NativeAudioData_obj::data_from_bytes_direct(app,_id,_bytes,_format);
HXLINE(  51)			if (hx::IsNull( _audio )) {
HXLINE(  52)				::String _hx_tmp = ((HX_("failed to load `",c8,23,ec,54) + _id) + HX_("` from bytes as ",43,9a,da,ab));
HXDLIN(  52)				::String _hx_tmp1;
HXDLIN(  52)				if (hx::IsNull( _format )) {
HXLINE(  52)					_hx_tmp1 = (HX_("",00,00,00,00) + _format);
            				}
            				else {
HXLINE(  52)					 ::Dynamic _hx_switch_0 = _format;
            					if (  (_hx_switch_0==0) ){
HXLINE(  52)						_hx_tmp1 = HX_("af_unknown",f0,be,9a,03);
HXDLIN(  52)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==1) ){
HXLINE(  52)						_hx_tmp1 = HX_("af_custom",0b,db,9b,65);
HXDLIN(  52)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(  52)						_hx_tmp1 = HX_("af_ogg",b5,04,9d,c2);
HXDLIN(  52)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(  52)						_hx_tmp1 = HX_("af_wav",92,11,a3,c2);
HXDLIN(  52)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(  52)						_hx_tmp1 = HX_("af_pcm",80,c3,9d,c2);
HXDLIN(  52)						goto _hx_goto_4;
            					}
            					/* default */{
HXLINE(  52)						_hx_tmp1 = (HX_("",00,00,00,00) + _format);
            					}
            					_hx_goto_4:;
            				}
HXDLIN(  52)				reject(::snow::types::Error_obj::error(((_hx_tmp + _hx_tmp1) + HX_(".",2e,00,00,00))));
            			}
            			else {
HXLINE(  54)				resolve(_audio);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_42_data_from_bytes)
HXLINE(  44)		if (hx::IsNull( _id )) {
HXLINE(  44)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE(  45)		if (hx::IsNull( _bytes )) {
HXLINE(  45)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_bytes was null",d2,33,d5,32)));
            		}
HXLINE(  47)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_bytes,_format,_id,app)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeAudioData_obj,data_from_bytes,return )

 ::snow::types::AudioData NativeAudioData_obj::data_from_load_direct( ::snow::Snow app,::String _path, ::Dynamic __o__is_stream, ::Dynamic _format){
 ::Dynamic _is_stream = __o__is_stream.Default(false);
            	HX_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_64_data_from_load_direct)
HXLINE(  66)		if (hx::IsNull( _path )) {
HXLINE(  66)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_path was null",fa,86,48,96)));
            		}
HXLINE(  68)		if (hx::IsNull( _format )) {
HXLINE(  68)			::String _ext = ::haxe::io::Path_obj::extension(_path);
HXDLIN(  68)			::String _hx_switch_0 = _ext;
            			if (  (_hx_switch_0==HX_("ogg",4f,94,54,00)) ){
HXLINE(  68)				_format = 2;
HXDLIN(  68)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("pcm",1a,53,55,00)) ){
HXLINE(  68)				_format = 4;
HXDLIN(  68)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_0==HX_("wav",2c,a1,5a,00)) ){
HXLINE(  68)				_format = 3;
HXDLIN(  68)				goto _hx_goto_7;
            			}
            			/* default */{
HXLINE(  68)				_format = 0;
            			}
            			_hx_goto_7:;
            		}
HXLINE(  70)		 ::snow::types::AudioData _info;
HXDLIN(  70)		if (hx::IsNull( _format )) {
HXLINE(  70)			_info = null();
            		}
            		else {
HXLINE(  70)			 ::Dynamic _hx_switch_1 = _format;
            			if (  (_hx_switch_1==2) ){
HXLINE(  70)				_info = ::snow::core::native::audio::OGG_obj::from_file(app,_path,( (bool)(_is_stream) ));
HXDLIN(  70)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_1==3) ){
HXLINE(  70)				_info = ::snow::core::native::audio::WAV_obj::from_file(app,_path,( (bool)(_is_stream) ));
HXDLIN(  70)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_1==4) ){
HXLINE(  70)				_info = ::snow::core::native::audio::PCM_obj::from_file(app,_path,( (bool)(_is_stream) ));
HXDLIN(  70)				goto _hx_goto_8;
            			}
            			/* default */{
HXLINE(  70)				_info = null();
            			}
            			_hx_goto_8:;
            		}
HXLINE(  77)		return _info;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeAudioData_obj,data_from_load_direct,return )

 ::snow::types::AudioData NativeAudioData_obj::data_from_bytes_direct( ::snow::Snow app,::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format){
            	HX_STACKFRAME(&_hx_pos_0fcf64dd1d54d956_82_data_from_bytes_direct)
HXLINE(  84)		if (hx::IsNull( _id )) {
HXLINE(  84)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE(  85)		if (hx::IsNull( _bytes )) {
HXLINE(  85)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_bytes was null",d2,33,d5,32)));
            		}
HXLINE(  87)		if (hx::IsNull( _format )) {
HXLINE(  87)			::String _ext = ::haxe::io::Path_obj::extension(_id);
HXDLIN(  87)			::String _hx_switch_0 = _ext;
            			if (  (_hx_switch_0==HX_("ogg",4f,94,54,00)) ){
HXLINE(  87)				_format = 2;
HXDLIN(  87)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_0==HX_("pcm",1a,53,55,00)) ){
HXLINE(  87)				_format = 4;
HXDLIN(  87)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_0==HX_("wav",2c,a1,5a,00)) ){
HXLINE(  87)				_format = 3;
HXDLIN(  87)				goto _hx_goto_10;
            			}
            			/* default */{
HXLINE(  87)				_format = 0;
            			}
            			_hx_goto_10:;
            		}
HXLINE(  89)		 ::snow::types::AudioData _info;
HXDLIN(  89)		if (hx::IsNull( _format )) {
HXLINE(  89)			_info = null();
            		}
            		else {
HXLINE(  89)			 ::Dynamic _hx_switch_1 = _format;
            			if (  (_hx_switch_1==2) ){
HXLINE(  89)				_info = ::snow::core::native::audio::OGG_obj::from_bytes(app,_id,_bytes);
HXDLIN(  89)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_1==3) ){
HXLINE(  89)				_info = ::snow::core::native::audio::WAV_obj::from_bytes(app,_id,_bytes);
HXDLIN(  89)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_1==4) ){
HXLINE(  89)				_info = ::snow::core::native::audio::PCM_obj::from_bytes(app,_id,_bytes);
HXDLIN(  89)				goto _hx_goto_11;
            			}
            			/* default */{
HXLINE(  89)				_info = null();
            			}
            			_hx_goto_11:;
            		}
HXLINE(  96)		return _info;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeAudioData_obj,data_from_bytes_direct,return )


NativeAudioData_obj::NativeAudioData_obj()
{
}

bool NativeAudioData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"data_from_load") ) { outValue = data_from_load_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"data_from_bytes") ) { outValue = data_from_bytes_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"data_from_load_direct") ) { outValue = data_from_load_direct_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"data_from_bytes_direct") ) { outValue = data_from_bytes_direct_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *NativeAudioData_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NativeAudioData_obj_sStaticStorageInfo = 0;
#endif

hx::Class NativeAudioData_obj::__mClass;

static ::String NativeAudioData_obj_sStaticFields[] = {
	HX_("data_from_load",c6,1a,6f,90),
	HX_("data_from_bytes",cb,13,71,15),
	HX_("data_from_load_direct",c2,c6,ed,72),
	HX_("data_from_bytes_direct",5d,28,09,2f),
	::String(null())
};

void NativeAudioData_obj::__register()
{
	NativeAudioData_obj _hx_dummy;
	NativeAudioData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.core.native.audio.NativeAudioData",7e,1d,f4,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeAudioData_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeAudioData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< NativeAudioData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeAudioData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeAudioData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
} // end namespace native
} // end namespace audio
