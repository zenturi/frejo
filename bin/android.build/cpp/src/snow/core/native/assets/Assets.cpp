// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_ea389c7812b8afb8
#define INCLUDED_ea389c7812b8afb8
#include "linc_stb_image.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_api_buffers_TAError
#include <snow/api/buffers/TAError.h>
#endif
#ifndef INCLUDED_snow_core_native_assets_Assets
#include <snow/core/native/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Assets
#include <snow/modules/interfaces/Assets.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
#ifndef INCLUDED_snow_types_ImageData
#include <snow/types/ImageData.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ccf1deecd2900d34_15_new,"snow.core.native.assets.Assets","new",0x87934a4d,"snow.core.native.assets.Assets.new","snow/core/native/assets/Assets.hx",15,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_19_onevent,"snow.core.native.assets.Assets","onevent",0xfdbc6b08,"snow.core.native.assets.Assets.onevent","snow/core/native/assets/Assets.hx",19,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_20_shutdown,"snow.core.native.assets.Assets","shutdown",0x30aa6789,"snow.core.native.assets.Assets.shutdown","snow/core/native/assets/Assets.hx",20,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_28_image_info_from_load,"snow.core.native.assets.Assets","image_info_from_load",0xadc72d21,"snow.core.native.assets.Assets.image_info_from_load","snow/core/native/assets/Assets.hx",28,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_24_image_info_from_load,"snow.core.native.assets.Assets","image_info_from_load",0xadc72d21,"snow.core.native.assets.Assets.image_info_from_load","snow/core/native/assets/Assets.hx",24,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_44_image_info_from_load_direct,"snow.core.native.assets.Assets","image_info_from_load_direct",0x118a85c7,"snow.core.native.assets.Assets.image_info_from_load_direct","snow/core/native/assets/Assets.hx",44,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_74_image_info_from_bytes,"snow.core.native.assets.Assets","image_info_from_bytes",0xa5291110,"snow.core.native.assets.Assets.image_info_from_bytes","snow/core/native/assets/Assets.hx",74,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_69_image_info_from_bytes,"snow.core.native.assets.Assets","image_info_from_bytes",0xa5291110,"snow.core.native.assets.Assets.image_info_from_bytes","snow/core/native/assets/Assets.hx",69,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_88_image_info_from_bytes_direct,"snow.core.native.assets.Assets","image_info_from_bytes_direct",0x59938db8,"snow.core.native.assets.Assets.image_info_from_bytes_direct","snow/core/native/assets/Assets.hx",88,0x2669b743)
HX_LOCAL_STACK_FRAME(_hx_pos_ccf1deecd2900d34_114_image_info_from_pixels,"snow.core.native.assets.Assets","image_info_from_pixels",0x440076e8,"snow.core.native.assets.Assets.image_info_from_pixels","snow/core/native/assets/Assets.hx",114,0x2669b743)
namespace snow{
namespace core{
namespace native{
namespace assets{

void Assets_obj::__construct( ::snow::Snow _app){
            	HX_STACKFRAME(&_hx_pos_ccf1deecd2900d34_15_new)
HXLINE(  43)		this->load_direct_err = 0;
HXLINE(  18)		this->app = _app;
            	}

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23cbee43;
}

static ::snow::modules::interfaces::Assets_obj _hx_snow_core_native_assets_Assets__hx_snow_modules_interfaces_Assets= {
	( void (hx::Object::*)( ::snow::types::SystemEvent))&::snow::core::native::assets::Assets_obj::onevent,
	( void (hx::Object::*)())&::snow::core::native::assets::Assets_obj::shutdown,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::Dynamic))&::snow::core::native::assets::Assets_obj::image_info_from_load,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::snow::api::buffers::ArrayBufferView, ::Dynamic))&::snow::core::native::assets::Assets_obj::image_info_from_bytes,
	(  ::snow::types::ImageData (hx::Object::*)(::String,int,int, ::snow::api::buffers::ArrayBufferView, ::Dynamic))&::snow::core::native::assets::Assets_obj::image_info_from_pixels,
};

void *Assets_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf976c361: return &_hx_snow_core_native_assets_Assets__hx_snow_modules_interfaces_Assets;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Assets_obj::onevent( ::snow::types::SystemEvent event){
            	HX_STACKFRAME(&_hx_pos_ccf1deecd2900d34_19_onevent)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,onevent,(void))

void Assets_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_ccf1deecd2900d34_20_shutdown)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,shutdown,(void))

 ::snow::api::Promise Assets_obj::image_info_from_load(::String _path, ::Dynamic __o__components){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Dynamic,_components, ::snow::core::native::assets::Assets,_gthis,::String,_path) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_STACKFRAME(&_hx_pos_ccf1deecd2900d34_28_image_info_from_load)
HXLINE(  30)			 ::snow::types::ImageData _image = _gthis->image_info_from_load_direct(_path,_components);
HXLINE(  32)			if (hx::IsNull( _image )) {
HXLINE(  33)				::String reason;
HXDLIN(  33)				if ((_gthis->load_direct_err == 1)) {
HXLINE(  33)					reason = HX_("invalid file handle, file not found?",d7,6c,15,79);
            				}
            				else {
HXLINE(  33)					reason = linc::stb_image::failure_reason();
            				}
HXLINE(  34)				reject(::snow::types::Error_obj::error(((((HX_("failed to load `",c8,23,ec,54) + _path) + HX_("` as image. reason: `",f7,fa,6d,7f)) + reason) + HX_("`",60,00,00,00))));
            			}
            			else {
HXLINE(  36)				resolve(_image);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

 ::Dynamic _components = __o__components.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_ccf1deecd2900d34_24_image_info_from_load)
HXDLIN(  24)		 ::snow::core::native::assets::Assets _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  26)		if (hx::IsNull( _path )) {
HXLINE(  26)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_path was null",fa,86,48,96)));
            		}
HXLINE(  28)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_components,_gthis,_path)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,image_info_from_load,return )

 ::snow::types::ImageData Assets_obj::image_info_from_load_direct(::String _path, ::Dynamic __o__components){
 ::Dynamic _components = __o__components.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_ccf1deecd2900d34_44_image_info_from_load_direct)
HXLINE(  46)		if (hx::IsNull( _path )) {
HXLINE(  46)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_path was null",fa,86,48,96)));
            		}
HXLINE(  48)		this->load_direct_err = 0;
HXLINE(  50)		::cpp::Pointer<  SDL_RWops > _handle = this->app->io->module->file_handle(_path,HX_("rb",b0,63,00,00));
HXLINE(  51)		if (hx::IsNull( _handle )) {
HXLINE(  52)			this->load_direct_err = 1;
HXLINE(  53)			return null();
            		}
HXLINE(  56)		::cpp::Pointer<  SDL_RWops > tmp = _handle;
HXDLIN(  56)		int _size = this->app->io->module->file_size(tmp);
HXLINE(  57)		int _elements = _size;
HXDLIN(  57)		if ((_elements < 0)) {
HXLINE(  57)			_elements = 0;
            		}
HXDLIN(  57)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,4);
HXDLIN(  57)		int _bytelen = (_elements * _view->bytesPerElement);
HXDLIN(  57)		_view->byteOffset = 0;
HXDLIN(  57)		_view->byteLength = _bytelen;
HXDLIN(  57)		::Array< unsigned char > this1 = ::Array_obj< unsigned char >::__new();
HXDLIN(  57)		if ((_bytelen > 0)) {
HXLINE(  57)			this1[(_bytelen - 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  57)		_view->buffer = this1;
HXDLIN(  57)		_view->length = _elements;
HXDLIN(  57)		 ::snow::api::buffers::ArrayBufferView this2 = _view;
HXDLIN(  57)		 ::snow::api::buffers::ArrayBufferView _file = this2;
HXLINE(  59)		bool aNeg = (_size < 0);
HXDLIN(  59)		bool bNeg = (0 < 0);
HXDLIN(  59)		bool _hx_tmp;
HXDLIN(  59)		if ((aNeg != bNeg)) {
HXLINE(  59)			_hx_tmp = aNeg;
            		}
            		else {
HXLINE(  59)			_hx_tmp = (_size > 0);
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  60)			::cpp::Pointer<  SDL_RWops > tmp1 = _handle;
HXDLIN(  60)			this->app->io->module->file_read(tmp1,_file,_size,1);
            		}
HXLINE(  63)		::cpp::Pointer<  SDL_RWops > tmp2 = _handle;
HXDLIN(  63)		this->app->io->module->file_close(tmp2);
HXLINE(  65)		return this->image_info_from_bytes_direct(_path,_file,_components);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,image_info_from_load_direct,return )

 ::snow::api::Promise Assets_obj::image_info_from_bytes(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic __o__components){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::Dynamic,_components, ::snow::core::native::assets::Assets,_gthis, ::snow::api::buffers::ArrayBufferView,_bytes,::String,_id) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_STACKFRAME(&_hx_pos_ccf1deecd2900d34_74_image_info_from_bytes)
HXLINE(  76)			 ::snow::types::ImageData _image = _gthis->image_info_from_bytes_direct(_id,_bytes,_components);
HXLINE(  78)			if (hx::IsNull( _image )) {
HXLINE(  79)				::String _hx_tmp = ((HX_("failed to load `",c8,23,ec,54) + _id) + HX_("` from bytes. reason: `",6f,c4,31,f4));
HXDLIN(  79)				reject(::snow::types::Error_obj::error(((_hx_tmp + linc::stb_image::failure_reason()) + HX_("`",60,00,00,00))));
            			}
            			else {
HXLINE(  81)				resolve(_image);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

 ::Dynamic _components = __o__components.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_ccf1deecd2900d34_69_image_info_from_bytes)
HXDLIN(  69)		 ::snow::core::native::assets::Assets _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  71)		if (hx::IsNull( _id )) {
HXLINE(  71)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE(  72)		if (hx::IsNull( _bytes )) {
HXLINE(  72)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_bytes was null",d2,33,d5,32)));
            		}
HXLINE(  74)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_components,_gthis,_bytes,_id)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,image_info_from_bytes,return )

 ::snow::types::ImageData Assets_obj::image_info_from_bytes_direct(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic __o__components){
 ::Dynamic _components = __o__components.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_ccf1deecd2900d34_88_image_info_from_bytes_direct)
HXLINE(  90)		if (hx::IsNull( _id )) {
HXLINE(  90)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE(  91)		if (hx::IsNull( _bytes )) {
HXLINE(  91)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_bytes was null",d2,33,d5,32)));
            		}
HXLINE(  93)		 ::Dynamic _info = linc::stb_image::load_from_memory(_bytes->buffer,_bytes->length,_components);
HXLINE(  95)		if (hx::IsNull( _info )) {
HXLINE(  96)			return null();
            		}
HXLINE( 101)		 ::snow::Snow _hx_tmp = this->app;
HXLINE( 103)		int _info1 = ( (int)(_info->__Field(HX_("req_comp",d0,46,98,03),hx::paccDynamic)) );
HXLINE( 104)		int _info2 = ( (int)(_info->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXLINE( 105)		int _info3 = ( (int)(_info->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXLINE( 106)		int _info4 = ( (int)(_info->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXLINE( 107)		int _info5 = ( (int)(_info->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXLINE( 108)		int _info6 = ( (int)(_info->__Field(HX_("comp",0f,b9,c4,41),hx::paccDynamic)) );
HXLINE( 109)		::Array< unsigned char > _buffer = ( (::Array< unsigned char >)(_info->__Field(HX_("bytes",6b,08,98,bd),hx::paccDynamic)) );
HXDLIN( 109)		int _byteLength = ( (::Array< unsigned char >)(_info->__Field(HX_("bytes",6b,08,98,bd),hx::paccDynamic)) )->length;
HXDLIN( 109)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,4);
HXDLIN( 109)		int _bytes_per_elem = _view->bytesPerElement;
HXDLIN( 109)		if ((hx::Mod(0,_bytes_per_elem) != 0)) {
HXLINE( 109)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            		}
HXDLIN( 109)		int _src_bytelen = _buffer->length;
HXDLIN( 109)		int _new_range = _byteLength;
HXDLIN( 109)		if ((_new_range > _src_bytelen)) {
HXLINE( 109)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            		}
HXDLIN( 109)		_view->buffer = _buffer;
HXDLIN( 109)		_view->byteOffset = 0;
HXDLIN( 109)		_view->byteLength = _byteLength;
HXDLIN( 109)		_view->length = ::Std_obj::_hx_int((( (Float)(_byteLength) ) / ( (Float)(_bytes_per_elem) )));
HXLINE( 101)		return  ::snow::types::ImageData_obj::__alloc( HX_CTX ,_hx_tmp, ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("pixels",2d,ef,a9,8c),_view)
            			->setFixed(1,HX_("bpp_source",d8,83,da,8c),_info6)
            			->setFixed(2,HX_("height_actual",26,2f,9e,a1),_info5)
            			->setFixed(3,HX_("width",06,b6,62,ca),_info2)
            			->setFixed(4,HX_("width_actual",e7,12,f5,de),_info4)
            			->setFixed(5,HX_("id",db,5b,00,00),_id)
            			->setFixed(6,HX_("bpp",e2,be,4a,00),_info1)
            			->setFixed(7,HX_("height",e7,07,4c,02),_info3)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,image_info_from_bytes_direct,return )

 ::snow::types::ImageData Assets_obj::image_info_from_pixels(::String _id,int _width,int _height, ::snow::api::buffers::ArrayBufferView _pixels, ::Dynamic __o__bpp){
 ::Dynamic _bpp = __o__bpp.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_ccf1deecd2900d34_114_image_info_from_pixels)
HXLINE( 116)		if (hx::IsNull( _id )) {
HXLINE( 116)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 117)		if (hx::IsNull( _pixels )) {
HXLINE( 117)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_pixels was null",b2,5e,44,bb)));
            		}
HXLINE( 119)		return  ::snow::types::ImageData_obj::__alloc( HX_CTX ,this->app, ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("pixels",2d,ef,a9,8c),_pixels)
            			->setFixed(1,HX_("bpp_source",d8,83,da,8c),_bpp)
            			->setFixed(2,HX_("height_actual",26,2f,9e,a1),_height)
            			->setFixed(3,HX_("width",06,b6,62,ca),_width)
            			->setFixed(4,HX_("width_actual",e7,12,f5,de),_width)
            			->setFixed(5,HX_("id",db,5b,00,00),_id)
            			->setFixed(6,HX_("bpp",e2,be,4a,00),_bpp)
            			->setFixed(7,HX_("height",e7,07,4c,02),_height)));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Assets_obj,image_info_from_pixels,return )


hx::ObjectPtr< Assets_obj > Assets_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Assets_obj > __this = new Assets_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Assets_obj > Assets_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Assets_obj *__this = (Assets_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Assets_obj), true, "snow.core.native.assets.Assets"));
	*(void **)__this = Assets_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Assets_obj::Assets_obj()
{
}

void Assets_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Assets);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(load_direct_err,"load_direct_err");
	HX_MARK_END_CLASS();
}

void Assets_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(load_direct_err,"load_direct_err");
}

hx::Val Assets_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"load_direct_err") ) { return hx::Val( load_direct_err ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"image_info_from_load") ) { return hx::Val( image_info_from_load_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"image_info_from_bytes") ) { return hx::Val( image_info_from_bytes_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"image_info_from_pixels") ) { return hx::Val( image_info_from_pixels_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"image_info_from_load_direct") ) { return hx::Val( image_info_from_load_direct_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"image_info_from_bytes_direct") ) { return hx::Val( image_info_from_bytes_direct_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Assets_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"load_direct_err") ) { load_direct_err=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Assets_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("load_direct_err",c8,98,00,54));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Assets_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Assets_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsInt,(int)offsetof(Assets_obj,load_direct_err),HX_("load_direct_err",c8,98,00,54)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Assets_obj_sStaticStorageInfo = 0;
#endif

static ::String Assets_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("onevent",9b,f6,d4,78),
	HX_("shutdown",96,fc,0b,6b),
	HX_("image_info_from_load",ae,a1,7a,09),
	HX_("load_direct_err",c8,98,00,54),
	HX_("image_info_from_load_direct",da,6c,b6,3e),
	HX_("image_info_from_bytes",e3,97,7b,86),
	HX_("image_info_from_bytes_direct",45,d7,d1,b2),
	HX_("image_info_from_pixels",b5,e8,e3,8a),
	::String(null()) };

hx::Class Assets_obj::__mClass;

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.core.native.assets.Assets",db,1f,9b,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Assets_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
} // end namespace native
} // end namespace assets
