// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_9484b18fc186cc5e
#define INCLUDED_9484b18fc186cc5e
#include "linc_opengl.h"
#endif
#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_sdl__SDL_SDL_helper
#include <sdl/_SDL/SDL_helper.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif
#ifndef INCLUDED_snow_systems_input_Input
#include <snow/systems/input/Input.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_14dae8750fecc33e_17_new,"snow.modules.sdl.Runtime","new",0xeed49065,"snow.modules.sdl.Runtime.new","snow/modules/sdl/Runtime.hx",17,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_96_ready,"snow.modules.sdl.Runtime","ready",0x06ef2ba8,"snow.modules.sdl.Runtime.ready","snow/modules/sdl/Runtime.hx",96,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_106_run,"snow.modules.sdl.Runtime","run",0xeed7a750,"snow.modules.sdl.Runtime.run","snow/modules/sdl/Runtime.hx",106,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_112_shutdown,"snow.modules.sdl.Runtime","shutdown",0x719c0a71,"snow.modules.sdl.Runtime.shutdown","snow/modules/sdl/Runtime.hx",112,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_121_window_grab,"snow.modules.sdl.Runtime","window_grab",0xf119dec0,"snow.modules.sdl.Runtime.window_grab","snow/modules/sdl/Runtime.hx",121,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_131_window_swap,"snow.modules.sdl.Runtime","window_swap",0xf90c3987,"snow.modules.sdl.Runtime.window_swap","snow/modules/sdl/Runtime.hx",131,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_135_window_fullscreen,"snow.modules.sdl.Runtime","window_fullscreen",0x2bd5f82f,"snow.modules.sdl.Runtime.window_fullscreen","snow/modules/sdl/Runtime.hx",135,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_147_window_width,"snow.modules.sdl.Runtime","window_width",0x3601bc92,"snow.modules.sdl.Runtime.window_width","snow/modules/sdl/Runtime.hx",147,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_148_window_height,"snow.modules.sdl.Runtime","window_height",0xc1d2bbdb,"snow.modules.sdl.Runtime.window_height","snow/modules/sdl/Runtime.hx",148,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_152_window_device_pixel_ratio,"snow.modules.sdl.Runtime","window_device_pixel_ratio",0x1967d0dd,"snow.modules.sdl.Runtime.window_device_pixel_ratio","snow/modules/sdl/Runtime.hx",152,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_173_run_loop,"snow.modules.sdl.Runtime","run_loop",0x766098f3,"snow.modules.sdl.Runtime.run_loop","snow/modules/sdl/Runtime.hx",173,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_199_loop,"snow.modules.sdl.Runtime","loop",0x09deeabf,"snow.modules.sdl.Runtime.loop","snow/modules/sdl/Runtime.hx",199,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_225_event_watch,"snow.modules.sdl.Runtime","event_watch",0x7bbd022f,"snow.modules.sdl.Runtime.event_watch","snow/modules/sdl/Runtime.hx",225,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_254_handle_window_ev,"snow.modules.sdl.Runtime","handle_window_ev",0x985ef2e4,"snow.modules.sdl.Runtime.handle_window_ev","snow/modules/sdl/Runtime.hx",254,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_311_to_pixels,"snow.modules.sdl.Runtime","to_pixels",0x14e02276,"snow.modules.sdl.Runtime.to_pixels","snow/modules/sdl/Runtime.hx",311,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_314_create_window,"snow.modules.sdl.Runtime","create_window",0x3f3e2e58,"snow.modules.sdl.Runtime.create_window","snow/modules/sdl/Runtime.hx",314,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_362_create_render_context,"snow.modules.sdl.Runtime","create_render_context",0x5e43e32e,"snow.modules.sdl.Runtime.create_render_context","snow/modules/sdl/Runtime.hx",362,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_374_post_render_context,"snow.modules.sdl.Runtime","post_render_context",0xd5e12b0a,"snow.modules.sdl.Runtime.post_render_context","snow/modules/sdl/Runtime.hx",374,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_405_apply_GL_attr,"snow.modules.sdl.Runtime","apply_GL_attr",0xe29f69ff,"snow.modules.sdl.Runtime.apply_GL_attr","snow/modules/sdl/Runtime.hx",405,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_461_window_flags,"snow.modules.sdl.Runtime","window_flags",0x6e2b31d3,"snow.modules.sdl.Runtime.window_flags","snow/modules/sdl/Runtime.hx",461,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_485_update_window_config,"snow.modules.sdl.Runtime","update_window_config",0x4b39b0d6,"snow.modules.sdl.Runtime.update_window_config","snow/modules/sdl/Runtime.hx",485,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_510_update_render_config,"snow.modules.sdl.Runtime","update_render_config",0x8c0f3230,"snow.modules.sdl.Runtime.update_render_config","snow/modules/sdl/Runtime.hx",510,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_545_handle_input_ev,"snow.modules.sdl.Runtime","handle_input_ev",0xa44b3f02,"snow.modules.sdl.Runtime.handle_input_ev","snow/modules/sdl/Runtime.hx",545,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_780_to_key_mod,"snow.modules.sdl.Runtime","to_key_mod",0x55554d79,"snow.modules.sdl.Runtime.to_key_mod","snow/modules/sdl/Runtime.hx",780,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_169_timestamp,"snow.modules.sdl.Runtime","timestamp",0x5d4ae69b,"snow.modules.sdl.Runtime.timestamp","snow/modules/sdl/Runtime.hx",169,0x0c37166e)
HX_LOCAL_STACK_FRAME(_hx_pos_14dae8750fecc33e_166_boot,"snow.modules.sdl.Runtime","boot",0x0342c88d,"snow.modules.sdl.Runtime.boot","snow/modules/sdl/Runtime.hx",166,0x0c37166e)
namespace snow{
namespace modules{
namespace sdl{

void Runtime_obj::__construct( ::snow::Snow _app){
            	HX_GC_STACKFRAME(&_hx_pos_14dae8750fecc33e_17_new)
HXLINE( 308)		this->window_h = 0;
HXLINE( 307)		this->window_w = 0;
HXLINE( 151)		this->window_dpr = ((Float)1.0);
HXLINE( 150)		this->_size =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("h",68,00,00,00),0)
            			->setFixed(1,HX_("w",77,00,00,00),0));
HXLINE(  24)		this->auto_swap = true;
HXLINE(  32)		super::__construct(_app);
HXLINE(  33)		::snow::modules::sdl::Runtime_obj::timestamp_start = linc::timestamp::now();
HXLINE(  34)		this->name = HX_("sdl",bb,9a,57,00);
HXLINE(  36)		this->app->config->__SetField(HX_("runtime",d8,b4,60,ef), ::Dynamic(hx::Anon_obj::Create(0)),hx::paccDynamic);
HXLINE(  38)		this->gamepads =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  39)		this->joysticks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  41)		int status = SDL_Init(1);
HXLINE(  42)		if ((status != 0)) {
HXLINE(  43)			HX_STACK_DO_THROW(::snow::types::Error_obj::init(((HX_("runtime / sdl / failed to init / `",b0,d2,4f,f2) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00))));
            		}
HXLINE(  48)		int status1 = SDL_InitSubSystem(32);
HXLINE(  49)		if ((status1 != 0)) {
HXLINE(  50)			HX_STACK_DO_THROW(::snow::types::Error_obj::init(((HX_("runtime / sdl / failed to init video / `",4b,eb,37,21) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00))));
            		}
HXLINE(  58)		status1 = SDL_InitSubSystem(8192);
HXLINE(  59)		if ((status1 == -1)) {
HXLINE(  60)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  60)			::String _hx_tmp1 = (HX_("  i / runtime / ",c1,d9,78,ba) + ((HX_("sdl / Could not initialize controller : `",e4,e7,9f,97) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00)));
HXDLIN(  60)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("snow/modules/sdl/Runtime.hx",6e,16,37,0c),60,HX_("snow.modules.sdl.Runtime",f3,79,09,b1),HX_("new",60,d0,53,00)));
            		}
HXLINE(  67)		status1 = SDL_InitSubSystem(512);
HXLINE(  68)		if ((status1 == -1)) {
HXLINE(  69)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  69)			::String _hx_tmp3 = (HX_("  i / runtime / ",c1,d9,78,ba) + ((HX_("sdl / Could not initialize joystick : `",84,a8,b7,ee) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00)));
HXDLIN(  69)			_hx_tmp2(_hx_tmp3,hx::SourceInfo(HX_("snow/modules/sdl/Runtime.hx",6e,16,37,0c),69,HX_("snow.modules.sdl.Runtime",f3,79,09,b1),HX_("new",60,d0,53,00)));
            		}
HXLINE(  76)		status1 = SDL_InitSubSystem(4096);
HXLINE(  77)		if ((status1 == -1)) {
HXLINE(  78)			 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN(  78)			::String _hx_tmp5 = (HX_("  i / runtime / ",c1,d9,78,ba) + ((HX_("sdl / Could not initialize haptic : `",1f,0c,d5,97) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00)));
HXDLIN(  78)			_hx_tmp4(_hx_tmp5,hx::SourceInfo(HX_("snow/modules/sdl/Runtime.hx",6e,16,37,0c),78,HX_("snow.modules.sdl.Runtime",f3,79,09,b1),HX_("new",60,d0,53,00)));
            		}
HXLINE(  87)		::sdl::_SDL::SDL_helper_obj::add_event_watch(this->event_watch_dyn(),null());
            	}

Dynamic Runtime_obj::__CreateEmpty() { return new Runtime_obj; }

void *Runtime_obj::_hx_vtable = 0;

Dynamic Runtime_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Runtime_obj > _hx_result = new Runtime_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Runtime_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x584d5d9f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x584d5d9f;
	} else {
		return inClassId==(int)0x68031e41;
	}
}

void Runtime_obj::ready(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_96_ready)
HXDLIN(  96)		this->create_window();
            	}


bool Runtime_obj::run(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_106_run)
HXDLIN( 106)		return this->run_loop();
            	}


void Runtime_obj::shutdown( ::Dynamic __o__immediate){
 ::Dynamic _immediate = __o__immediate.Default(false);
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_112_shutdown)
HXDLIN( 112)		if (!(( (bool)(_immediate) ))) {
HXLINE( 113)			::sdl::_SDL::SDL_helper_obj::quit();
HXDLIN( 113)			SDL_Quit();
            		}
            	}


bool Runtime_obj::window_grab(bool enable){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_121_window_grab)
HXLINE( 123)		int _enable;
HXDLIN( 123)		if (enable) {
HXLINE( 123)			_enable = 1;
            		}
            		else {
HXLINE( 123)			_enable = 0;
            		}
HXDLIN( 123)		int res = SDL_SetRelativeMouseMode((SDL_bool)_enable);
HXLINE( 125)		return (res == 0);
            	}


void Runtime_obj::window_swap(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_131_window_swap)
HXDLIN( 131)		::cpp::Pointer<  SDL_Window > tmp = this->window;
HXDLIN( 131)		SDL_GL_SwapWindow(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Runtime_obj,window_swap,(void))

bool Runtime_obj::window_fullscreen(bool enable, ::Dynamic __o_true_fullscreen){
 ::Dynamic true_fullscreen = __o_true_fullscreen.Default(false);
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_135_window_fullscreen)
HXLINE( 137)		int flag;
HXDLIN( 137)		if (enable) {
HXLINE( 137)			flag = 4097;
            		}
            		else {
HXLINE( 137)			flag = 0;
            		}
HXLINE( 139)		bool _hx_tmp;
HXDLIN( 139)		if (( (bool)(true_fullscreen) )) {
HXLINE( 139)			_hx_tmp = enable;
            		}
            		else {
HXLINE( 139)			_hx_tmp = false;
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 140)			flag = (flag | 1);
            		}
HXLINE( 143)		::cpp::Pointer<  SDL_Window > tmp = this->window;
HXDLIN( 143)		return (SDL_SetWindowFullscreen(tmp,flag) == 0);
            	}


int Runtime_obj::window_width(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_147_window_width)
HXDLIN( 147)		return this->window_w;
            	}


int Runtime_obj::window_height(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_148_window_height)
HXDLIN( 148)		return this->window_h;
            	}


Float Runtime_obj::window_device_pixel_ratio(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_152_window_device_pixel_ratio)
HXLINE( 154)		::cpp::Pointer<  SDL_Window > tmp = this->window;
HXDLIN( 154)		this->_size = linc::sdl::GL_GetDrawableSize(tmp,this->_size);
HXLINE( 155)		int _pixel_height = ( (int)(this->_size->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXLINE( 157)		::cpp::Pointer<  SDL_Window > tmp1 = this->window;
HXDLIN( 157)		this->_size = linc::sdl::getWindowSize(tmp1,this->_size);
HXLINE( 158)		int _device_height = ( (int)(this->_size->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXLINE( 160)		return (( (Float)(_pixel_height) ) / ( (Float)(_device_height) ));
            	}


bool Runtime_obj::run_loop(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_173_run_loop)
HXLINE( 175)		bool _done = true;
HXLINE( 187)		while(!(this->app->shutting_down)){
HXLINE( 189)			this->loop(0);
            		}
HXLINE( 195)		return _done;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Runtime_obj,run_loop,return )

void Runtime_obj::loop(int _){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_199_loop)
HXLINE( 201)		while(true){
HXLINE( 201)			SDL_PumpEvents();
HXDLIN( 201)			if (!(SDL_HasEvents(0,65535))) {
HXLINE( 201)				goto _hx_goto_12;
            			}
HXLINE( 203)			 cpp::Struct<SDL_Event> e = linc::sdl::pollEvent();
HXLINE( 205)			this->handle_input_ev(e);
HXLINE( 206)			this->handle_window_ev(e);
HXLINE( 208)			if ((e->type == 256)) {
HXLINE( 209)				this->app->dispatch_event(10);
            			}
            		}
            		_hx_goto_12:;
HXLINE( 214)		this->app->dispatch_event(3);
HXLINE( 216)		bool _hx_tmp;
HXDLIN( 216)		if (this->auto_swap) {
HXLINE( 216)			_hx_tmp = !(this->app->has_shutdown);
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 217)			this->window_swap();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,loop,(void))

int Runtime_obj::event_watch( ::Dynamic _, cpp::Struct<SDL_Event> e){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_225_event_watch)
HXLINE( 227)		int _type = 0;
HXLINE( 229)		{
HXLINE( 229)			int _g = e->type;
HXDLIN( 229)			switch((int)(_g)){
            				case (int)257: {
HXLINE( 231)					_type = 11;
            				}
            				break;
            				case (int)258: {
HXLINE( 233)					_type = 12;
            				}
            				break;
            				case (int)259: {
HXLINE( 235)					_type = 13;
            				}
            				break;
            				case (int)260: {
HXLINE( 237)					_type = 14;
            				}
            				break;
            				case (int)261: {
HXLINE( 239)					_type = 15;
            				}
            				break;
            				case (int)262: {
HXLINE( 241)					_type = 16;
            				}
            				break;
            				default:{
HXLINE( 243)					return 0;
            				}
            			}
            		}
HXLINE( 246)		this->app->dispatch_event(_type);
HXLINE( 248)		return 1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Runtime_obj,event_watch,return )

void Runtime_obj::handle_window_ev( cpp::Struct<SDL_Event> e){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_254_handle_window_ev)
HXLINE( 256)		int _data1 = e->window.data1;
HXLINE( 257)		int _data2 = e->window.data2;
HXLINE( 259)		if ((e->type == 512)) {
HXLINE( 260)			int _type = 0;
HXLINE( 261)			{
HXLINE( 261)				int _g = e->window.event;
HXDLIN( 261)				switch((int)(_g)){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE( 263)						_type = 1;
            					}
            					break;
            					case (int)2: {
HXLINE( 265)						_type = 2;
            					}
            					break;
            					case (int)3: {
HXLINE( 267)						_type = 3;
            					}
            					break;
            					case (int)4: {
HXLINE( 269)						_type = 4;
            					}
            					break;
            					case (int)5: {
HXLINE( 287)						_type = 5;
HXLINE( 288)						this->window_dpr = this->window_device_pixel_ratio();
HXLINE( 289)						_data1 = ::Math_obj::floor((this->window_dpr * _data1));
HXDLIN( 289)						this->window_w = _data1;
HXLINE( 290)						_data2 = ::Math_obj::floor((this->window_dpr * _data2));
HXDLIN( 290)						this->window_h = _data2;
            					}
            					break;
            					case (int)6: {
HXLINE( 292)						_type = 6;
HXLINE( 293)						this->window_dpr = this->window_device_pixel_ratio();
HXLINE( 294)						_data1 = ::Math_obj::floor((this->window_dpr * _data1));
HXDLIN( 294)						this->window_w = _data1;
HXLINE( 295)						_data2 = ::Math_obj::floor((this->window_dpr * _data2));
HXDLIN( 295)						this->window_h = _data2;
            					}
            					break;
            					case (int)7: {
HXLINE( 271)						_type = 7;
            					}
            					break;
            					case (int)8: {
HXLINE( 273)						_type = 8;
            					}
            					break;
            					case (int)9: {
HXLINE( 275)						_type = 9;
            					}
            					break;
            					case (int)10: {
HXLINE( 277)						_type = 10;
            					}
            					break;
            					case (int)11: {
HXLINE( 279)						_type = 11;
            					}
            					break;
            					case (int)12: {
HXLINE( 281)						_type = 12;
            					}
            					break;
            					case (int)13: {
HXLINE( 283)						_type = 13;
            					}
            					break;
            					case (int)14: {
HXLINE( 285)						_type = 14;
            					}
            					break;
            				}
            			}
HXLINE( 300)			if ((_type != 0)) {
HXLINE( 301)				 ::snow::Snow _hx_tmp = this->app;
HXDLIN( 301)				_hx_tmp->dispatch_window_event(_type,(e->window.timestamp / ((Float)1000.0)),e->window.windowID,_data1,_data2);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,handle_window_ev,(void))

int Runtime_obj::to_pixels(Float _value){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_311_to_pixels)
HXDLIN( 311)		return ::Math_obj::floor((this->window_dpr * _value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,to_pixels,return )

void Runtime_obj::create_window(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_314_create_window)
HXLINE( 318)		 ::Dynamic config = this->app->config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic);
HXLINE( 320)		this->apply_GL_attr(this->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic));
HXLINE( 322)		this->window_w = ( (int)(config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXLINE( 323)		this->window_h = ( (int)(config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 326)		int status = SDL_InitSubSystem(32);
HXLINE( 327)		if ((status != 0)) {
HXLINE( 328)			HX_STACK_DO_THROW(::snow::types::Error_obj::init(((HX_("runtime / sdl / failed to init video / `",4b,eb,37,21) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00))));
            		}
HXLINE( 334)		::String config1 = ( (::String)(config->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)) );
HXDLIN( 334)		 ::Dynamic config2 = config->__Field(HX_("x",78,00,00,00),hx::paccDynamic);
HXDLIN( 334)		 ::Dynamic config3 = config->__Field(HX_("y",79,00,00,00),hx::paccDynamic);
HXDLIN( 334)		 ::Dynamic config4 = config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXDLIN( 334)		 ::Dynamic config5 = config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
HXDLIN( 334)		this->window = SDL_CreateWindow(config1,( (int)(config2) ),( (int)(config3) ),( (int)(config4) ),( (int)(config5) ),this->window_flags(config));
HXLINE( 336)		if (hx::IsNull( this->window )) {
HXLINE( 337)			HX_STACK_DO_THROW(::snow::types::Error_obj::error(((HX_("runtime / sdl / failed to create platform window, unable to recover / `",fd,c1,6d,8d) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00))));
            		}
HXLINE( 340)		::cpp::Pointer<  SDL_Window > tmp = this->window;
HXDLIN( 340)		int _id = SDL_GetWindowID(tmp);
HXLINE( 345)		::cpp::Pointer<  SDL_Window > tmp1 = this->window;
HXDLIN( 345)		if (!(this->create_render_context(tmp1))) {
HXLINE( 346)			HX_STACK_DO_THROW(::snow::types::Error_obj::error(((HX_("runtime / sdl / failed to create render context, unable to recover / `",0f,76,67,e8) + ( (::String)(SDL_GetError()) )) + HX_("`",60,00,00,00))));
            		}
HXLINE( 349)		::cpp::Pointer<  SDL_Window > tmp2 = this->window;
HXDLIN( 349)		this->post_render_context(tmp2);
HXLINE( 354)		 ::Dynamic config6 = config->__Field(HX_("borderless",45,46,71,17),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config7 = config->__Field(HX_("fullscreen",3b,3a,b4,f9),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config8 = config->__Field(HX_("true_fullscreen",cc,26,f1,d0),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config9 = config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config10 = config->__Field(HX_("no_input",4c,92,80,55),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config11 = config->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic config12 = config->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic);
HXDLIN( 354)		 ::Dynamic actual_config =  ::Dynamic(hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("resizable",6b,37,50,a9),config12)
            			->setFixed(1,HX_("width",06,b6,62,ca), ::Dynamic(config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)))
            			->setFixed(2,HX_("true_fullscreen",cc,26,f1,d0),config8)
            			->setFixed(3,HX_("fullscreen",3b,3a,b4,f9),config7)
            			->setFixed(4,HX_("x",78,00,00,00), ::Dynamic(config->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(5,HX_("y",79,00,00,00), ::Dynamic(config->__Field(HX_("y",79,00,00,00),hx::paccDynamic)))
            			->setFixed(6,HX_("height",e7,07,4c,02),config9)
            			->setFixed(7,HX_("title",98,15,3b,10),(HX_("",00,00,00,00) + config->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)))
            			->setFixed(8,HX_("background_sleep",c6,3e,ae,10),config11)
            			->setFixed(9,HX_("borderless",45,46,71,17),config6)
            			->setFixed(10,HX_("no_input",4c,92,80,55),config10));
HXLINE( 355)		 ::Dynamic _config = this->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic);
HXDLIN( 355)		 ::Dynamic actual_render =  ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("stencil",fc,bd,03,80), ::Dynamic(_config->__Field(HX_("stencil",fc,bd,03,80),hx::paccDynamic)))
            			->setFixed(1,HX_("alpha_bits",c7,fa,9f,81), ::Dynamic(_config->__Field(HX_("alpha_bits",c7,fa,9f,81),hx::paccDynamic)))
            			->setFixed(2,HX_("red_bits",f4,d7,46,d0), ::Dynamic(_config->__Field(HX_("red_bits",f4,d7,46,d0),hx::paccDynamic)))
            			->setFixed(3,HX_("depth",03,f1,29,d7), ::Dynamic(_config->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)))
            			->setFixed(4,HX_("default_clear",4f,18,27,0a), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("a",61,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("a",61,00,00,00),hx::paccDynamic)))
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)))
            				->setFixed(2,HX_("g",67,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("g",67,00,00,00),hx::paccDynamic)))
            				->setFixed(3,HX_("r",72,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("r",72,00,00,00),hx::paccDynamic)))))
            			->setFixed(5,HX_("opengl",6f,64,94,21), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("profile",29,49,49,f3), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("profile",29,49,49,f3),hx::paccDynamic)))
            				->setFixed(1,HX_("major",39,bd,1b,03), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("major",39,bd,1b,03),hx::paccDynamic)))
            				->setFixed(2,HX_("minor",35,7b,68,08), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("minor",35,7b,68,08),hx::paccDynamic)))))
            			->setFixed(6,HX_("green_bits",42,a5,bf,35), ::Dynamic(_config->__Field(HX_("green_bits",42,a5,bf,35),hx::paccDynamic)))
            			->setFixed(7,HX_("blue_bits",0b,26,35,39), ::Dynamic(_config->__Field(HX_("blue_bits",0b,26,35,39),hx::paccDynamic)))
            			->setFixed(8,HX_("antialiasing",f4,16,b3,48), ::Dynamic(_config->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic))));
HXLINE( 357)		::cpp::Pointer<  SDL_Window > tmp3 = this->window;
HXDLIN( 357)		actual_config = this->update_window_config(tmp3,actual_config);
HXLINE( 358)		::cpp::Pointer<  SDL_Window > tmp4 = this->window;
HXDLIN( 358)		actual_render = this->update_render_config(tmp4,actual_render);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Runtime_obj,create_window,(void))

bool Runtime_obj::create_render_context(::cpp::Pointer<  SDL_Window > _window){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_362_create_render_context)
HXLINE( 364)		::cpp::Pointer<  SDL_Window > tmp = _window;
HXDLIN( 364)		this->gl = SDL_GL_CreateContext(tmp);
HXLINE( 366)		bool _success = (hx::IsEq( this->gl,0 ) == false);
HXLINE( 370)		return _success;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,create_render_context,return )

void Runtime_obj::post_render_context(::cpp::Pointer<  SDL_Window > _window){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_374_post_render_context)
HXLINE( 376)		::cpp::Pointer<  SDL_Window > tmp = _window;
HXDLIN( 376)		SDL_GL_MakeCurrent(tmp,this->gl);
HXLINE( 390)		 ::Dynamic color =  ::Dynamic(this->app->config->__Field(HX_("render",56,6b,29,05),hx::paccDynamic))->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic);
HXLINE( 392)		glClearDepthf(((Float)1.0));
HXLINE( 393)		glClearStencil(0);
HXLINE( 394)		glClearColor(( (float)(color->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) ),( (float)(color->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) ),( (float)(color->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ),( (float)(color->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) ));
HXLINE( 395)		glClear(17664);
HXLINE( 396)		this->window_swap();
HXLINE( 397)		glClear(17664);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,post_render_context,(void))

void Runtime_obj::apply_GL_attr( ::Dynamic render){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_405_apply_GL_attr)
HXLINE( 409)		{
HXLINE( 409)			int value = ( (int)(render->__Field(HX_("red_bits",f4,d7,46,d0),hx::paccDynamic)) );
HXDLIN( 409)			SDL_GL_SetAttribute((SDL_GLattr)0, value);
            		}
HXLINE( 410)		{
HXLINE( 410)			int value1 = ( (int)(render->__Field(HX_("green_bits",42,a5,bf,35),hx::paccDynamic)) );
HXDLIN( 410)			SDL_GL_SetAttribute((SDL_GLattr)1, value1);
            		}
HXLINE( 411)		{
HXLINE( 411)			int value2 = ( (int)(render->__Field(HX_("blue_bits",0b,26,35,39),hx::paccDynamic)) );
HXDLIN( 411)			SDL_GL_SetAttribute((SDL_GLattr)2, value2);
            		}
HXLINE( 412)		{
HXLINE( 412)			int value3 = ( (int)(render->__Field(HX_("alpha_bits",c7,fa,9f,81),hx::paccDynamic)) );
HXDLIN( 412)			SDL_GL_SetAttribute((SDL_GLattr)3, value3);
            		}
HXLINE( 413)		SDL_GL_SetAttribute((SDL_GLattr)5, 1);
HXLINE( 415)		if (hx::IsGreater( render->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic),0 )) {
HXLINE( 417)			int value4 = ( (int)(render->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) );
HXDLIN( 417)			SDL_GL_SetAttribute((SDL_GLattr)6, value4);
            		}
HXLINE( 420)		if (hx::IsGreater( render->__Field(HX_("stencil",fc,bd,03,80),hx::paccDynamic),0 )) {
HXLINE( 422)			int value5 = ( (int)(render->__Field(HX_("stencil",fc,bd,03,80),hx::paccDynamic)) );
HXDLIN( 422)			SDL_GL_SetAttribute((SDL_GLattr)7, value5);
            		}
HXLINE( 425)		if (hx::IsGreater( render->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic),0 )) {
HXLINE( 427)			SDL_GL_SetAttribute((SDL_GLattr)13, 1);
HXLINE( 428)			{
HXLINE( 428)				int value6 = ( (int)(render->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic)) );
HXDLIN( 428)				SDL_GL_SetAttribute((SDL_GLattr)14, value6);
            			}
            		}
HXLINE( 433)		{
HXLINE( 433)			 ::Dynamic _g =  ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("profile",29,49,49,f3),hx::paccDynamic);
HXDLIN( 433)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==0) ){
HXLINE( 436)				SDL_GL_SetAttribute((SDL_GLattr)21, 2);
HXDLIN( 436)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_0==1) ){
HXLINE( 439)				SDL_GL_SetAttribute((SDL_GLattr)15, 1);
HXLINE( 440)				SDL_GL_SetAttribute((SDL_GLattr)21, 1);
HXLINE( 438)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_0==2) ){
HXLINE( 443)				SDL_GL_SetAttribute((SDL_GLattr)15, 1);
HXLINE( 444)				SDL_GL_SetAttribute((SDL_GLattr)21, 4);
HXLINE( 446)				if (hx::IsEq(  ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("major",39,bd,1b,03),hx::paccDynamic),0 )) {
HXLINE( 447)					 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("major",39,bd,1b,03),2,hx::paccDynamic);
HXLINE( 448)					 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("minor",35,7b,68,08),0,hx::paccDynamic);
            				}
HXLINE( 442)				goto _hx_goto_20;
            			}
            			_hx_goto_20:;
            		}
HXLINE( 453)		if (hx::IsNotEq(  ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("major",39,bd,1b,03),hx::paccDynamic),0 )) {
HXLINE( 455)			{
HXLINE( 455)				int value7 = ( (int)( ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("major",39,bd,1b,03),hx::paccDynamic)) );
HXDLIN( 455)				SDL_GL_SetAttribute((SDL_GLattr)17, value7);
            			}
HXLINE( 456)			{
HXLINE( 456)				int value8 = ( (int)( ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("minor",35,7b,68,08),hx::paccDynamic)) );
HXDLIN( 456)				SDL_GL_SetAttribute((SDL_GLattr)18, value8);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,apply_GL_attr,(void))

int Runtime_obj::window_flags( ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_461_window_flags)
HXLINE( 463)		int flags = 0;
HXLINE( 465)		flags = (flags | 2);
HXLINE( 466)		flags = (flags | 8192);
HXLINE( 468)		if (( (bool)(config->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic)) )) {
HXLINE( 468)			flags = (flags | 32);
            		}
HXLINE( 469)		if (( (bool)(config->__Field(HX_("borderless",45,46,71,17),hx::paccDynamic)) )) {
HXLINE( 469)			flags = (flags | 16);
            		}
HXLINE( 471)		if (( (bool)(config->__Field(HX_("fullscreen",3b,3a,b4,f9),hx::paccDynamic)) )) {
HXLINE( 472)			if (!(( (bool)(config->__Field(HX_("true_fullscreen",cc,26,f1,d0),hx::paccDynamic)) ))) {
HXLINE( 473)				flags = (flags | 4097);
            			}
            			else {
HXLINE( 476)				flags = (flags | 1);
            			}
            		}
HXLINE( 481)		return flags;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,window_flags,return )

 ::Dynamic Runtime_obj::update_window_config(::cpp::Pointer<  SDL_Window > _window, ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_485_update_window_config)
HXLINE( 487)		if (( (bool)(config->__Field(HX_("fullscreen",3b,3a,b4,f9),hx::paccDynamic)) )) {
HXLINE( 488)			 ::Dynamic config1 = config->__Field(HX_("true_fullscreen",cc,26,f1,d0),hx::paccDynamic);
            		}
HXLINE( 495)		::cpp::Pointer<  SDL_Window > tmp = _window;
HXDLIN( 495)		 ::Dynamic size = linc::sdl::GL_GetDrawableSize(tmp, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("h",68,00,00,00), ::Dynamic(config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)))
            			->setFixed(1,HX_("w",77,00,00,00), ::Dynamic(config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)))));
HXLINE( 496)		::cpp::Pointer<  SDL_Window > tmp1 = _window;
HXDLIN( 496)		 ::Dynamic pos = linc::sdl::getWindowPosition(tmp1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00), ::Dynamic(config->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(1,HX_("y",79,00,00,00), ::Dynamic(config->__Field(HX_("y",79,00,00,00),hx::paccDynamic)))));
HXLINE( 498)		config->__SetField(HX_("x",78,00,00,00),pos->__Field(HX_("x",78,00,00,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 499)		config->__SetField(HX_("y",79,00,00,00),pos->__Field(HX_("y",79,00,00,00),hx::paccDynamic),hx::paccDynamic);
HXLINE( 500)		config->__SetField(HX_("width",06,b6,62,ca),(this->window_w = ( (int)(size->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) )),hx::paccDynamic);
HXLINE( 501)		config->__SetField(HX_("height",e7,07,4c,02),(this->window_h = ( (int)(size->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) )),hx::paccDynamic);
HXLINE( 503)		this->window_dpr = this->window_device_pixel_ratio();
HXLINE( 506)		return config;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Runtime_obj,update_window_config,return )

 ::Dynamic Runtime_obj::update_render_config(::cpp::Pointer<  SDL_Window > _window, ::Dynamic render){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_510_update_render_config)
HXLINE( 512)		render->__SetField(HX_("antialiasing",f4,16,b3,48),linc::sdl::GL_GetAttribute(14),hx::paccDynamic);
HXLINE( 513)		render->__SetField(HX_("red_bits",f4,d7,46,d0),linc::sdl::GL_GetAttribute(0),hx::paccDynamic);
HXLINE( 514)		render->__SetField(HX_("green_bits",42,a5,bf,35),linc::sdl::GL_GetAttribute(1),hx::paccDynamic);
HXLINE( 515)		render->__SetField(HX_("blue_bits",0b,26,35,39),linc::sdl::GL_GetAttribute(2),hx::paccDynamic);
HXLINE( 516)		render->__SetField(HX_("alpha_bits",c7,fa,9f,81),linc::sdl::GL_GetAttribute(3),hx::paccDynamic);
HXLINE( 517)		render->__SetField(HX_("depth",03,f1,29,d7),linc::sdl::GL_GetAttribute(6),hx::paccDynamic);
HXLINE( 518)		render->__SetField(HX_("stencil",fc,bd,03,80),linc::sdl::GL_GetAttribute(7),hx::paccDynamic);
HXLINE( 520)		 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("major",39,bd,1b,03),linc::sdl::GL_GetAttribute(17),hx::paccDynamic);
HXLINE( 521)		 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("minor",35,7b,68,08),linc::sdl::GL_GetAttribute(18),hx::paccDynamic);
HXLINE( 523)		int profile = linc::sdl::GL_GetAttribute(21);
HXLINE( 524)		switch((int)(profile)){
            			case (int)1: {
HXLINE( 530)				 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("profile",29,49,49,f3),1,hx::paccDynamic);
            			}
            			break;
            			case (int)2: {
HXLINE( 527)				 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("profile",29,49,49,f3),0,hx::paccDynamic);
            			}
            			break;
            			case (int)4: {
HXLINE( 533)				 ::Dynamic(render->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__SetField(HX_("profile",29,49,49,f3),2,hx::paccDynamic);
            			}
            			break;
            		}
HXLINE( 537)		return render;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Runtime_obj,update_render_config,return )

void Runtime_obj::handle_input_ev( cpp::Struct<SDL_Event> e){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_545_handle_input_ev)
HXDLIN( 545)		int _g = e->type;
HXDLIN( 545)		switch((int)(_g)){
            			case (int)768: {
HXLINE( 550)				 ::snow::systems::input::Input _hx_tmp = this->app->input;
HXLINE( 551)				int e1 = e->key.keysym.sym;
HXLINE( 552)				int e2 = e->key.keysym.scancode;
HXLINE( 553)				bool e3 = e->key.repeat;
HXLINE( 554)				 ::snow::types::ModState _hx_tmp1 = this->to_key_mod(e->key.keysym.mod);
HXLINE( 550)				_hx_tmp->dispatch_key_down_event(e1,e2,e3,_hx_tmp1,(e->key.timestamp / ((Float)1000.0)),e->key.windowID);
            			}
            			break;
            			case (int)769: {
HXLINE( 559)				 ::snow::systems::input::Input _hx_tmp2 = this->app->input;
HXLINE( 560)				int e4 = e->key.keysym.sym;
HXLINE( 561)				int e5 = e->key.keysym.scancode;
HXLINE( 562)				bool e6 = e->key.repeat;
HXLINE( 563)				 ::snow::types::ModState _hx_tmp3 = this->to_key_mod(e->key.keysym.mod);
HXLINE( 559)				_hx_tmp2->dispatch_key_up_event(e4,e5,e6,_hx_tmp3,(e->key.timestamp / ((Float)1000.0)),e->key.windowID);
            			}
            			break;
            			case (int)770: {
HXLINE( 568)				 ::snow::systems::input::Input _hx_tmp4 = this->app->input;
HXLINE( 569)				::String _hx_tmp5 = ::String(e->edit.text);
HXLINE( 570)				int e7 = e->edit.start;
HXLINE( 571)				int e8 = e->edit.length;
HXLINE( 568)				_hx_tmp4->dispatch_text_event(_hx_tmp5,e7,e8,1,(e->edit.timestamp / ((Float)1000.0)),e->edit.windowID);
            			}
            			break;
            			case (int)771: {
HXLINE( 577)				 ::snow::systems::input::Input _hx_tmp6 = this->app->input;
HXLINE( 578)				::String _hx_tmp7 = ::String(e->text.text);
HXLINE( 577)				_hx_tmp6->dispatch_text_event(_hx_tmp7,0,0,2,(e->text.timestamp / ((Float)1000.0)),e->text.windowID);
            			}
            			break;
            			case (int)1024: {
HXLINE( 589)				 ::snow::systems::input::Input _hx_tmp8 = this->app->input;
HXLINE( 590)				int _hx_tmp9 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->motion.x) )));
HXLINE( 591)				int _hx_tmp10 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->motion.y) )));
HXLINE( 592)				int _hx_tmp11 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->motion.xrel) )));
HXLINE( 593)				int _hx_tmp12 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->motion.yrel) )));
HXLINE( 589)				_hx_tmp8->dispatch_mouse_move_event(_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,(e->motion.timestamp / ((Float)1000.0)),e->motion.windowID);
            			}
            			break;
            			case (int)1025: {
HXLINE( 598)				 ::snow::systems::input::Input _hx_tmp13 = this->app->input;
HXLINE( 599)				int _hx_tmp14 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->button.x) )));
HXLINE( 600)				int _hx_tmp15 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->button.y) )));
HXLINE( 601)				int e9 = e->button.button;
HXLINE( 598)				_hx_tmp13->dispatch_mouse_down_event(_hx_tmp14,_hx_tmp15,e9,(e->button.timestamp / ((Float)1000.0)),e->button.windowID);
            			}
            			break;
            			case (int)1026: {
HXLINE( 606)				 ::snow::systems::input::Input _hx_tmp16 = this->app->input;
HXLINE( 607)				int _hx_tmp17 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->button.x) )));
HXLINE( 608)				int _hx_tmp18 = ::Math_obj::floor((this->window_dpr * ( (Float)(e->button.y) )));
HXLINE( 609)				int e10 = e->button.button;
HXLINE( 606)				_hx_tmp16->dispatch_mouse_up_event(_hx_tmp17,_hx_tmp18,e10,(e->button.timestamp / ((Float)1000.0)),e->button.windowID);
            			}
            			break;
            			case (int)1027: {
HXLINE( 614)				 ::snow::systems::input::Input _hx_tmp19 = this->app->input;
HXLINE( 615)				int e11 = e->wheel.x;
HXLINE( 616)				int e12 = e->wheel.y;
HXLINE( 614)				_hx_tmp19->dispatch_mouse_wheel_event(( (Float)(e11) ),( (Float)(e12) ),(e->wheel.timestamp / ((Float)1000.0)),e->wheel.windowID);
            			}
            			break;
            			case (int)1536: {
HXLINE( 655)				if (!(SDL_IsGameController(e->jaxis.which))) {
HXLINE( 657)					Float _val = (( (Float)((e->jaxis.value + 32768)) ) / ( (Float)(65535) ));
HXLINE( 658)					Float _normalized_val = ((((Float)-0.5) + _val) * ((Float)2.0));
HXLINE( 659)					 ::snow::systems::input::Input _hx_tmp20 = this->app->input;
HXLINE( 660)					int e13 = e->jaxis.which;
HXLINE( 661)					int e14 = e->jaxis.axis;
HXLINE( 659)					_hx_tmp20->dispatch_gamepad_axis_event(e13,e14,_normalized_val,(e->jaxis.timestamp / ((Float)1000.0)));
            				}
            			}
            			break;
            			case (int)1539: {
HXLINE( 669)				if (!(SDL_IsGameController(e->jbutton.which))) {
HXLINE( 670)					 ::snow::systems::input::Input _hx_tmp21 = this->app->input;
HXLINE( 671)					int e15 = e->jbutton.which;
HXLINE( 672)					int e16 = e->jbutton.button;
HXLINE( 670)					_hx_tmp21->dispatch_gamepad_button_down_event(e15,e16,( (Float)(1) ),(e->jbutton.timestamp / ((Float)1000.0)));
            				}
            			}
            			break;
            			case (int)1540: {
HXLINE( 680)				if (!(SDL_IsGameController(e->jbutton.which))) {
HXLINE( 681)					 ::snow::systems::input::Input _hx_tmp22 = this->app->input;
HXLINE( 682)					int e17 = e->jbutton.which;
HXLINE( 683)					int e18 = e->jbutton.button;
HXLINE( 681)					_hx_tmp22->dispatch_gamepad_button_up_event(e17,e18,( (Float)(0) ),(e->jbutton.timestamp / ((Float)1000.0)));
            				}
            			}
            			break;
            			case (int)1541: {
HXLINE( 691)				if (!(SDL_IsGameController(e->jdevice.which))) {
HXLINE( 692)					::cpp::Pointer<  SDL_Joystick > _joystick = SDL_JoystickOpen(e->jdevice.which);
HXLINE( 693)					{
HXLINE( 693)						::cpp::Pointer<  SDL_Joystick > tmp = _joystick;
HXDLIN( 693)						this->joysticks->set(e->jdevice.which,tmp);
            					}
HXLINE( 695)					 ::snow::systems::input::Input _hx_tmp23 = this->app->input;
HXLINE( 696)					int e19 = e->jdevice.which;
HXLINE( 697)					::String _hx_tmp24 = ::String(SDL_JoystickNameForIndex(e->jdevice.which));
HXLINE( 695)					_hx_tmp23->dispatch_gamepad_device_event(e19,_hx_tmp24,1,(e->jdevice.timestamp / ((Float)1000.0)));
            				}
            			}
            			break;
            			case (int)1542: {
HXLINE( 704)				if (!(SDL_IsGameController(e->jdevice.which))) {
HXLINE( 705)					::cpp::Pointer<  SDL_Joystick > _joystick1 = this->joysticks->get(e->jdevice.which);
HXLINE( 706)					::cpp::Pointer<  SDL_Joystick > tmp1 = _joystick1;
HXDLIN( 706)					SDL_JoystickClose(tmp1);
HXLINE( 707)					this->joysticks->remove(e->jdevice.which);
HXLINE( 709)					 ::snow::systems::input::Input _hx_tmp25 = this->app->input;
HXLINE( 710)					int e20 = e->jdevice.which;
HXLINE( 711)					::String _hx_tmp26 = ::String(SDL_JoystickNameForIndex(e->jdevice.which));
HXLINE( 709)					_hx_tmp25->dispatch_gamepad_device_event(e20,_hx_tmp26,2,(e->jdevice.timestamp / ((Float)1000.0)));
            				}
            			}
            			break;
            			case (int)1616: {
HXLINE( 721)				Float _val1 = (( (Float)((e->caxis.value + 32768)) ) / ( (Float)(65535) ));
HXLINE( 722)				Float _normalized_val1 = ((((Float)-0.5) + _val1) * ((Float)2.0));
HXLINE( 723)				 ::snow::systems::input::Input _hx_tmp27 = this->app->input;
HXLINE( 724)				int e21 = e->caxis.which;
HXLINE( 725)				int e22 = e->caxis.axis;
HXLINE( 723)				_hx_tmp27->dispatch_gamepad_axis_event(e21,e22,_normalized_val1,(e->caxis.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1617: {
HXLINE( 730)				 ::snow::systems::input::Input _hx_tmp28 = this->app->input;
HXLINE( 731)				int e23 = e->cbutton.which;
HXLINE( 732)				int e24 = e->cbutton.button;
HXLINE( 730)				_hx_tmp28->dispatch_gamepad_button_down_event(e23,e24,( (Float)(1) ),(e->cbutton.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1618: {
HXLINE( 737)				 ::snow::systems::input::Input _hx_tmp29 = this->app->input;
HXLINE( 738)				int e25 = e->cbutton.which;
HXLINE( 739)				int e26 = e->cbutton.button;
HXLINE( 737)				_hx_tmp29->dispatch_gamepad_button_up_event(e25,e26,( (Float)(0) ),(e->cbutton.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1619: {
HXLINE( 745)				::cpp::Pointer<  SDL_GameController > _gamepad = SDL_GameControllerOpen(e->cdevice.which);
HXLINE( 746)				{
HXLINE( 746)					::cpp::Pointer<  SDL_GameController > tmp2 = _gamepad;
HXDLIN( 746)					this->gamepads->set(e->cdevice.which,tmp2);
            				}
HXLINE( 748)				 ::snow::systems::input::Input _hx_tmp30 = this->app->input;
HXLINE( 749)				int e27 = e->cdevice.which;
HXLINE( 750)				::String _hx_tmp31 = ::String(SDL_GameControllerNameForIndex(e->cdevice.which));
HXLINE( 748)				_hx_tmp30->dispatch_gamepad_device_event(e27,_hx_tmp31,1,(e->cdevice.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1620: {
HXLINE( 756)				::cpp::Pointer<  SDL_GameController > _gamepad1 = this->gamepads->get(e->cdevice.which);
HXLINE( 757)				::cpp::Pointer<  SDL_GameController > tmp3 = _gamepad1;
HXDLIN( 757)				SDL_GameControllerClose(tmp3);
HXLINE( 758)				this->gamepads->remove(e->cdevice.which);
HXLINE( 760)				 ::snow::systems::input::Input _hx_tmp32 = this->app->input;
HXLINE( 761)				int e28 = e->cdevice.which;
HXLINE( 762)				::String _hx_tmp33 = ::String(SDL_GameControllerNameForIndex(e->cdevice.which));
HXLINE( 760)				_hx_tmp32->dispatch_gamepad_device_event(e28,_hx_tmp33,2,(e->cdevice.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1621: {
HXLINE( 767)				 ::snow::systems::input::Input _hx_tmp34 = this->app->input;
HXLINE( 768)				int e29 = e->cdevice.which;
HXLINE( 769)				::String _hx_tmp35 = ::String(SDL_GameControllerNameForIndex(e->cdevice.which));
HXLINE( 767)				_hx_tmp34->dispatch_gamepad_device_event(e29,_hx_tmp35,3,(e->cdevice.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1792: {
HXLINE( 624)				 ::snow::systems::input::Input _hx_tmp36 = this->app->input;
HXLINE( 625)				Float e30 = e->tfinger.x;
HXLINE( 626)				Float e31 = e->tfinger.y;
HXLINE( 627)				Float e32 = e->tfinger.dx;
HXLINE( 628)				Float e33 = e->tfinger.dy;
HXLINE( 629)				int e34 = ( (int)(e->tfinger.fingerId) );
HXLINE( 624)				_hx_tmp36->dispatch_touch_down_event(e30,e31,e32,e33,e34,(e->tfinger.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1793: {
HXLINE( 633)				 ::snow::systems::input::Input _hx_tmp37 = this->app->input;
HXLINE( 634)				Float e35 = e->tfinger.x;
HXLINE( 635)				Float e36 = e->tfinger.y;
HXLINE( 636)				Float e37 = e->tfinger.dx;
HXLINE( 637)				Float e38 = e->tfinger.dy;
HXLINE( 638)				int e39 = ( (int)(e->tfinger.fingerId) );
HXLINE( 633)				_hx_tmp37->dispatch_touch_up_event(e35,e36,e37,e38,e39,(e->tfinger.timestamp / ((Float)1000.0)));
            			}
            			break;
            			case (int)1794: {
HXLINE( 642)				 ::snow::systems::input::Input _hx_tmp38 = this->app->input;
HXLINE( 643)				Float e40 = e->tfinger.x;
HXLINE( 644)				Float e41 = e->tfinger.y;
HXLINE( 645)				Float e42 = e->tfinger.dx;
HXLINE( 646)				Float e43 = e->tfinger.dy;
HXLINE( 647)				int e44 = ( (int)(e->tfinger.fingerId) );
HXLINE( 642)				_hx_tmp38->dispatch_touch_move_event(e40,e41,e42,e43,e44,(e->tfinger.timestamp / ((Float)1000.0)));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,handle_input_ev,(void))

 ::snow::types::ModState Runtime_obj::to_key_mod(int mod_value){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_780_to_key_mod)
HXLINE( 782)		this->app->input->mod_state->none = (mod_value == 0);
HXLINE( 784)		this->app->input->mod_state->lshift = (mod_value == 1);
HXLINE( 785)		this->app->input->mod_state->rshift = (mod_value == 2);
HXLINE( 786)		this->app->input->mod_state->lctrl = (mod_value == 64);
HXLINE( 787)		this->app->input->mod_state->rctrl = (mod_value == 128);
HXLINE( 788)		this->app->input->mod_state->lalt = (mod_value == 256);
HXLINE( 789)		this->app->input->mod_state->ralt = (mod_value == 512);
HXLINE( 790)		this->app->input->mod_state->lmeta = (mod_value == 1024);
HXLINE( 791)		this->app->input->mod_state->rmeta = (mod_value == 2048);
HXLINE( 793)		this->app->input->mod_state->num = (mod_value == 4096);
HXLINE( 794)		this->app->input->mod_state->caps = (mod_value == 8192);
HXLINE( 795)		this->app->input->mod_state->mode = (mod_value == 16384);
HXLINE( 797)		bool _hx_tmp;
HXDLIN( 797)		bool _hx_tmp1;
HXDLIN( 797)		if ((mod_value != 192)) {
HXLINE( 797)			_hx_tmp1 = (mod_value == 64);
            		}
            		else {
HXLINE( 797)			_hx_tmp1 = true;
            		}
HXDLIN( 797)		if (!(_hx_tmp1)) {
HXLINE( 797)			_hx_tmp = (mod_value == 128);
            		}
            		else {
HXLINE( 797)			_hx_tmp = true;
            		}
HXDLIN( 797)		this->app->input->mod_state->ctrl = _hx_tmp;
HXLINE( 798)		bool _hx_tmp2;
HXDLIN( 798)		bool _hx_tmp3;
HXDLIN( 798)		if ((mod_value != 3)) {
HXLINE( 798)			_hx_tmp3 = (mod_value == 1);
            		}
            		else {
HXLINE( 798)			_hx_tmp3 = true;
            		}
HXDLIN( 798)		if (!(_hx_tmp3)) {
HXLINE( 798)			_hx_tmp2 = (mod_value == 2);
            		}
            		else {
HXLINE( 798)			_hx_tmp2 = true;
            		}
HXDLIN( 798)		this->app->input->mod_state->shift = _hx_tmp2;
HXLINE( 799)		bool _hx_tmp4;
HXDLIN( 799)		bool _hx_tmp5;
HXDLIN( 799)		if ((mod_value != 768)) {
HXLINE( 799)			_hx_tmp5 = (mod_value == 256);
            		}
            		else {
HXLINE( 799)			_hx_tmp5 = true;
            		}
HXDLIN( 799)		if (!(_hx_tmp5)) {
HXLINE( 799)			_hx_tmp4 = (mod_value == 512);
            		}
            		else {
HXLINE( 799)			_hx_tmp4 = true;
            		}
HXDLIN( 799)		this->app->input->mod_state->alt = _hx_tmp4;
HXLINE( 800)		bool _hx_tmp6;
HXDLIN( 800)		bool _hx_tmp7;
HXDLIN( 800)		if ((mod_value != 3072)) {
HXLINE( 800)			_hx_tmp7 = (mod_value == 1024);
            		}
            		else {
HXLINE( 800)			_hx_tmp7 = true;
            		}
HXDLIN( 800)		if (!(_hx_tmp7)) {
HXLINE( 800)			_hx_tmp6 = (mod_value == 2048);
            		}
            		else {
HXLINE( 800)			_hx_tmp6 = true;
            		}
HXDLIN( 800)		this->app->input->mod_state->meta = _hx_tmp6;
HXLINE( 802)		return this->app->input->mod_state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Runtime_obj,to_key_mod,return )

Float Runtime_obj::timestamp_start;

Float Runtime_obj::timestamp(){
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_169_timestamp)
HXDLIN( 169)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 169)		return (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Runtime_obj,timestamp,return )


hx::ObjectPtr< Runtime_obj > Runtime_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Runtime_obj > __this = new Runtime_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Runtime_obj > Runtime_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Runtime_obj *__this = (Runtime_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Runtime_obj), true, "snow.modules.sdl.Runtime"));
	*(void **)__this = Runtime_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Runtime_obj::Runtime_obj()
{
}

void Runtime_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Runtime);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(auto_swap,"auto_swap");
	HX_MARK_MEMBER_NAME(gamepads,"gamepads");
	HX_MARK_MEMBER_NAME(joysticks,"joysticks");
	HX_MARK_MEMBER_NAME(_size,"_size");
	HX_MARK_MEMBER_NAME(window_dpr,"window_dpr");
	HX_MARK_MEMBER_NAME(window_w,"window_w");
	HX_MARK_MEMBER_NAME(window_h,"window_h");
	 ::snow::core::native::Runtime_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Runtime_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(auto_swap,"auto_swap");
	HX_VISIT_MEMBER_NAME(gamepads,"gamepads");
	HX_VISIT_MEMBER_NAME(joysticks,"joysticks");
	HX_VISIT_MEMBER_NAME(_size,"_size");
	HX_VISIT_MEMBER_NAME(window_dpr,"window_dpr");
	HX_VISIT_MEMBER_NAME(window_w,"window_w");
	HX_VISIT_MEMBER_NAME(window_h,"window_h");
	 ::snow::core::native::Runtime_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Runtime_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn() ); }
		if (HX_FIELD_EQ(inName,"_size") ) { return hx::Val( _size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gamepads") ) { return hx::Val( gamepads ); }
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"run_loop") ) { return hx::Val( run_loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_w") ) { return hx::Val( window_w ); }
		if (HX_FIELD_EQ(inName,"window_h") ) { return hx::Val( window_h ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"auto_swap") ) { return hx::Val( auto_swap ); }
		if (HX_FIELD_EQ(inName,"joysticks") ) { return hx::Val( joysticks ); }
		if (HX_FIELD_EQ(inName,"to_pixels") ) { return hx::Val( to_pixels_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"window_dpr") ) { return hx::Val( window_dpr ); }
		if (HX_FIELD_EQ(inName,"to_key_mod") ) { return hx::Val( to_key_mod_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"window_grab") ) { return hx::Val( window_grab_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_swap") ) { return hx::Val( window_swap_dyn() ); }
		if (HX_FIELD_EQ(inName,"event_watch") ) { return hx::Val( event_watch_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"window_width") ) { return hx::Val( window_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_flags") ) { return hx::Val( window_flags_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"window_height") ) { return hx::Val( window_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"create_window") ) { return hx::Val( create_window_dyn() ); }
		if (HX_FIELD_EQ(inName,"apply_GL_attr") ) { return hx::Val( apply_GL_attr_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"handle_input_ev") ) { return hx::Val( handle_input_ev_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"handle_window_ev") ) { return hx::Val( handle_window_ev_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"window_fullscreen") ) { return hx::Val( window_fullscreen_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"post_render_context") ) { return hx::Val( post_render_context_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"update_window_config") ) { return hx::Val( update_window_config_dyn() ); }
		if (HX_FIELD_EQ(inName,"update_render_config") ) { return hx::Val( update_render_config_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"create_render_context") ) { return hx::Val( create_render_context_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"window_device_pixel_ratio") ) { return hx::Val( window_device_pixel_ratio_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Runtime_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { outValue = timestamp_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"timestamp_start") ) { outValue = ( timestamp_start ); return true; }
	}
	return false;
}

hx::Val Runtime_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_size") ) { _size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast< ::cpp::Pointer<  SDL_Window > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gamepads") ) { gamepads=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"window_w") ) { window_w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"window_h") ) { window_h=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"auto_swap") ) { auto_swap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"joysticks") ) { joysticks=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"window_dpr") ) { window_dpr=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Runtime_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"timestamp_start") ) { timestamp_start=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Runtime_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("auto_swap",a3,14,4d,4a));
	outFields->push(HX_("gamepads",b2,ac,9e,cb));
	outFields->push(HX_("joysticks",37,c4,b2,d7));
	outFields->push(HX_("_size",a0,bc,64,ff));
	outFields->push(HX_("window_dpr",57,d4,14,df));
	outFields->push(HX_("window_w",28,c3,cd,7d));
	outFields->push(HX_("window_h",19,c3,cd,7d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Runtime_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*SDL_GLContext*/ ,(int)offsetof(Runtime_obj,gl),HX_("gl",25,5a,00,00)},
	{hx::fsObject /*::cpp::Pointer< SDL_Window >*/ ,(int)offsetof(Runtime_obj,window),HX_("window",f0,93,8c,52)},
	{hx::fsBool,(int)offsetof(Runtime_obj,auto_swap),HX_("auto_swap",a3,14,4d,4a)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Runtime_obj,gamepads),HX_("gamepads",b2,ac,9e,cb)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Runtime_obj,joysticks),HX_("joysticks",37,c4,b2,d7)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Runtime_obj,_size),HX_("_size",a0,bc,64,ff)},
	{hx::fsFloat,(int)offsetof(Runtime_obj,window_dpr),HX_("window_dpr",57,d4,14,df)},
	{hx::fsInt,(int)offsetof(Runtime_obj,window_w),HX_("window_w",28,c3,cd,7d)},
	{hx::fsInt,(int)offsetof(Runtime_obj,window_h),HX_("window_h",19,c3,cd,7d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Runtime_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Runtime_obj::timestamp_start,HX_("timestamp_start",f9,d4,89,fd)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Runtime_obj_sMemberFields[] = {
	HX_("window",f0,93,8c,52),
	HX_("auto_swap",a3,14,4d,4a),
	HX_("gamepads",b2,ac,9e,cb),
	HX_("joysticks",37,c4,b2,d7),
	HX_("ready",63,a0,ba,e6),
	HX_("run",4b,e7,56,00),
	HX_("shutdown",96,fc,0b,6b),
	HX_("window_grab",bb,11,22,55),
	HX_("window_swap",82,6c,14,5d),
	HX_("window_fullscreen",6a,19,9b,3c),
	HX_("window_width",37,25,26,59),
	HX_("window_height",96,e3,89,5e),
	HX_("_size",a0,bc,64,ff),
	HX_("window_dpr",57,d4,14,df),
	HX_("window_device_pixel_ratio",18,25,59,b3),
	HX_("run_loop",18,8b,d0,6f),
	HX_("loop",64,a6,b7,47),
	HX_("event_watch",2a,35,c5,df),
	HX_("handle_window_ev",09,12,f5,ca),
	HX_("window_w",28,c3,cd,7d),
	HX_("window_h",19,c3,cd,7d),
	HX_("to_pixels",b1,10,64,5d),
	HX_("create_window",13,56,f5,db),
	HX_("create_render_context",e9,bd,51,e7),
	HX_("post_render_context",05,51,1d,7b),
	HX_("apply_GL_attr",ba,91,56,7f),
	HX_("window_flags",78,9a,4f,91),
	HX_("update_window_config",7b,c6,9e,3a),
	HX_("update_render_config",d5,47,74,7b),
	HX_("handle_input_ev",7d,0b,e8,3a),
	HX_("to_key_mod",de,d2,41,80),
	::String(null()) };

static void Runtime_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Runtime_obj::timestamp_start,"timestamp_start");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Runtime_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Runtime_obj::timestamp_start,"timestamp_start");
};

#endif

hx::Class Runtime_obj::__mClass;

static ::String Runtime_obj_sStaticFields[] = {
	HX_("timestamp_start",f9,d4,89,fd),
	HX_("timestamp",d6,d4,ce,a5),
	::String(null())
};

void Runtime_obj::__register()
{
	Runtime_obj _hx_dummy;
	Runtime_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.modules.sdl.Runtime",f3,79,09,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Runtime_obj::__GetStatic;
	__mClass->mSetStaticField = &Runtime_obj::__SetStatic;
	__mClass->mMarkFunc = Runtime_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Runtime_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Runtime_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Runtime_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Runtime_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Runtime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Runtime_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Runtime_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_14dae8750fecc33e_166_boot)
HXDLIN( 166)		timestamp_start = ((Float)0.0);
            	}
}

} // end namespace snow
} // end namespace modules
} // end namespace sdl
