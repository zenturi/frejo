// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types__Types_KeyEventType_Impl_
#include <snow/types/_Types/KeyEventType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_32844563b6fe23ad_938_toString,"snow.types._Types.KeyEventType_Impl_","toString",0xa37b44b1,"snow.types._Types.KeyEventType_Impl_.toString","snow/types/Types.hx",938,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_32844563b6fe23ad_931_boot,"snow.types._Types.KeyEventType_Impl_","boot",0xcff251b7,"snow.types._Types.KeyEventType_Impl_.boot","snow/types/Types.hx",931,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_32844563b6fe23ad_933_boot,"snow.types._Types.KeyEventType_Impl_","boot",0xcff251b7,"snow.types._Types.KeyEventType_Impl_.boot","snow/types/Types.hx",933,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_32844563b6fe23ad_935_boot,"snow.types._Types.KeyEventType_Impl_","boot",0xcff251b7,"snow.types._Types.KeyEventType_Impl_.boot","snow/types/Types.hx",935,0x72b41ce7)
namespace snow{
namespace types{
namespace _Types{

void KeyEventType_Impl__obj::__construct() { }

Dynamic KeyEventType_Impl__obj::__CreateEmpty() { return new KeyEventType_Impl__obj; }

void *KeyEventType_Impl__obj::_hx_vtable = 0;

Dynamic KeyEventType_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyEventType_Impl__obj > _hx_result = new KeyEventType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyEventType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x242feda1;
}

int KeyEventType_Impl__obj::ke_unknown;

int KeyEventType_Impl__obj::ke_down;

int KeyEventType_Impl__obj::ke_up;

::String KeyEventType_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_32844563b6fe23ad_938_toString)
HXDLIN( 938)		switch((int)(this1)){
            			case (int)0: {
HXLINE( 939)				return HX_("ke_unknown",a5,04,92,b3);
            			}
            			break;
            			case (int)1: {
HXLINE( 940)				return HX_("ke_down",67,28,03,b9);
            			}
            			break;
            			case (int)2: {
HXLINE( 941)				return HX_("ke_up",20,1b,eb,de);
            			}
            			break;
            			default:{
HXLINE( 942)				return (HX_("",00,00,00,00) + this1);
            			}
            		}
HXLINE( 938)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyEventType_Impl__obj,toString,return )


KeyEventType_Impl__obj::KeyEventType_Impl__obj()
{
}

bool KeyEventType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *KeyEventType_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo KeyEventType_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &KeyEventType_Impl__obj::ke_unknown,HX_("ke_unknown",a5,04,92,b3)},
	{hx::fsInt,(void *) &KeyEventType_Impl__obj::ke_down,HX_("ke_down",67,28,03,b9)},
	{hx::fsInt,(void *) &KeyEventType_Impl__obj::ke_up,HX_("ke_up",20,1b,eb,de)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void KeyEventType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyEventType_Impl__obj::ke_unknown,"ke_unknown");
	HX_MARK_MEMBER_NAME(KeyEventType_Impl__obj::ke_down,"ke_down");
	HX_MARK_MEMBER_NAME(KeyEventType_Impl__obj::ke_up,"ke_up");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyEventType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyEventType_Impl__obj::ke_unknown,"ke_unknown");
	HX_VISIT_MEMBER_NAME(KeyEventType_Impl__obj::ke_down,"ke_down");
	HX_VISIT_MEMBER_NAME(KeyEventType_Impl__obj::ke_up,"ke_up");
};

#endif

hx::Class KeyEventType_Impl__obj::__mClass;

static ::String KeyEventType_Impl__obj_sStaticFields[] = {
	HX_("ke_unknown",a5,04,92,b3),
	HX_("ke_down",67,28,03,b9),
	HX_("ke_up",20,1b,eb,de),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void KeyEventType_Impl__obj::__register()
{
	KeyEventType_Impl__obj _hx_dummy;
	KeyEventType_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types._Types.KeyEventType_Impl_",09,81,1a,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyEventType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyEventType_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KeyEventType_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< KeyEventType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyEventType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyEventType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyEventType_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyEventType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_32844563b6fe23ad_931_boot)
HXDLIN( 931)		ke_unknown = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_32844563b6fe23ad_933_boot)
HXDLIN( 933)		ke_down = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_32844563b6fe23ad_935_boot)
HXDLIN( 935)		ke_up = 2;
            	}
}

} // end namespace snow
} // end namespace types
} // end namespace _Types
