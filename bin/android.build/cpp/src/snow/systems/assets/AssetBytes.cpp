// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetBytes
#include <snow/systems/assets/AssetBytes.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03e297199d18f972_282_new,"snow.systems.assets.AssetBytes","new",0x834ec803,"snow.systems.assets.AssetBytes.new","snow/systems/assets/Asset.hx",282,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_03e297199d18f972_296_reload,"snow.systems.assets.AssetBytes","reload",0xc8968396,"snow.systems.assets.AssetBytes.reload","snow/systems/assets/Asset.hx",296,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_03e297199d18f972_292_reload,"snow.systems.assets.AssetBytes","reload",0xc8968396,"snow.systems.assets.AssetBytes.reload","snow/systems/assets/Asset.hx",292,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_03e297199d18f972_307_destroy,"snow.systems.assets.AssetBytes","destroy",0x8019321d,"snow.systems.assets.AssetBytes.destroy","snow/systems/assets/Asset.hx",307,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_03e297199d18f972_326_set_bytes,"snow.systems.assets.AssetBytes","set_bytes",0x8ecb24b1,"snow.systems.assets.AssetBytes.set_bytes","snow/systems/assets/Asset.hx",326,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_03e297199d18f972_318_load,"snow.systems.assets.AssetBytes","load",0x60555123,"snow.systems.assets.AssetBytes.load","snow/systems/assets/Asset.hx",318,0x7a5509c3)
namespace snow{
namespace systems{
namespace assets{

void AssetBytes_obj::__construct( ::snow::systems::assets::Assets _system,::String _id, ::snow::api::buffers::ArrayBufferView _bytes){
            	HX_STACKFRAME(&_hx_pos_03e297199d18f972_282_new)
HXLINE( 284)		super::__construct(_system,_id,1);
HXLINE( 285)		this->set_bytes(_bytes);
            	}

Dynamic AssetBytes_obj::__CreateEmpty() { return new AssetBytes_obj; }

void *AssetBytes_obj::_hx_vtable = 0;

Dynamic AssetBytes_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetBytes_obj > _hx_result = new AssetBytes_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AssetBytes_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x383a4e7f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x383a4e7f;
	} else {
		return inClassId==(int)0x3efde4b0;
	}
}

 ::snow::api::Promise AssetBytes_obj::reload(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::snow::systems::assets::AssetBytes,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::snow::systems::assets::AssetBytes,_gthis, ::Dynamic,resolve) HXARGC(1)
            			void _hx_run( ::snow::api::buffers::ArrayBufferView _bytes){
            				HX_STACKFRAME(&_hx_pos_03e297199d18f972_296_reload)
HXLINE( 298)				_gthis->set_bytes(_bytes);
HXLINE( 299)				resolve(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_03e297199d18f972_296_reload)
HXLINE( 296)			 ::snow::systems::io::IO _gthis1 = _gthis->_hx_system->app->io;
HXDLIN( 296)			_gthis1->data_flow(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,_gthis->_hx_system->root)->init(1,_gthis->id)),null(),null())->then( ::Dynamic(new _hx_Closure_0(_gthis,resolve)),null())->error(reject);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_03e297199d18f972_292_reload)
HXDLIN( 292)		 ::snow::systems::assets::AssetBytes _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 294)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetBytes_obj,reload,return )

void AssetBytes_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_03e297199d18f972_307_destroy)
HXLINE( 309)		if (hx::IsNotNull( this->bytes )) {
HXLINE( 309)			this->bytes->buffer = null();
            		}
HXLINE( 310)		this->set_bytes(null());
            	}


 ::snow::api::buffers::ArrayBufferView AssetBytes_obj::set_bytes( ::snow::api::buffers::ArrayBufferView _bytes){
            	HX_STACKFRAME(&_hx_pos_03e297199d18f972_326_set_bytes)
HXLINE( 328)		this->loaded = hx::IsNotNull( _bytes );
HXLINE( 329)		return (this->bytes = _bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetBytes_obj,set_bytes,return )

 ::snow::api::Promise AssetBytes_obj::load( ::snow::systems::assets::Assets _system,::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_03e297199d18f972_318_load)
HXDLIN( 318)		return  ::snow::systems::assets::AssetBytes_obj::__alloc( HX_CTX ,_system,_id,null())->reload();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetBytes_obj,load,return )


hx::ObjectPtr< AssetBytes_obj > AssetBytes_obj::__new( ::snow::systems::assets::Assets _system,::String _id, ::snow::api::buffers::ArrayBufferView _bytes) {
	hx::ObjectPtr< AssetBytes_obj > __this = new AssetBytes_obj();
	__this->__construct(_system,_id,_bytes);
	return __this;
}

hx::ObjectPtr< AssetBytes_obj > AssetBytes_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::systems::assets::Assets _system,::String _id, ::snow::api::buffers::ArrayBufferView _bytes) {
	AssetBytes_obj *__this = (AssetBytes_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssetBytes_obj), true, "snow.systems.assets.AssetBytes"));
	*(void **)__this = AssetBytes_obj::_hx_vtable;
	__this->__construct(_system,_id,_bytes);
	return __this;
}

AssetBytes_obj::AssetBytes_obj()
{
}

void AssetBytes_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetBytes);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	 ::snow::systems::assets::Asset_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AssetBytes_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	 ::snow::systems::assets::Asset_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AssetBytes_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_bytes") ) { return hx::Val( set_bytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssetBytes_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
	}
	return false;
}

hx::Val AssetBytes_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bytes(inValue.Cast<  ::snow::api::buffers::ArrayBufferView >()) );bytes=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetBytes_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytes",6b,08,98,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AssetBytes_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(AssetBytes_obj,bytes),HX_("bytes",6b,08,98,bd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetBytes_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetBytes_obj_sMemberFields[] = {
	HX_("bytes",6b,08,98,bd),
	HX_("reload",59,53,df,03),
	HX_("destroy",fa,2c,86,24),
	HX_("set_bytes",ce,50,92,e4),
	::String(null()) };

hx::Class AssetBytes_obj::__mClass;

static ::String AssetBytes_obj_sStaticFields[] = {
	HX_("load",26,9a,b7,47),
	::String(null())
};

void AssetBytes_obj::__register()
{
	AssetBytes_obj _hx_dummy;
	AssetBytes_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.assets.AssetBytes",91,0a,ac,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetBytes_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetBytes_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetBytes_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetBytes_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetBytes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetBytes_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace assets
