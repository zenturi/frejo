// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_frejo_app_Application
#include <frejo/app/Application.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_Promises
#include <snow/api/Promises.h>
#endif
#ifndef INCLUDED_snow_api_Timer
#include <snow/api/Timer.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_Extension
#include <snow/core/Extension.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetJSON
#include <snow/systems/assets/AssetJSON.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_systems_audio_Audio
#include <snow/systems/audio/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_input_Input
#include <snow/systems/input/Input.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_Config
#include <snow/types/Config.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
#ifndef INCLUDED_snow_types_InputEvent
#include <snow/types/InputEvent.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b50558b03164cec3_17_new,"snow.Snow","new",0x2ec45060,"snow.Snow.new","snow/Snow.hx",17,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_154_shutdown,"snow.Snow","shutdown",0x94cb7c96,"snow.Snow.shutdown","snow/Snow.hx",154,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_184_dispatch_event,"snow.Snow","dispatch_event",0xb6d62595,"snow.Snow.dispatch_event","snow/Snow.hx",184,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_195_dispatch_window_event,"snow.Snow","dispatch_window_event",0x46494f30,"snow.Snow.dispatch_window_event","snow/Snow.hx",195,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_213_dispatch_input_event,"snow.Snow","dispatch_input_event",0x5d10a2a0,"snow.Snow.dispatch_input_event","snow/Snow.hx",213,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_224_onevent,"snow.Snow","onevent",0xe985769b,"snow.Snow.onevent","snow/Snow.hx",224,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_245_onevent,"snow.Snow","onevent",0xe985769b,"snow.Snow.onevent","snow/Snow.hx",245,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_278_get_time,"snow.Snow","get_time",0xf6770796,"snow.Snow.get_time","snow/Snow.hx",278,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_279_get_uniqueid,"snow.Snow","get_uniqueid",0xd043c935,"snow.Snow.get_uniqueid","snow/Snow.hx",279,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_290_on_ready_event,"snow.Snow","on_ready_event",0xa531dd9e,"snow.Snow.on_ready_event","snow/Snow.hx",290,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_304_on_ready_event,"snow.Snow","on_ready_event",0xa531dd9e,"snow.Snow.on_ready_event","snow/Snow.hx",304,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_285_on_ready_event,"snow.Snow","on_ready_event",0xa531dd9e,"snow.Snow.on_ready_event","snow/Snow.hx",285,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_312_on_tick_event,"snow.Snow","on_tick_event",0xb9bb08d8,"snow.Snow.on_tick_event","snow/Snow.hx",312,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_355_setup_configs,"snow.Snow","setup_configs",0xf070606f,"snow.Snow.setup_configs","snow/Snow.hx",355,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_359_setup_configs,"snow.Snow","setup_configs",0xf070606f,"snow.Snow.setup_configs","snow/Snow.hx",359,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_361_setup_configs,"snow.Snow","setup_configs",0xf070606f,"snow.Snow.setup_configs","snow/Snow.hx",361,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_353_setup_configs,"snow.Snow","setup_configs",0xf070606f,"snow.Snow.setup_configs","snow/Snow.hx",353,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_338_setup_configs,"snow.Snow","setup_configs",0xf070606f,"snow.Snow.setup_configs","snow/Snow.hx",338,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_376_setup_host_config,"snow.Snow","setup_host_config",0xcf90f9f7,"snow.Snow.setup_host_config","snow/Snow.hx",376,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_391_default_user_config,"snow.Snow","default_user_config",0x40da29b8,"snow.Snow.default_user_config","snow/Snow.hx",391,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_386_default_user_config,"snow.Snow","default_user_config",0x40da29b8,"snow.Snow.default_user_config","snow/Snow.hx",386,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_381_default_user_config,"snow.Snow","default_user_config",0x40da29b8,"snow.Snow.default_user_config","snow/Snow.hx",381,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_406_default_config,"snow.Snow","default_config",0xd69819c0,"snow.Snow.default_config","snow/Snow.hx",406,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_420_default_render_config,"snow.Snow","default_render_config",0xe3496c8d,"snow.Snow.default_render_config","snow/Snow.hx",420,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_446_default_window_config,"snow.Snow","default_window_config",0xa273eb33,"snow.Snow.default_window_config","snow/Snow.hx",446,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_475_set_freeze,"snow.Snow","set_freeze",0x5bc91894,"snow.Snow.set_freeze","snow/Snow.hx",475,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_487_step,"snow.Snow","step",0xc05b674c,"snow.Snow.step","snow/Snow.hx",487,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_506_cycle_next_queue,"snow.Snow","cycle_next_queue",0xfb89383e,"snow.Snow.cycle_next_queue","snow/Snow.hx",506,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_517_cycle_defer_queue,"snow.Snow","cycle_defer_queue",0x85820f6b,"snow.Snow.cycle_defer_queue","snow/Snow.hx",517,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_532_copy_window_config,"snow.Snow","copy_window_config",0x7adf9127,"snow.Snow.copy_window_config","snow/Snow.hx",532,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_549_copy_render_config,"snow.Snow","copy_render_config",0xbbb51281,"snow.Snow.copy_render_config","snow/Snow.hx",549,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_571_make_uniqueid,"snow.Snow","make_uniqueid",0xca2724dd,"snow.Snow.make_uniqueid","snow/Snow.hx",571,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_264_next,"snow.Snow","next",0xbd0204f3,"snow.Snow.next","snow/Snow.hx",264,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_272_defer,"snow.Snow","defer",0xe2b2cd72,"snow.Snow.defer","snow/Snow.hx",272,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_280_get_timestamp,"snow.Snow","get_timestamp",0x374328ad,"snow.Snow.get_timestamp","snow/Snow.hx",280,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_503_boot,"snow.Snow","boot",0xb51b0432,"snow.Snow.boot","snow/Snow.hx",503,0x86524d2f)
HX_LOCAL_STACK_FRAME(_hx_pos_b50558b03164cec3_504_boot,"snow.Snow","boot",0xb51b0432,"snow.Snow.boot","snow/Snow.hx",504,0x86524d2f)
namespace snow{

void Snow_obj::__construct( ::Main _host){
            	HX_GC_STACKFRAME(&_hx_pos_b50558b03164cec3_17_new)
HXLINE( 284)		this->had_ready_event = false;
HXLINE( 223)		this->i = 0;
HXLINE( 193)		this->window_in_background = false;
HXLINE( 151)		this->immediate_shutdown = false;
HXLINE(  64)		this->has_shutdown = false;
HXLINE(  62)		this->shutting_down = false;
HXLINE(  59)		this->debug = false;
HXLINE(  54)		this->platform = HX_("unknown",8a,23,7b,e1);
HXLINE(  28)		this->ready = false;
HXLINE(  26)		this->freeze = false;
HXLINE(  79)		if (hx::IsNull( _host )) {
HXLINE(  79)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion((HX_("_host was null",d7,cc,5b,83) + ((HX_(" ( ",18,6b,18,00) + HX_("snow App instance was null!",74,3f,df,04)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE(  93)		this->host = _host;
HXLINE(  94)		this->host->app = hx::ObjectPtr<OBJ_>(this);
HXLINE(  95)		this->config = this->default_config();
HXLINE( 101)		this->sys_event =  ::snow::types::SystemEvent_obj::__alloc( HX_CTX );
HXLINE( 102)		this->win_event =  ::snow::types::WindowEvent_obj::__alloc( HX_CTX );
HXLINE( 104)		this->io =  ::snow::systems::io::IO_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 105)		this->input =  ::snow::systems::input::Input_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 106)		this->audio =  ::snow::systems::audio::Audio_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 107)		this->assets =  ::snow::systems::assets::Assets_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 109)		this->extensions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 110)		{
HXLINE( 110)			int _g = 0;
HXDLIN( 110)			::Array< ::String > _g1 = ::snow::types::Config_obj::extensions;
HXDLIN( 110)			while((_g < _g1->length)){
HXLINE( 110)				::String _ext_type = _g1->__get(_g);
HXDLIN( 110)				_g = (_g + 1);
HXLINE( 112)				hx::Class _class = ::Type_obj::resolveClass(_ext_type);
HXLINE( 113)				if (hx::IsNull( _class )) {
HXLINE( 113)					HX_STACK_DO_THROW(::snow::types::Error_obj::error(((HX_("Extension `",5f,65,2e,9d) + _ext_type) + HX_("`: Type not found via Type.resolveClass!",fe,a5,9a,68))));
            				}
HXLINE( 115)				::Dynamic _instance = ::Type_obj::createInstance(_class,null());
HXLINE( 116)				if (hx::IsNull( _instance )) {
HXLINE( 116)					HX_STACK_DO_THROW(::snow::types::Error_obj::error(((HX_("Extension `",5f,65,2e,9d) + _ext_type) + HX_("`: Instance was null on calling new()!",a0,8e,18,09))));
            				}
HXLINE( 118)				this->extensions->push(_instance);
            			}
            		}
HXLINE( 124)		this->runtime =  ::snow::modules::sdl::Runtime_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 126)		if (hx::IsNull( this->os )) {
HXLINE( 126)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion((HX_("os was null",5a,33,12,a9) + ((HX_(" ( ",18,6b,18,00) + HX_("init - Runtime didn't set the app.os value!",b9,d8,19,13)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 127)		if (hx::IsNull( this->platform )) {
HXLINE( 127)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion((HX_("platform was null",eb,b7,7f,f3) + ((HX_(" ( ",18,6b,18,00) + HX_("init - Runtime didn't set the app.platform value!",ca,66,c6,c5)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 131)		this->dispatch_event(1);
HXLINE( 132)		this->host->internal_init();
HXLINE( 134)		{
HXLINE( 134)			::snow::api::Promises_obj::step();
HXDLIN( 134)			while((::snow::Snow_obj::next_queue->length > 0)){
HXLINE( 134)				int count = ::snow::Snow_obj::next_queue->length;
HXDLIN( 134)				int i = 0;
HXDLIN( 134)				while((i < count)){
HXLINE( 134)					::snow::Snow_obj::next_queue->shift()();
HXDLIN( 134)					i = (i + 1);
            				}
            			}
HXDLIN( 134)			while((::snow::Snow_obj::defer_queue->length > 0)){
HXLINE( 134)				int count1 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 134)				int i1 = 0;
HXDLIN( 134)				while((i1 < count1)){
HXLINE( 134)					::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 134)					i1 = (i1 + 1);
            				}
            			}
            		}
HXLINE( 137)		this->dispatch_event(2);
HXLINE( 139)		{
HXLINE( 139)			::snow::api::Promises_obj::step();
HXDLIN( 139)			while((::snow::Snow_obj::next_queue->length > 0)){
HXLINE( 139)				int count2 = ::snow::Snow_obj::next_queue->length;
HXDLIN( 139)				int i2 = 0;
HXDLIN( 139)				while((i2 < count2)){
HXLINE( 139)					::snow::Snow_obj::next_queue->shift()();
HXDLIN( 139)					i2 = (i2 + 1);
            				}
            			}
HXDLIN( 139)			while((::snow::Snow_obj::defer_queue->length > 0)){
HXLINE( 139)				int count3 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 139)				int i3 = 0;
HXDLIN( 139)				while((i3 < count3)){
HXLINE( 139)					::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 139)					i3 = (i3 + 1);
            				}
            			}
            		}
HXLINE( 143)		bool _should_exit = this->runtime->run();
HXLINE( 144)		bool _hx_tmp;
HXDLIN( 144)		if (_should_exit) {
HXLINE( 144)			bool _hx_tmp1;
HXDLIN( 144)			if (!(this->has_shutdown)) {
HXLINE( 144)				_hx_tmp1 = this->shutting_down;
            			}
            			else {
HXLINE( 144)				_hx_tmp1 = true;
            			}
HXDLIN( 144)			_hx_tmp = !(_hx_tmp1);
            		}
            		else {
HXLINE( 144)			_hx_tmp = false;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 145)			this->shutdown();
            		}
            	}

Dynamic Snow_obj::__CreateEmpty() { return new Snow_obj; }

void *Snow_obj::_hx_vtable = 0;

Dynamic Snow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Snow_obj > _hx_result = new Snow_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Snow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a8bad8a;
}

void Snow_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_154_shutdown)
HXLINE( 157)		if (this->shutting_down) {
HXLINE( 158)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 158)			_hx_tmp((HX_("     i / snow / ",06,b3,eb,71) + HX_("shutdown / called again, already shutting down - ignoring",76,23,1b,e0)),hx::SourceInfo(HX_("snow/Snow.hx",2f,4d,52,86),158,HX_("snow.Snow",6e,e0,04,a6),HX_("shutdown",96,fc,0b,6b)));
HXLINE( 159)			return;
            		}
HXLINE( 162)		if ((this->has_shutdown != false)) {
HXLINE( 162)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("has_shutdown == false",48,e2,7a,15) + ((HX_(" ( ",18,6b,18,00) + HX_("snow - calling shutdown more than once is disallowed",e3,47,4f,05)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 164)		this->shutting_down = true;
HXLINE( 166)		this->host->ondestroy();
HXLINE( 168)		this->dispatch_event(7);
HXLINE( 170)		this->io->shutdown();
HXLINE( 171)		this->audio->shutdown();
HXLINE( 172)		this->assets->shutdown();
HXLINE( 173)		this->input->shutdown();
HXLINE( 175)		this->runtime->shutdown(this->immediate_shutdown);
HXLINE( 177)		this->has_shutdown = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,shutdown,(void))

void Snow_obj::dispatch_event(int _type){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_184_dispatch_event)
HXLINE( 186)		{
HXLINE( 186)			 ::snow::types::SystemEvent _this = this->sys_event;
HXDLIN( 186)			_this->type = _type;
HXDLIN( 186)			_this->window = null();
HXDLIN( 186)			_this->input = null();
            		}
HXLINE( 188)		this->onevent(this->sys_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,dispatch_event,(void))

void Snow_obj::dispatch_window_event(int _type,Float _timestamp,int _window_id,int _x,int _y){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_195_dispatch_window_event)
HXLINE( 197)		{
HXLINE( 197)			 ::snow::types::WindowEvent _this = this->win_event;
HXDLIN( 197)			_this->type = _type;
HXDLIN( 197)			_this->timestamp = _timestamp;
HXDLIN( 197)			_this->window_id = _window_id;
HXDLIN( 197)			_this->x = _x;
HXDLIN( 197)			_this->y = _y;
            		}
HXLINE( 198)		{
HXLINE( 198)			 ::snow::types::SystemEvent _this1 = this->sys_event;
HXDLIN( 198)			_this1->type = 8;
HXDLIN( 198)			_this1->window = this->win_event;
HXDLIN( 198)			_this1->input = null();
            		}
HXLINE( 201)		if ((_type == 13)) {
HXLINE( 202)			this->window_in_background = true;
            		}
            		else {
HXLINE( 203)			if ((_type == 12)) {
HXLINE( 204)				this->window_in_background = false;
            			}
            		}
HXLINE( 208)		this->onevent(this->sys_event);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Snow_obj,dispatch_window_event,(void))

void Snow_obj::dispatch_input_event( ::snow::types::InputEvent _event){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_213_dispatch_input_event)
HXLINE( 215)		{
HXLINE( 215)			 ::snow::types::SystemEvent _this = this->sys_event;
HXDLIN( 215)			_this->type = 9;
HXDLIN( 215)			_this->window = null();
HXDLIN( 215)			_this->input = _event;
            		}
HXLINE( 217)		this->onevent(this->sys_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,dispatch_input_event,(void))

void Snow_obj::onevent( ::snow::types::SystemEvent _event){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_224_onevent)
HXLINE( 233)		this->io->module->onevent(_event);
HXLINE( 234)		this->audio->onevent(_event);
HXLINE( 235)		this->input->onevent(_event);
HXLINE( 236)		this->host->onevent(_event);
HXLINE( 238)		this->i = 0;
HXDLIN( 238)		while((this->i < this->extensions->length)){
HXLINE( 239)			::snow::core::Extension_obj::onevent(this->extensions->__get(this->i),_event);
HXLINE( 240)			++this->i;
            		}
HXLINE( 243)		{
HXLINE( 243)			int _g = _event->type;
HXDLIN( 243)			switch((int)(_g)){
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::snow::Snow,_gthis) HXARGC(1)
            					void _hx_run( ::Dynamic _){
            						HX_STACKFRAME(&_hx_pos_b50558b03164cec3_245_onevent)
HXLINE( 245)						_gthis->runtime->ready();
HXDLIN( 245)						_gthis->host->ready();
HXDLIN( 245)						_gthis->ready = true;
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            					void _hx_run(::String e){
            						HX_STACKFRAME(&_hx_pos_b50558b03164cec3_245_onevent)
HXLINE( 245)						HX_STACK_DO_THROW(::snow::types::Error_obj::init((HX_("snow / cannot recover from error: ",23,3b,c4,75) + e)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 245)					 ::snow::Snow _gthis = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)					if ((this->had_ready_event != false)) {
HXLINE( 245)						HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("had_ready_event == false",f9,87,df,e3) + ((HX_(" ( ",18,6b,18,00) + HX_("snow; the ready event should not be fired repeatedly",36,21,d4,3d)) + HX_(" )",09,1c,00,00)))));
            					}
HXDLIN( 245)					this->had_ready_event = true;
HXDLIN( 245)					this->setup_configs()->then( ::Dynamic(new _hx_Closure_0(_gthis)),null())->error( ::Dynamic(new _hx_Closure_1()));
HXDLIN( 245)					{
HXLINE( 245)						::snow::api::Promises_obj::step();
HXDLIN( 245)						while((::snow::Snow_obj::next_queue->length > 0)){
HXLINE( 245)							int count = ::snow::Snow_obj::next_queue->length;
HXDLIN( 245)							int i = 0;
HXDLIN( 245)							while((i < count)){
HXLINE( 245)								::snow::Snow_obj::next_queue->shift()();
HXDLIN( 245)								i = (i + 1);
            							}
            						}
HXDLIN( 245)						while((::snow::Snow_obj::defer_queue->length > 0)){
HXLINE( 245)							int count1 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 245)							int i1 = 0;
HXDLIN( 245)							while((i1 < count1)){
HXLINE( 245)								::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 245)								i1 = (i1 + 1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 246)					if (!(this->freeze)) {
HXLINE( 246)						bool _hx_tmp;
HXDLIN( 246)						if (this->window_in_background) {
HXLINE( 246)							_hx_tmp = hx::IsNotEq(  ::Dynamic(this->config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic),0 );
            						}
            						else {
HXLINE( 246)							_hx_tmp = false;
            						}
HXDLIN( 246)						if (_hx_tmp) {
HXLINE( 246)							::Sys_obj::sleep(( (Float)( ::Dynamic(this->config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic)) ));
            						}
HXDLIN( 246)						::snow::api::Timer_obj::update();
HXDLIN( 246)						::snow::api::Promises_obj::step();
HXDLIN( 246)						{
HXLINE( 246)							int count2 = ::snow::Snow_obj::next_queue->length;
HXDLIN( 246)							int i2 = 0;
HXDLIN( 246)							while((i2 < count2)){
HXLINE( 246)								::snow::Snow_obj::next_queue->shift()();
HXDLIN( 246)								i2 = (i2 + 1);
            							}
            						}
HXDLIN( 246)						bool _hx_tmp1;
HXDLIN( 246)						if (!(this->shutting_down)) {
HXLINE( 246)							_hx_tmp1 = this->ready;
            						}
            						else {
HXLINE( 246)							_hx_tmp1 = false;
            						}
HXDLIN( 246)						if (_hx_tmp1) {
HXLINE( 246)							this->host->internal_tick();
            						}
HXDLIN( 246)						{
HXLINE( 246)							int count3 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 246)							int i3 = 0;
HXDLIN( 246)							while((i3 < count3)){
HXLINE( 246)								::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 246)								i3 = (i3 + 1);
            							}
            						}
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 248)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 248)					_hx_tmp2((HX_("     i / snow / ",06,b3,eb,71) + HX_("goodbye.",7d,89,ec,41)),hx::SourceInfo(HX_("snow/Snow.hx",2f,4d,52,86),248,HX_("snow.Snow",6e,e0,04,a6),HX_("onevent",9b,f6,d4,78)));
            				}
            				break;
            				case (int)10: {
HXLINE( 247)					this->shutdown();
            				}
            				break;
            				case (int)11: {
HXLINE( 251)					this->immediate_shutdown = true;
HXLINE( 252)					this->shutdown();
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,onevent,(void))

Float Snow_obj::get_time(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_278_get_time)
HXDLIN( 278)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 278)		return (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,get_time,return )

::String Snow_obj::get_uniqueid(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_279_get_uniqueid)
HXDLIN( 279)		return this->make_uniqueid(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,get_uniqueid,return )

void Snow_obj::on_ready_event(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::snow::Snow,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_b50558b03164cec3_290_on_ready_event)
HXLINE( 294)			_gthis->runtime->ready();
HXLINE( 297)			_gthis->host->ready();
HXLINE( 300)			_gthis->ready = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String e){
            			HX_STACKFRAME(&_hx_pos_b50558b03164cec3_304_on_ready_event)
HXLINE( 304)			HX_STACK_DO_THROW(::snow::types::Error_obj::init((HX_("snow / cannot recover from error: ",23,3b,c4,75) + e)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_285_on_ready_event)
HXDLIN( 285)		 ::snow::Snow _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 287)		if ((this->had_ready_event != false)) {
HXLINE( 287)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("had_ready_event == false",f9,87,df,e3) + ((HX_(" ( ",18,6b,18,00) + HX_("snow; the ready event should not be fired repeatedly",36,21,d4,3d)) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 288)		this->had_ready_event = true;
HXLINE( 290)		this->setup_configs()->then( ::Dynamic(new _hx_Closure_0(_gthis)),null())->error( ::Dynamic(new _hx_Closure_1()));
HXLINE( 308)		{
HXLINE( 308)			::snow::api::Promises_obj::step();
HXDLIN( 308)			while((::snow::Snow_obj::next_queue->length > 0)){
HXLINE( 308)				int count = ::snow::Snow_obj::next_queue->length;
HXDLIN( 308)				int i = 0;
HXDLIN( 308)				while((i < count)){
HXLINE( 308)					::snow::Snow_obj::next_queue->shift()();
HXDLIN( 308)					i = (i + 1);
            				}
            			}
HXDLIN( 308)			while((::snow::Snow_obj::defer_queue->length > 0)){
HXLINE( 308)				int count1 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 308)				int i1 = 0;
HXDLIN( 308)				while((i1 < count1)){
HXLINE( 308)					::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 308)					i1 = (i1 + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,on_ready_event,(void))

void Snow_obj::on_tick_event(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_312_on_tick_event)
HXLINE( 314)		if (this->freeze) {
HXLINE( 314)			return;
            		}
HXLINE( 317)		bool _hx_tmp;
HXDLIN( 317)		if (this->window_in_background) {
HXLINE( 317)			_hx_tmp = hx::IsNotEq(  ::Dynamic(this->config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 317)			_hx_tmp = false;
            		}
HXDLIN( 317)		if (_hx_tmp) {
HXLINE( 318)			::Sys_obj::sleep(( (Float)( ::Dynamic(this->config->__Field(HX_("window",f0,93,8c,52),hx::paccDynamic))->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic)) ));
            		}
HXLINE( 322)		::snow::api::Timer_obj::update();
HXLINE( 324)		::snow::api::Promises_obj::step();
HXLINE( 326)		{
HXLINE( 326)			int count = ::snow::Snow_obj::next_queue->length;
HXDLIN( 326)			int i = 0;
HXDLIN( 326)			while((i < count)){
HXLINE( 326)				::snow::Snow_obj::next_queue->shift()();
HXDLIN( 326)				i = (i + 1);
            			}
            		}
HXLINE( 328)		bool _hx_tmp1;
HXDLIN( 328)		if (!(this->shutting_down)) {
HXLINE( 328)			_hx_tmp1 = this->ready;
            		}
            		else {
HXLINE( 328)			_hx_tmp1 = false;
            		}
HXDLIN( 328)		if (_hx_tmp1) {
HXLINE( 329)			this->host->internal_tick();
            		}
HXLINE( 332)		{
HXLINE( 332)			int count1 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 332)			int i1 = 0;
HXDLIN( 332)			while((i1 < count1)){
HXLINE( 332)				::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 332)				i1 = (i1 + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,on_tick_event,(void))

 ::snow::api::Promise Snow_obj::setup_configs(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::snow::Snow,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::snow::Snow,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic _user_conf){
            				HX_STACKFRAME(&_hx_pos_b50558b03164cec3_355_setup_configs)
HXLINE( 355)				_gthis->config->__SetField(HX_("user",4b,92,ad,4d),_user_conf,hx::paccDynamic);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run(::String error){
            				HX_STACKFRAME(&_hx_pos_b50558b03164cec3_359_setup_configs)
HXLINE( 359)				HX_STACK_DO_THROW(::snow::types::Error_obj::init((HX_("config / failed / default user config JSON failed to parse. Cannot recover. ",f1,b0,a4,db) + error)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::snow::Snow,_gthis, ::Dynamic,resolve) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_b50558b03164cec3_361_setup_configs)
HXLINE( 363)				_gthis->config = _gthis->host->config(_gthis->config);
HXLINE( 364)				resolve();
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_b50558b03164cec3_353_setup_configs)
HXLINE( 353)			_gthis->default_user_config()->then( ::Dynamic(new _hx_Closure_0(_gthis)),null())->error( ::Dynamic(new _hx_Closure_1()))->then( ::Dynamic(new _hx_Closure_2(_gthis,resolve)),null());
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_b50558b03164cec3_338_setup_configs)
HXDLIN( 338)		 ::snow::Snow _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 341)		bool _hx_tmp;
HXDLIN( 341)		if (hx::IsNotNull( ::snow::types::Config_obj::app_config )) {
HXLINE( 341)			_hx_tmp = (::snow::types::Config_obj::app_config == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 341)			_hx_tmp = true;
            		}
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 343)			this->config = this->host->config(this->config);
HXLINE( 345)			return ::snow::api::Promise_obj::resolve(null());
            		}
HXLINE( 349)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_3(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,setup_configs,return )

void Snow_obj::setup_host_config(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_376_setup_host_config)
HXDLIN( 376)		this->config = this->host->config(this->config);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,setup_host_config,(void))

 ::snow::api::Promise Snow_obj::default_user_config(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::snow::Snow,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,resolve, ::Dynamic,reject) HXARGC(1)
            			void _hx_run( ::snow::types::Error error){
            				HX_STACKFRAME(&_hx_pos_b50558b03164cec3_391_default_user_config)
HXLINE( 391)				if ((error->_hx_getIndex() == 2)) {
HXLINE( 392)					 ::Dynamic val = error->_hx_getObject(0);
HXLINE( 393)					reject(error);
            				}
            				else {
HXLINE( 395)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 395)					::String _hx_tmp1 = (HX_("     i / snow / ",06,b3,eb,71) + (HX_("config / user config will be null! / ",1e,80,be,d1) + ::Std_obj::string(error)));
HXDLIN( 395)					_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("snow/Snow.hx",2f,4d,52,86),395,HX_("snow.Snow",6e,e0,04,a6),HX_("default_user_config",b8,a9,69,49)));
HXLINE( 396)					resolve(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_b50558b03164cec3_386_default_user_config)
HXLINE( 388)			 ::snow::systems::io::IO _gthis1 = _gthis->io;
HXDLIN( 388)			 ::snow::api::Promise load = _gthis1->data_flow(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,_gthis->assets->root)->init(1,::snow::types::Config_obj::app_config)),::snow::systems::assets::AssetJSON_obj::processor_dyn(),null());
HXLINE( 390)			load->then(resolve,null())->error( ::Dynamic(new _hx_Closure_0(resolve,reject)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_b50558b03164cec3_381_default_user_config)
HXDLIN( 381)		 ::snow::Snow _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 386)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,default_user_config,return )

 ::Dynamic Snow_obj::default_config(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_406_default_config)
HXLINE( 408)		 ::Dynamic _hx_tmp = this->default_window_config();
HXLINE( 406)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("runtime",d8,b4,60,ef),null())
            			->setFixed(1,HX_("render",56,6b,29,05),this->default_render_config())
            			->setFixed(2,HX_("user",4b,92,ad,4d),null())
            			->setFixed(3,HX_("window",f0,93,8c,52),_hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,default_config,return )

 ::Dynamic Snow_obj::default_render_config(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_420_default_render_config)
HXDLIN( 420)		return  ::Dynamic(hx::Anon_obj::Create(10)
            			->setFixed(0,HX_("stencil",fc,bd,03,80),0)
            			->setFixed(1,HX_("alpha_bits",c7,fa,9f,81),8)
            			->setFixed(2,HX_("webgl",b9,4b,bc,c7), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("version",18,e7,f1,7c),1)))
            			->setFixed(3,HX_("red_bits",f4,d7,46,d0),8)
            			->setFixed(4,HX_("depth",03,f1,29,d7),0)
            			->setFixed(5,HX_("default_clear",4f,18,27,0a), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("a",61,00,00,00),( (Float)(1) ))
            				->setFixed(1,HX_("b",62,00,00,00),( (Float)(0) ))
            				->setFixed(2,HX_("g",67,00,00,00),( (Float)(0) ))
            				->setFixed(3,HX_("r",72,00,00,00),( (Float)(0) ))))
            			->setFixed(6,HX_("opengl",6f,64,94,21), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("profile",29,49,49,f3),2)
            				->setFixed(1,HX_("major",39,bd,1b,03),2)
            				->setFixed(2,HX_("minor",35,7b,68,08),0)))
            			->setFixed(7,HX_("green_bits",42,a5,bf,35),8)
            			->setFixed(8,HX_("blue_bits",0b,26,35,39),8)
            			->setFixed(9,HX_("antialiasing",f4,16,b3,48),0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,default_render_config,return )

 ::Dynamic Snow_obj::default_window_config(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_446_default_window_config)
HXLINE( 450)		 ::Dynamic conf =  ::Dynamic(hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("resizable",6b,37,50,a9),true)
            			->setFixed(1,HX_("width",06,b6,62,ca),960)
            			->setFixed(2,HX_("true_fullscreen",cc,26,f1,d0),false)
            			->setFixed(3,HX_("fullscreen",3b,3a,b4,f9),false)
            			->setFixed(4,HX_("x",78,00,00,00),536805376)
            			->setFixed(5,HX_("y",79,00,00,00),536805376)
            			->setFixed(6,HX_("height",e7,07,4c,02),640)
            			->setFixed(7,HX_("title",98,15,3b,10),HX_("snow app",84,30,9f,8b))
            			->setFixed(8,HX_("background_sleep",c6,3e,ae,10),((Float)0.0666666666666666657))
            			->setFixed(9,HX_("borderless",45,46,71,17),false)
            			->setFixed(10,HX_("no_input",4c,92,80,55),false));
HXLINE( 465)		conf->__SetField(HX_("fullscreen",3b,3a,b4,f9),true,hx::paccDynamic);
HXLINE( 466)		conf->__SetField(HX_("borderless",45,46,71,17),true,hx::paccDynamic);
HXLINE( 469)		return conf;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,default_window_config,return )

bool Snow_obj::set_freeze(bool _freeze){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_475_set_freeze)
HXLINE( 477)		this->freeze = _freeze;
HXLINE( 479)		int _hx_tmp;
HXDLIN( 479)		if (_freeze) {
HXLINE( 479)			_hx_tmp = 4;
            		}
            		else {
HXLINE( 479)			_hx_tmp = 5;
            		}
HXDLIN( 479)		this->dispatch_event(_hx_tmp);
HXLINE( 481)		return this->freeze;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,set_freeze,return )

void Snow_obj::step(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_487_step)
HXLINE( 489)		::snow::api::Promises_obj::step();
HXLINE( 491)		while((::snow::Snow_obj::next_queue->length > 0)){
HXLINE( 492)			int count = ::snow::Snow_obj::next_queue->length;
HXDLIN( 492)			int i = 0;
HXDLIN( 492)			while((i < count)){
HXLINE( 492)				::snow::Snow_obj::next_queue->shift()();
HXDLIN( 492)				i = (i + 1);
            			}
            		}
HXLINE( 495)		while((::snow::Snow_obj::defer_queue->length > 0)){
HXLINE( 496)			int count1 = ::snow::Snow_obj::defer_queue->length;
HXDLIN( 496)			int i1 = 0;
HXDLIN( 496)			while((i1 < count1)){
HXLINE( 496)				::snow::Snow_obj::defer_queue->shift()();
HXDLIN( 496)				i1 = (i1 + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,step,(void))

void Snow_obj::cycle_next_queue(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_506_cycle_next_queue)
HXLINE( 508)		int count = ::snow::Snow_obj::next_queue->length;
HXLINE( 509)		int i = 0;
HXLINE( 510)		while((i < count)){
HXLINE( 511)			::snow::Snow_obj::next_queue->shift()();
HXLINE( 512)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,cycle_next_queue,(void))

void Snow_obj::cycle_defer_queue(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_517_cycle_defer_queue)
HXLINE( 519)		int count = ::snow::Snow_obj::defer_queue->length;
HXLINE( 520)		int i = 0;
HXLINE( 521)		while((i < count)){
HXLINE( 522)			::snow::Snow_obj::defer_queue->shift()();
HXLINE( 523)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,cycle_defer_queue,(void))

 ::Dynamic Snow_obj::copy_window_config( ::Dynamic _config){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_532_copy_window_config)
HXLINE( 533)		 ::Dynamic _config1 = _config->__Field(HX_("borderless",45,46,71,17),hx::paccDynamic);
HXLINE( 534)		 ::Dynamic _config2 = _config->__Field(HX_("fullscreen",3b,3a,b4,f9),hx::paccDynamic);
HXLINE( 535)		 ::Dynamic _config3 = _config->__Field(HX_("true_fullscreen",cc,26,f1,d0),hx::paccDynamic);
HXLINE( 536)		 ::Dynamic _config4 = _config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
HXLINE( 537)		 ::Dynamic _config5 = _config->__Field(HX_("no_input",4c,92,80,55),hx::paccDynamic);
HXLINE( 538)		 ::Dynamic _config6 = _config->__Field(HX_("background_sleep",c6,3e,ae,10),hx::paccDynamic);
HXLINE( 539)		 ::Dynamic _config7 = _config->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic);
HXLINE( 532)		return  ::Dynamic(hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("resizable",6b,37,50,a9),_config7)
            			->setFixed(1,HX_("width",06,b6,62,ca), ::Dynamic(_config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)))
            			->setFixed(2,HX_("true_fullscreen",cc,26,f1,d0),_config3)
            			->setFixed(3,HX_("fullscreen",3b,3a,b4,f9),_config2)
            			->setFixed(4,HX_("x",78,00,00,00), ::Dynamic(_config->__Field(HX_("x",78,00,00,00),hx::paccDynamic)))
            			->setFixed(5,HX_("y",79,00,00,00), ::Dynamic(_config->__Field(HX_("y",79,00,00,00),hx::paccDynamic)))
            			->setFixed(6,HX_("height",e7,07,4c,02),_config4)
            			->setFixed(7,HX_("title",98,15,3b,10),(HX_("",00,00,00,00) + _config->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)))
            			->setFixed(8,HX_("background_sleep",c6,3e,ae,10),_config6)
            			->setFixed(9,HX_("borderless",45,46,71,17),_config1)
            			->setFixed(10,HX_("no_input",4c,92,80,55),_config5));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,copy_window_config,return )

 ::Dynamic Snow_obj::copy_render_config( ::Dynamic _config){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_549_copy_render_config)
HXDLIN( 549)		return  ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("stencil",fc,bd,03,80), ::Dynamic(_config->__Field(HX_("stencil",fc,bd,03,80),hx::paccDynamic)))
            			->setFixed(1,HX_("alpha_bits",c7,fa,9f,81), ::Dynamic(_config->__Field(HX_("alpha_bits",c7,fa,9f,81),hx::paccDynamic)))
            			->setFixed(2,HX_("red_bits",f4,d7,46,d0), ::Dynamic(_config->__Field(HX_("red_bits",f4,d7,46,d0),hx::paccDynamic)))
            			->setFixed(3,HX_("depth",03,f1,29,d7), ::Dynamic(_config->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)))
            			->setFixed(4,HX_("default_clear",4f,18,27,0a), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("a",61,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("a",61,00,00,00),hx::paccDynamic)))
            				->setFixed(1,HX_("b",62,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)))
            				->setFixed(2,HX_("g",67,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("g",67,00,00,00),hx::paccDynamic)))
            				->setFixed(3,HX_("r",72,00,00,00), ::Dynamic( ::Dynamic(_config->__Field(HX_("default_clear",4f,18,27,0a),hx::paccDynamic))->__Field(HX_("r",72,00,00,00),hx::paccDynamic)))))
            			->setFixed(5,HX_("opengl",6f,64,94,21), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("profile",29,49,49,f3), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("profile",29,49,49,f3),hx::paccDynamic)))
            				->setFixed(1,HX_("major",39,bd,1b,03), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("major",39,bd,1b,03),hx::paccDynamic)))
            				->setFixed(2,HX_("minor",35,7b,68,08), ::Dynamic( ::Dynamic(_config->__Field(HX_("opengl",6f,64,94,21),hx::paccDynamic))->__Field(HX_("minor",35,7b,68,08),hx::paccDynamic)))))
            			->setFixed(6,HX_("green_bits",42,a5,bf,35), ::Dynamic(_config->__Field(HX_("green_bits",42,a5,bf,35),hx::paccDynamic)))
            			->setFixed(7,HX_("blue_bits",0b,26,35,39), ::Dynamic(_config->__Field(HX_("blue_bits",0b,26,35,39),hx::paccDynamic)))
            			->setFixed(8,HX_("antialiasing",f4,16,b3,48), ::Dynamic(_config->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,copy_render_config,return )

::String Snow_obj::make_uniqueid( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_571_make_uniqueid)
HXLINE( 575)		if (hx::IsNull( val )) {
HXLINE( 577)			val = ::Std_obj::random((int)2147483647);
            		}
HXLINE( 589)		int r = ::Std_obj::_hx_int(( (Float)(hx::Mod(val,62)) ));
HXLINE( 590)		int q = ::Std_obj::_hx_int((( (Float)(val) ) / ( (Float)(62) )));
HXLINE( 592)		if ((q > 0)) {
HXLINE( 592)			::String _hx_tmp = this->make_uniqueid(q);
HXDLIN( 592)			::String _hx_tmp1;
HXDLIN( 592)			if ((r > 9)) {
HXLINE( 592)				int ascii = (65 + (r - 10));
HXDLIN( 592)				if ((ascii > 90)) {
HXLINE( 592)					ascii = (ascii + 6);
            				}
HXDLIN( 592)				_hx_tmp1 = ::String::fromCharCode(ascii);
            			}
            			else {
HXLINE( 592)				_hx_tmp1 = ::Std_obj::string(r).charAt(0);
            			}
HXDLIN( 592)			return (_hx_tmp + _hx_tmp1);
            		}
HXLINE( 594)		::String _hx_tmp2;
HXDLIN( 594)		if ((r > 9)) {
HXLINE( 594)			int ascii1 = (65 + (r - 10));
HXDLIN( 594)			if ((ascii1 > 90)) {
HXLINE( 594)				ascii1 = (ascii1 + 6);
            			}
HXDLIN( 594)			_hx_tmp2 = ::String::fromCharCode(ascii1);
            		}
            		else {
HXLINE( 594)			_hx_tmp2 = ::Std_obj::string(r).charAt(0);
            		}
HXDLIN( 594)		return ::Std_obj::string(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,make_uniqueid,return )

void Snow_obj::next( ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_264_next)
HXDLIN( 264)		if (hx::IsNotNull( func )) {
HXDLIN( 264)			::snow::Snow_obj::next_queue->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,next,(void))

void Snow_obj::defer( ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_272_defer)
HXDLIN( 272)		if (hx::IsNotNull( func )) {
HXDLIN( 272)			::snow::Snow_obj::defer_queue->push(func);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Snow_obj,defer,(void))

Float Snow_obj::get_timestamp(){
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_280_get_timestamp)
HXDLIN( 280)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 280)		return (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Snow_obj,get_timestamp,return )

::Array< ::Dynamic> Snow_obj::next_queue;

::Array< ::Dynamic> Snow_obj::defer_queue;


hx::ObjectPtr< Snow_obj > Snow_obj::__new( ::Main _host) {
	hx::ObjectPtr< Snow_obj > __this = new Snow_obj();
	__this->__construct(_host);
	return __this;
}

hx::ObjectPtr< Snow_obj > Snow_obj::__alloc(hx::Ctx *_hx_ctx, ::Main _host) {
	Snow_obj *__this = (Snow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Snow_obj), true, "snow.Snow"));
	*(void **)__this = Snow_obj::_hx_vtable;
	__this->__construct(_host);
	return __this;
}

Snow_obj::Snow_obj()
{
}

void Snow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Snow);
	HX_MARK_MEMBER_NAME(host,"host");
	HX_MARK_MEMBER_NAME(config,"config");
	HX_MARK_MEMBER_NAME(freeze,"freeze");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(runtime,"runtime");
	HX_MARK_MEMBER_NAME(io,"io");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(audio,"audio");
	HX_MARK_MEMBER_NAME(assets,"assets");
	HX_MARK_MEMBER_NAME(platform,"platform");
	HX_MARK_MEMBER_NAME(os,"os");
	HX_MARK_MEMBER_NAME(debug,"debug");
	HX_MARK_MEMBER_NAME(shutting_down,"shutting_down");
	HX_MARK_MEMBER_NAME(has_shutdown,"has_shutdown");
	HX_MARK_MEMBER_NAME(extensions,"extensions");
	HX_MARK_MEMBER_NAME(sys_event,"sys_event");
	HX_MARK_MEMBER_NAME(win_event,"win_event");
	HX_MARK_MEMBER_NAME(immediate_shutdown,"immediate_shutdown");
	HX_MARK_MEMBER_NAME(window_in_background,"window_in_background");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(had_ready_event,"had_ready_event");
	HX_MARK_END_CLASS();
}

void Snow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(host,"host");
	HX_VISIT_MEMBER_NAME(config,"config");
	HX_VISIT_MEMBER_NAME(freeze,"freeze");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(runtime,"runtime");
	HX_VISIT_MEMBER_NAME(io,"io");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(audio,"audio");
	HX_VISIT_MEMBER_NAME(assets,"assets");
	HX_VISIT_MEMBER_NAME(platform,"platform");
	HX_VISIT_MEMBER_NAME(os,"os");
	HX_VISIT_MEMBER_NAME(debug,"debug");
	HX_VISIT_MEMBER_NAME(shutting_down,"shutting_down");
	HX_VISIT_MEMBER_NAME(has_shutdown,"has_shutdown");
	HX_VISIT_MEMBER_NAME(extensions,"extensions");
	HX_VISIT_MEMBER_NAME(sys_event,"sys_event");
	HX_VISIT_MEMBER_NAME(win_event,"win_event");
	HX_VISIT_MEMBER_NAME(immediate_shutdown,"immediate_shutdown");
	HX_VISIT_MEMBER_NAME(window_in_background,"window_in_background");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(had_ready_event,"had_ready_event");
}

hx::Val Snow_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"io") ) { return hx::Val( io ); }
		if (HX_FIELD_EQ(inName,"os") ) { return hx::Val( os ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"host") ) { return hx::Val( host ); }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_time() ); }
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"audio") ) { return hx::Val( audio ); }
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { return hx::Val( config ); }
		if (HX_FIELD_EQ(inName,"freeze") ) { return hx::Val( freeze ); }
		if (HX_FIELD_EQ(inName,"assets") ) { return hx::Val( assets ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"runtime") ) { return hx::Val( runtime ); }
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniqueid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_uniqueid() ); }
		if (HX_FIELD_EQ(inName,"platform") ) { return hx::Val( platform ); }
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_time") ) { return hx::Val( get_time_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sys_event") ) { return hx::Val( sys_event ); }
		if (HX_FIELD_EQ(inName,"win_event") ) { return hx::Val( win_event ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"extensions") ) { return hx::Val( extensions ); }
		if (HX_FIELD_EQ(inName,"set_freeze") ) { return hx::Val( set_freeze_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"has_shutdown") ) { return hx::Val( has_shutdown ); }
		if (HX_FIELD_EQ(inName,"get_uniqueid") ) { return hx::Val( get_uniqueid_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shutting_down") ) { return hx::Val( shutting_down ); }
		if (HX_FIELD_EQ(inName,"on_tick_event") ) { return hx::Val( on_tick_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"setup_configs") ) { return hx::Val( setup_configs_dyn() ); }
		if (HX_FIELD_EQ(inName,"make_uniqueid") ) { return hx::Val( make_uniqueid_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatch_event") ) { return hx::Val( dispatch_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"on_ready_event") ) { return hx::Val( on_ready_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"default_config") ) { return hx::Val( default_config_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"had_ready_event") ) { return hx::Val( had_ready_event ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cycle_next_queue") ) { return hx::Val( cycle_next_queue_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setup_host_config") ) { return hx::Val( setup_host_config_dyn() ); }
		if (HX_FIELD_EQ(inName,"cycle_defer_queue") ) { return hx::Val( cycle_defer_queue_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"immediate_shutdown") ) { return hx::Val( immediate_shutdown ); }
		if (HX_FIELD_EQ(inName,"copy_window_config") ) { return hx::Val( copy_window_config_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy_render_config") ) { return hx::Val( copy_render_config_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"default_user_config") ) { return hx::Val( default_user_config_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"window_in_background") ) { return hx::Val( window_in_background ); }
		if (HX_FIELD_EQ(inName,"dispatch_input_event") ) { return hx::Val( dispatch_input_event_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"dispatch_window_event") ) { return hx::Val( dispatch_window_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"default_render_config") ) { return hx::Val( default_render_config_dyn() ); }
		if (HX_FIELD_EQ(inName,"default_window_config") ) { return hx::Val( default_window_config_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Snow_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"defer") ) { outValue = defer_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_timestamp() ); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"next_queue") ) { outValue = ( next_queue ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defer_queue") ) { outValue = ( defer_queue ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_timestamp") ) { outValue = get_timestamp_dyn(); return true; }
	}
	return false;
}

hx::Val Snow_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"io") ) { io=inValue.Cast<  ::snow::systems::io::IO >(); return inValue; }
		if (HX_FIELD_EQ(inName,"os") ) { os=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"host") ) { host=inValue.Cast<  ::Main >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::snow::systems::input::Input >(); return inValue; }
		if (HX_FIELD_EQ(inName,"audio") ) { audio=inValue.Cast<  ::snow::systems::audio::Audio >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debug") ) { debug=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { config=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"freeze") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_freeze(inValue.Cast< bool >()) );freeze=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"assets") ) { assets=inValue.Cast<  ::snow::systems::assets::Assets >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"runtime") ) { runtime=inValue.Cast<  ::snow::modules::sdl::Runtime >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"platform") ) { platform=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sys_event") ) { sys_event=inValue.Cast<  ::snow::types::SystemEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"win_event") ) { win_event=inValue.Cast<  ::snow::types::WindowEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"extensions") ) { extensions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"has_shutdown") ) { has_shutdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shutting_down") ) { shutting_down=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"had_ready_event") ) { had_ready_event=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"immediate_shutdown") ) { immediate_shutdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"window_in_background") ) { window_in_background=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Snow_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"next_queue") ) { next_queue=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defer_queue") ) { defer_queue=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Snow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("host",68,cf,12,45));
	outFields->push(HX_("config",c2,56,d2,c7));
	outFields->push(HX_("freeze",57,8a,24,af));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("uniqueid",2c,95,aa,5b));
	outFields->push(HX_("runtime",d8,b4,60,ef));
	outFields->push(HX_("io",e6,5b,00,00));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("audio",d6,78,80,27));
	outFields->push(HX_("assets",83,48,03,4c));
	outFields->push(HX_("platform",b3,b2,f9,67));
	outFields->push(HX_("os",24,61,00,00));
	outFields->push(HX_("debug",53,52,1f,d7));
	outFields->push(HX_("shutting_down",df,e7,30,20));
	outFields->push(HX_("has_shutdown",5b,f9,20,9e));
	outFields->push(HX_("extensions",14,7c,70,89));
	outFields->push(HX_("sys_event",28,84,1a,eb));
	outFields->push(HX_("win_event",77,b4,cd,d3));
	outFields->push(HX_("immediate_shutdown",e4,59,91,69));
	outFields->push(HX_("window_in_background",79,7d,5b,6b));
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("had_ready_event",ca,cd,0b,8e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Snow_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Main*/ ,(int)offsetof(Snow_obj,host),HX_("host",68,cf,12,45)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Snow_obj,config),HX_("config",c2,56,d2,c7)},
	{hx::fsBool,(int)offsetof(Snow_obj,freeze),HX_("freeze",57,8a,24,af)},
	{hx::fsBool,(int)offsetof(Snow_obj,ready),HX_("ready",63,a0,ba,e6)},
	{hx::fsObject /*::snow::modules::sdl::Runtime*/ ,(int)offsetof(Snow_obj,runtime),HX_("runtime",d8,b4,60,ef)},
	{hx::fsObject /*::snow::systems::io::IO*/ ,(int)offsetof(Snow_obj,io),HX_("io",e6,5b,00,00)},
	{hx::fsObject /*::snow::systems::input::Input*/ ,(int)offsetof(Snow_obj,input),HX_("input",0a,c4,1d,be)},
	{hx::fsObject /*::snow::systems::audio::Audio*/ ,(int)offsetof(Snow_obj,audio),HX_("audio",d6,78,80,27)},
	{hx::fsObject /*::snow::systems::assets::Assets*/ ,(int)offsetof(Snow_obj,assets),HX_("assets",83,48,03,4c)},
	{hx::fsString,(int)offsetof(Snow_obj,platform),HX_("platform",b3,b2,f9,67)},
	{hx::fsString,(int)offsetof(Snow_obj,os),HX_("os",24,61,00,00)},
	{hx::fsBool,(int)offsetof(Snow_obj,debug),HX_("debug",53,52,1f,d7)},
	{hx::fsBool,(int)offsetof(Snow_obj,shutting_down),HX_("shutting_down",df,e7,30,20)},
	{hx::fsBool,(int)offsetof(Snow_obj,has_shutdown),HX_("has_shutdown",5b,f9,20,9e)},
	{hx::fsObject /*Array< ::snow::core::Extension >*/ ,(int)offsetof(Snow_obj,extensions),HX_("extensions",14,7c,70,89)},
	{hx::fsObject /*::snow::types::SystemEvent*/ ,(int)offsetof(Snow_obj,sys_event),HX_("sys_event",28,84,1a,eb)},
	{hx::fsObject /*::snow::types::WindowEvent*/ ,(int)offsetof(Snow_obj,win_event),HX_("win_event",77,b4,cd,d3)},
	{hx::fsBool,(int)offsetof(Snow_obj,immediate_shutdown),HX_("immediate_shutdown",e4,59,91,69)},
	{hx::fsBool,(int)offsetof(Snow_obj,window_in_background),HX_("window_in_background",79,7d,5b,6b)},
	{hx::fsInt,(int)offsetof(Snow_obj,i),HX_("i",69,00,00,00)},
	{hx::fsBool,(int)offsetof(Snow_obj,had_ready_event),HX_("had_ready_event",ca,cd,0b,8e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Snow_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Snow_obj::next_queue,HX_("next_queue",05,12,6f,da)},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Snow_obj::defer_queue,HX_("defer_queue",c4,c3,ba,af)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Snow_obj_sMemberFields[] = {
	HX_("host",68,cf,12,45),
	HX_("config",c2,56,d2,c7),
	HX_("freeze",57,8a,24,af),
	HX_("ready",63,a0,ba,e6),
	HX_("runtime",d8,b4,60,ef),
	HX_("io",e6,5b,00,00),
	HX_("input",0a,c4,1d,be),
	HX_("audio",d6,78,80,27),
	HX_("assets",83,48,03,4c),
	HX_("platform",b3,b2,f9,67),
	HX_("os",24,61,00,00),
	HX_("debug",53,52,1f,d7),
	HX_("shutting_down",df,e7,30,20),
	HX_("has_shutdown",5b,f9,20,9e),
	HX_("extensions",14,7c,70,89),
	HX_("sys_event",28,84,1a,eb),
	HX_("win_event",77,b4,cd,d3),
	HX_("immediate_shutdown",e4,59,91,69),
	HX_("shutdown",96,fc,0b,6b),
	HX_("dispatch_event",95,a5,76,78),
	HX_("window_in_background",79,7d,5b,6b),
	HX_("dispatch_window_event",30,cf,b8,31),
	HX_("dispatch_input_event",a0,22,11,d2),
	HX_("i",69,00,00,00),
	HX_("onevent",9b,f6,d4,78),
	HX_("get_time",96,87,b7,cc),
	HX_("get_uniqueid",35,49,c4,10),
	HX_("had_ready_event",ca,cd,0b,8e),
	HX_("on_ready_event",9e,5d,d2,66),
	HX_("on_tick_event",d8,88,aa,e9),
	HX_("setup_configs",6f,e0,5f,20),
	HX_("setup_host_config",f7,79,40,6d),
	HX_("default_user_config",b8,a9,69,49),
	HX_("default_config",c0,99,38,98),
	HX_("default_render_config",8d,ec,b8,ce),
	HX_("default_window_config",33,6b,e3,8d),
	HX_("set_freeze",94,98,29,a3),
	HX_("step",4c,e7,5b,4c),
	HX_("cycle_next_queue",3e,b8,49,c6),
	HX_("cycle_defer_queue",6b,8f,31,23),
	HX_("copy_window_config",27,11,c0,d6),
	HX_("copy_render_config",81,92,95,17),
	HX_("make_uniqueid",dd,a4,16,fa),
	::String(null()) };

static void Snow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Snow_obj::next_queue,"next_queue");
	HX_MARK_MEMBER_NAME(Snow_obj::defer_queue,"defer_queue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Snow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Snow_obj::next_queue,"next_queue");
	HX_VISIT_MEMBER_NAME(Snow_obj::defer_queue,"defer_queue");
};

#endif

hx::Class Snow_obj::__mClass;

static ::String Snow_obj_sStaticFields[] = {
	HX_("next",f3,84,02,49),
	HX_("defer",72,4d,22,d7),
	HX_("get_timestamp",ad,a8,32,67),
	HX_("next_queue",05,12,6f,da),
	HX_("defer_queue",c4,c3,ba,af),
	::String(null())
};

void Snow_obj::__register()
{
	Snow_obj _hx_dummy;
	Snow_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.Snow",6e,e0,04,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Snow_obj::__GetStatic;
	__mClass->mSetStaticField = &Snow_obj::__SetStatic;
	__mClass->mMarkFunc = Snow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Snow_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Snow_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Snow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Snow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Snow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Snow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Snow_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_503_boot)
HXDLIN( 503)		next_queue = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b50558b03164cec3_504_boot)
HXDLIN( 504)		defer_queue = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace snow
