// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_opengl__WebGL_GLBuffer_Impl_
#include <opengl/_WebGL/GLBuffer_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1000__new,"opengl._WebGL.GLBuffer_Impl_","_new",0x7b0a8b15,"opengl._WebGL.GLBuffer_Impl_._new","opengl/WebGL.hx",1000,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1001_toInt,"opengl._WebGL.GLBuffer_Impl_","toInt",0x462d4600,"opengl._WebGL.GLBuffer_Impl_.toInt","opengl/WebGL.hx",1001,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1002_fromInt,"opengl._WebGL.GLBuffer_Impl_","fromInt",0xede0f071,"opengl._WebGL.GLBuffer_Impl_.fromInt","opengl/WebGL.hx",1002,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1003_toDynamic,"opengl._WebGL.GLBuffer_Impl_","toDynamic",0xcf533510,"opengl._WebGL.GLBuffer_Impl_.toDynamic","opengl/WebGL.hx",1003,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1004_fromDynamic,"opengl._WebGL.GLBuffer_Impl_","fromDynamic",0xfb6b6c01,"opengl._WebGL.GLBuffer_Impl_.fromDynamic","opengl/WebGL.hx",1004,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe4dc10b112012e_1005_toString,"opengl._WebGL.GLBuffer_Impl_","toString",0xcbd93060,"opengl._WebGL.GLBuffer_Impl_.toString","opengl/WebGL.hx",1005,0x584405a5)
namespace opengl{
namespace _WebGL{

void GLBuffer_Impl__obj::__construct() { }

Dynamic GLBuffer_Impl__obj::__CreateEmpty() { return new GLBuffer_Impl__obj; }

void *GLBuffer_Impl__obj::_hx_vtable = 0;

Dynamic GLBuffer_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBuffer_Impl__obj > _hx_result = new GLBuffer_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLBuffer_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f2be12e;
}

 ::opengl::GLObject GLBuffer_Impl__obj::_new(int _id){
            	HX_GC_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1000__new)
HXDLIN(1000)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN(1000)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,_new,return )

int GLBuffer_Impl__obj::toInt( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1001_toInt)
HXDLIN(1001)		if (hx::IsNull( this1 )) {
HXDLIN(1001)			return 0;
            		}
            		else {
HXDLIN(1001)			return this1->id;
            		}
HXDLIN(1001)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,toInt,return )

 ::opengl::GLObject GLBuffer_Impl__obj::fromInt(int _id){
            	HX_GC_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1002_fromInt)
HXDLIN(1002)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN(1002)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,fromInt,return )

 ::Dynamic GLBuffer_Impl__obj::toDynamic( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1003_toDynamic)
HXDLIN(1003)		if (hx::IsNull( this1 )) {
HXDLIN(1003)			return 0;
            		}
            		else {
HXDLIN(1003)			return this1->id;
            		}
HXDLIN(1003)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,toDynamic,return )

 ::opengl::GLObject GLBuffer_Impl__obj::fromDynamic( ::Dynamic _id){
            	HX_GC_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1004_fromDynamic)
HXDLIN(1004)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,( (int)(_id) ));
HXDLIN(1004)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,fromDynamic,return )

::String GLBuffer_Impl__obj::toString( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_cfe4dc10b112012e_1005_toString)
HXDLIN(1005)		int _hx_tmp;
HXDLIN(1005)		if (hx::IsNull( this1 )) {
HXDLIN(1005)			_hx_tmp = 0;
            		}
            		else {
HXDLIN(1005)			_hx_tmp = this1->id;
            		}
HXDLIN(1005)		return ((HX_("GLBuffer(",83,cb,cf,fa) + _hx_tmp) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLBuffer_Impl__obj,toString,return )


GLBuffer_Impl__obj::GLBuffer_Impl__obj()
{
}

bool GLBuffer_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toDynamic") ) { outValue = toDynamic_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromDynamic") ) { outValue = fromDynamic_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *GLBuffer_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLBuffer_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class GLBuffer_Impl__obj::__mClass;

static ::String GLBuffer_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("toInt",34,be,11,14),
	HX_("fromInt",a5,dd,fa,57),
	HX_("toDynamic",44,d7,a9,65),
	HX_("fromDynamic",35,03,56,ce),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void GLBuffer_Impl__obj::__register()
{
	GLBuffer_Impl__obj _hx_dummy;
	GLBuffer_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("opengl._WebGL.GLBuffer_Impl_",3a,c7,84,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLBuffer_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLBuffer_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLBuffer_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBuffer_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBuffer_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace opengl
} // end namespace _WebGL
