// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_577daa3449b623a4_987_new,"opengl.GLObject","new",0x4325fd15,"opengl.GLObject.new","opengl/WebGL.hx",987,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_577daa3449b623a4_993_toString,"opengl.GLObject","toString",0x8ed573d7,"opengl.GLObject.toString","opengl/WebGL.hx",993,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_577daa3449b623a4_994_get_invalidated,"opengl.GLObject","get_invalidated",0x1b0ad255,"opengl.GLObject.get_invalidated","opengl/WebGL.hx",994,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_577daa3449b623a4_995_set_invalidated,"opengl.GLObject","set_invalidated",0x16d64f61,"opengl.GLObject.set_invalidated","opengl/WebGL.hx",995,0x584405a5)
namespace opengl{

void GLObject_obj::__construct(int _id){
            	HX_STACKFRAME(&_hx_pos_577daa3449b623a4_987_new)
HXLINE( 989)		this->id = 0;
HXLINE( 992)		this->id = _id;
            	}

Dynamic GLObject_obj::__CreateEmpty() { return new GLObject_obj; }

void *GLObject_obj::_hx_vtable = 0;

Dynamic GLObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLObject_obj > _hx_result = new GLObject_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GLObject_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26e9bb17;
}

::String GLObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_577daa3449b623a4_993_toString)
HXDLIN( 993)		return ((HX_("GLObject(",e4,90,8e,cb) + this->id) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLObject_obj,toString,return )

bool GLObject_obj::get_invalidated(){
            	HX_STACKFRAME(&_hx_pos_577daa3449b623a4_994_get_invalidated)
HXDLIN( 994)		return (this->id == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLObject_obj,get_invalidated,return )

bool GLObject_obj::set_invalidated(bool value){
            	HX_STACKFRAME(&_hx_pos_577daa3449b623a4_995_set_invalidated)
HXDLIN( 995)		this->id = 0;
HXDLIN( 995)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLObject_obj,set_invalidated,return )


GLObject_obj::GLObject_obj()
{
}

hx::Val GLObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidated") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_invalidated() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_invalidated") ) { return hx::Val( get_invalidated_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_invalidated") ) { return hx::Val( set_invalidated_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidated") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_invalidated(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("invalidated",89,32,ac,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo GLObject_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(GLObject_obj,id),HX_("id",db,5b,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLObject_obj_sStaticStorageInfo = 0;
#endif

static ::String GLObject_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("toString",ac,d0,6e,38),
	HX_("get_invalidated",20,ea,8d,7e),
	HX_("set_invalidated",2c,67,59,7a),
	::String(null()) };

hx::Class GLObject_obj::__mClass;

void GLObject_obj::__register()
{
	GLObject_obj _hx_dummy;
	GLObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("opengl.GLObject",a3,ce,9a,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLObject_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace opengl
