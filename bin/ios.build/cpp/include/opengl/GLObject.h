// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_opengl_GLObject
#define INCLUDED_opengl_GLObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_577daa3449b623a4_987_new)
HX_DECLARE_CLASS1(opengl,GLObject)

namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GLObject_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLObject_obj OBJ_;
		GLObject_obj();

	public:
		enum { _hx_ClassId = 0x26e9bb17 };

		void __construct(int _id);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="opengl.GLObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"opengl.GLObject"); }

		hx::ObjectPtr< GLObject_obj > __new(int _id) {
			hx::ObjectPtr< GLObject_obj > __this = new GLObject_obj();
			__this->__construct(_id);
			return __this;
		}

		static hx::ObjectPtr< GLObject_obj > __alloc(hx::Ctx *_hx_ctx,int _id) {
			GLObject_obj *__this = (GLObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLObject_obj), false, "opengl.GLObject"));
			*(void **)__this = GLObject_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_577daa3449b623a4_987_new)
HXLINE( 989)		( ( ::opengl::GLObject)(__this) )->id = 0;
HXLINE( 992)		( ( ::opengl::GLObject)(__this) )->id = _id;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GLObject",c4,da,30,7f); }

		int id;
		virtual ::String toString();
		::Dynamic toString_dyn();

		bool get_invalidated();
		::Dynamic get_invalidated_dyn();

		bool set_invalidated(bool value);
		::Dynamic set_invalidated_dyn();

};

} // end namespace opengl

#endif /* INCLUDED_opengl_GLObject */ 
