// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_result_InjectOtherRuleResult
#define INCLUDED_minject_result_InjectOtherRuleResult

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_minject_result_InjectionResult
#include <minject/result/InjectionResult.h>
#endif
HX_DECLARE_CLASS1(minject,InjectionConfig)
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(minject,result,InjectOtherRuleResult)
HX_DECLARE_CLASS2(minject,result,InjectionResult)

namespace minject{
namespace result{


class HXCPP_CLASS_ATTRIBUTES InjectOtherRuleResult_obj : public  ::minject::result::InjectionResult_obj
{
	public:
		typedef  ::minject::result::InjectionResult_obj super;
		typedef InjectOtherRuleResult_obj OBJ_;
		InjectOtherRuleResult_obj();

	public:
		enum { _hx_ClassId = 0x4d38c1e1 };

		void __construct( ::minject::InjectionConfig rule);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="minject.result.InjectOtherRuleResult")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"minject.result.InjectOtherRuleResult"); }
		static hx::ObjectPtr< InjectOtherRuleResult_obj > __new( ::minject::InjectionConfig rule);
		static hx::ObjectPtr< InjectOtherRuleResult_obj > __alloc(hx::Ctx *_hx_ctx, ::minject::InjectionConfig rule);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InjectOtherRuleResult_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InjectOtherRuleResult",38,c2,90,08); }

		 ::minject::InjectionConfig rule;
		 ::Dynamic getResponse( ::minject::Injector injector);

		virtual ::String toString();

};

} // end namespace minject
} // end namespace result

#endif /* INCLUDED_minject_result_InjectOtherRuleResult */ 
