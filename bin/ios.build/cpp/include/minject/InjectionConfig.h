// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_InjectionConfig
#define INCLUDED_minject_InjectionConfig

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(minject,InjectionConfig)
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(minject,result,InjectionResult)

namespace minject{


class HXCPP_CLASS_ATTRIBUTES InjectionConfig_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef InjectionConfig_obj OBJ_;
		InjectionConfig_obj();

	public:
		enum { _hx_ClassId = 0x6948d69b };

		void __construct(hx::Class request,::String injectionName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="minject.InjectionConfig")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"minject.InjectionConfig"); }
		static hx::ObjectPtr< InjectionConfig_obj > __new(hx::Class request,::String injectionName);
		static hx::ObjectPtr< InjectionConfig_obj > __alloc(hx::Ctx *_hx_ctx,hx::Class request,::String injectionName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InjectionConfig_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InjectionConfig",d9,c1,b9,18); }

		hx::Class request;
		::String injectionName;
		 ::minject::Injector injector;
		 ::minject::result::InjectionResult result;
		 ::Dynamic getResponse( ::minject::Injector injector);
		::Dynamic getResponse_dyn();

		bool hasResponse( ::minject::Injector injector);
		::Dynamic hasResponse_dyn();

		bool hasOwnResponse();
		::Dynamic hasOwnResponse_dyn();

		void setResult( ::minject::result::InjectionResult result);
		::Dynamic setResult_dyn();

		void setInjector( ::minject::Injector injector);
		::Dynamic setInjector_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace minject

#endif /* INCLUDED_minject_InjectionConfig */ 
