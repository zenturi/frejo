// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_Reflector
#define INCLUDED_minject_Reflector

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(minject,Reflector)

namespace minject{


class HXCPP_CLASS_ATTRIBUTES Reflector_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Reflector_obj OBJ_;
		Reflector_obj();

	public:
		enum { _hx_ClassId = 0x72d745c2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="minject.Reflector")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"minject.Reflector"); }
		static hx::ObjectPtr< Reflector_obj > __new();
		static hx::ObjectPtr< Reflector_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Reflector_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Reflector",80,0e,94,4b); }

		bool classExtendsOrImplements( ::Dynamic classOrClassName,hx::Class superClass);
		::Dynamic classExtendsOrImplements_dyn();

		::String getFQCN( ::Dynamic value);
		::Dynamic getFQCN_dyn();

};

} // end namespace minject

#endif /* INCLUDED_minject_Reflector */ 
