// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_point_ConstructorInjectionPoint
#define INCLUDED_minject_point_ConstructorInjectionPoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_minject_point_MethodInjectionPoint
#include <minject/point/MethodInjectionPoint.h>
#endif
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(minject,point,ConstructorInjectionPoint)
HX_DECLARE_CLASS2(minject,point,InjectionPoint)
HX_DECLARE_CLASS2(minject,point,MethodInjectionPoint)

namespace minject{
namespace point{


class HXCPP_CLASS_ATTRIBUTES ConstructorInjectionPoint_obj : public  ::minject::point::MethodInjectionPoint_obj
{
	public:
		typedef  ::minject::point::MethodInjectionPoint_obj super;
		typedef ConstructorInjectionPoint_obj OBJ_;
		ConstructorInjectionPoint_obj();

	public:
		enum { _hx_ClassId = 0x58ca1b61 };

		void __construct(::Array< ::Dynamic> args);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="minject.point.ConstructorInjectionPoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"minject.point.ConstructorInjectionPoint"); }
		static hx::ObjectPtr< ConstructorInjectionPoint_obj > __new(::Array< ::Dynamic> args);
		static hx::ObjectPtr< ConstructorInjectionPoint_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> args);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConstructorInjectionPoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ConstructorInjectionPoint",73,47,a1,b4); }

		 ::Dynamic applyInjection( ::Dynamic target, ::minject::Injector injector);

};

} // end namespace minject
} // end namespace point

#endif /* INCLUDED_minject_point_ConstructorInjectionPoint */ 
