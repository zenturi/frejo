// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_minject_InjecteeDescription
#define INCLUDED_minject_InjecteeDescription

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(minject,InjecteeDescription)
HX_DECLARE_CLASS2(minject,point,InjectionPoint)

namespace minject{


class HXCPP_CLASS_ATTRIBUTES InjecteeDescription_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef InjecteeDescription_obj OBJ_;
		InjecteeDescription_obj();

	public:
		enum { _hx_ClassId = 0x4d5c45b5 };

		void __construct(::Dynamic ctor,::Array< ::Dynamic> injectionPoints);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="minject.InjecteeDescription")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"minject.InjecteeDescription"); }
		static hx::ObjectPtr< InjecteeDescription_obj > __new(::Dynamic ctor,::Array< ::Dynamic> injectionPoints);
		static hx::ObjectPtr< InjecteeDescription_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic ctor,::Array< ::Dynamic> injectionPoints);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InjecteeDescription_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InjecteeDescription",2b,8b,40,b3); }

		::Dynamic ctor;
		::Array< ::Dynamic> injectionPoints;
};

} // end namespace minject

#endif /* INCLUDED_minject_InjecteeDescription */ 
