// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_haxe_rtti_XmlParser
#define INCLUDED_haxe_rtti_XmlParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(haxe,rtti,CType)
HX_DECLARE_CLASS2(haxe,rtti,Rights)
HX_DECLARE_CLASS2(haxe,rtti,TypeTree)
HX_DECLARE_CLASS2(haxe,rtti,XmlParser)

namespace haxe{
namespace rtti{


class HXCPP_CLASS_ATTRIBUTES XmlParser_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef XmlParser_obj OBJ_;
		XmlParser_obj();

	public:
		enum { _hx_ClassId = 0x31dccf71 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.rtti.XmlParser")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxe.rtti.XmlParser"); }
		static hx::ObjectPtr< XmlParser_obj > __new();
		static hx::ObjectPtr< XmlParser_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~XmlParser_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("XmlParser",f6,d9,a1,8a); }

		::Array< ::Dynamic> root;
		::String curplatform;
		::String mkPath(::String p);
		::Dynamic mkPath_dyn();

		::Array< ::String > mkTypeParams(::String p);
		::Dynamic mkTypeParams_dyn();

		 ::haxe::rtti::Rights mkRights(::String r);
		::Dynamic mkRights_dyn();

		 ::Dynamic xerror( ::Xml c);
		::Dynamic xerror_dyn();

		 ::haxe::rtti::TypeTree processElement( ::Xml x);
		::Dynamic processElement_dyn();

		::Array< ::Dynamic> xmeta( ::Xml x);
		::Dynamic xmeta_dyn();

		::Array< ::Dynamic> xoverloads( ::Xml x);
		::Dynamic xoverloads_dyn();

		 ::Dynamic xpath( ::Xml x);
		::Dynamic xpath_dyn();

		 ::Dynamic xclass( ::Xml x);
		::Dynamic xclass_dyn();

		 ::Dynamic xclassfield( ::Xml x, ::Dynamic defPublic);
		::Dynamic xclassfield_dyn();

		 ::Dynamic xenum( ::Xml x);
		::Dynamic xenum_dyn();

		 ::Dynamic xenumfield( ::Xml x);
		::Dynamic xenumfield_dyn();

		 ::Dynamic xabstract( ::Xml x);
		::Dynamic xabstract_dyn();

		 ::Dynamic xtypedef( ::Xml x);
		::Dynamic xtypedef_dyn();

		 ::haxe::rtti::CType xtype( ::Xml x);
		::Dynamic xtype_dyn();

		::Array< ::Dynamic> xtypeparams( ::Xml x);
		::Dynamic xtypeparams_dyn();

		::Array< ::String > defplat();
		::Dynamic defplat_dyn();

};

} // end namespace haxe
} // end namespace rtti

#endif /* INCLUDED_haxe_rtti_XmlParser */ 
