// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_haxe_rtti_Rtti
#define INCLUDED_haxe_rtti_Rtti

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,rtti,Rtti)

namespace haxe{
namespace rtti{


class HXCPP_CLASS_ATTRIBUTES Rtti_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Rtti_obj OBJ_;
		Rtti_obj();

	public:
		enum { _hx_ClassId = 0x390ed574 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.rtti.Rtti")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe.rtti.Rtti"); }

		hx::ObjectPtr< Rtti_obj > __new() {
			hx::ObjectPtr< Rtti_obj > __this = new Rtti_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Rtti_obj > __alloc(hx::Ctx *_hx_ctx) {
			Rtti_obj *__this = (Rtti_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rtti_obj), false, "haxe.rtti.Rtti"));
			*(void **)__this = Rtti_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rtti_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rtti",d7,e9,8b,36); }

		static  ::Dynamic getRtti(hx::Class c);
		static ::Dynamic getRtti_dyn();

};

} // end namespace haxe
} // end namespace rtti

#endif /* INCLUDED_haxe_rtti_Rtti */ 
