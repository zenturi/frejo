// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_hxcpp_StaticRegexp
#define INCLUDED_hxcpp_StaticRegexp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(hxcpp,StaticRegexp)

namespace hxcpp{


class HXCPP_CLASS_ATTRIBUTES StaticRegexp_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef StaticRegexp_obj OBJ_;
		StaticRegexp_obj();

	public:
		enum { _hx_ClassId = 0x738bb14a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxcpp.StaticRegexp")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"hxcpp.StaticRegexp"); }

		hx::ObjectPtr< StaticRegexp_obj > __new() {
			hx::ObjectPtr< StaticRegexp_obj > __this = new StaticRegexp_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< StaticRegexp_obj > __alloc(hx::Ctx *_hx_ctx) {
			StaticRegexp_obj *__this = (StaticRegexp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StaticRegexp_obj), false, "hxcpp.StaticRegexp"));
			*(void **)__this = StaticRegexp_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~StaticRegexp_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("StaticRegexp",37,13,10,e7); }

};

} // end namespace hxcpp

#endif /* INCLUDED_hxcpp_StaticRegexp */ 
