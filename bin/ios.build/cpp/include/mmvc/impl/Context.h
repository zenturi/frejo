// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_impl_Context
#define INCLUDED_mmvc_impl_Context

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_api_IContext
#include <mmvc/api/IContext.h>
#endif
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS1(minject,Reflector)
HX_DECLARE_CLASS2(mmvc,api,ICommandMap)
HX_DECLARE_CLASS2(mmvc,api,IContext)
HX_DECLARE_CLASS2(mmvc,api,IMediatorMap)
HX_DECLARE_CLASS2(mmvc,api,ITriggerMap)
HX_DECLARE_CLASS2(mmvc,api,IViewContainer)
HX_DECLARE_CLASS2(mmvc,api,IViewMap)
HX_DECLARE_CLASS2(mmvc,impl,Context)

namespace mmvc{
namespace impl{


class HXCPP_CLASS_ATTRIBUTES Context_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Context_obj OBJ_;
		Context_obj();

	public:
		enum { _hx_ClassId = 0x7fe6fb86 };

		void __construct(::Dynamic contextView, ::Dynamic __o_autoStartup);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.impl.Context")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.impl.Context"); }
		static hx::ObjectPtr< Context_obj > __new(::Dynamic contextView, ::Dynamic __o_autoStartup);
		static hx::ObjectPtr< Context_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::Dynamic __o_autoStartup);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Context_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Context",cf,bd,c8,e6); }

		bool autoStartup;
		::Dynamic contextView;
		::Dynamic commandMap;
		 ::minject::Injector injector;
		::Dynamic mediatorMap;
		 ::minject::Reflector reflector;
		::Dynamic viewMap;
		::Dynamic triggerMap;
		virtual void startup();
		::Dynamic startup_dyn();

		::Dynamic set_contextView(::Dynamic value);
		::Dynamic set_contextView_dyn();

		 ::minject::Injector get_injector();
		::Dynamic get_injector_dyn();

		 ::minject::Reflector get_reflector();
		::Dynamic get_reflector_dyn();

		::Dynamic get_commandMap();
		::Dynamic get_commandMap_dyn();

		::Dynamic get_mediatorMap();
		::Dynamic get_mediatorMap_dyn();

		::Dynamic get_viewMap();
		::Dynamic get_viewMap_dyn();

		::Dynamic get_triggerMap();
		::Dynamic get_triggerMap_dyn();

		void mapInjections();
		::Dynamic mapInjections_dyn();

		void checkAutoStartup();
		::Dynamic checkAutoStartup_dyn();

		 ::minject::Injector createInjector();
		::Dynamic createInjector_dyn();

		 ::minject::Injector createChildInjector();
		::Dynamic createChildInjector_dyn();

};

} // end namespace mmvc
} // end namespace impl

#endif /* INCLUDED_mmvc_impl_Context */ 
