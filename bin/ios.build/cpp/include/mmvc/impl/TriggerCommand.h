// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_impl_TriggerCommand
#define INCLUDED_mmvc_impl_TriggerCommand

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_api_ICommand
#include <mmvc/api/ICommand.h>
#endif
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(mmvc,api,ICommand)
HX_DECLARE_CLASS2(mmvc,api,ICommandMap)
HX_DECLARE_CLASS2(mmvc,api,IMediatorMap)
HX_DECLARE_CLASS2(mmvc,api,ITriggerMap)
HX_DECLARE_CLASS2(mmvc,api,IViewContainer)
HX_DECLARE_CLASS2(mmvc,impl,TriggerCommand)

namespace mmvc{
namespace impl{


class HXCPP_CLASS_ATTRIBUTES TriggerCommand_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TriggerCommand_obj OBJ_;
		TriggerCommand_obj();

	public:
		enum { _hx_ClassId = 0x363cb3c0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.impl.TriggerCommand")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.impl.TriggerCommand"); }
		static hx::ObjectPtr< TriggerCommand_obj > __new();
		static hx::ObjectPtr< TriggerCommand_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TriggerCommand_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("TriggerCommand",13,6f,02,20); }

		static void __boot();
		static  ::Dynamic __meta__;
		::Dynamic contextView;
		::Dynamic commandMap;
		 ::minject::Injector injector;
		::Dynamic mediatorMap;
		::Dynamic triggerMap;
};

} // end namespace mmvc
} // end namespace impl

#endif /* INCLUDED_mmvc_impl_TriggerCommand */ 
