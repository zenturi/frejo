// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_impl_Mediator
#define INCLUDED_mmvc_impl_Mediator

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_base_MediatorBase
#include <mmvc/base/MediatorBase.h>
#endif
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(mmvc,api,IMediator)
HX_DECLARE_CLASS2(mmvc,api,IMediatorMap)
HX_DECLARE_CLASS2(mmvc,api,IViewContainer)
HX_DECLARE_CLASS2(mmvc,base,MediatorBase)
HX_DECLARE_CLASS2(mmvc,impl,Mediator)

namespace mmvc{
namespace impl{


class HXCPP_CLASS_ATTRIBUTES Mediator_obj : public  ::mmvc::base::MediatorBase_obj
{
	public:
		typedef  ::mmvc::base::MediatorBase_obj super;
		typedef Mediator_obj OBJ_;
		Mediator_obj();

	public:
		enum { _hx_ClassId = 0x16419940 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.impl.Mediator")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.impl.Mediator"); }
		static hx::ObjectPtr< Mediator_obj > __new();
		static hx::ObjectPtr< Mediator_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mediator_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Mediator",53,44,5d,4d); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::minject::Injector injector;
		::Dynamic contextView;
		::Dynamic mediatorMap;
};

} // end namespace mmvc
} // end namespace impl

#endif /* INCLUDED_mmvc_impl_Mediator */ 
