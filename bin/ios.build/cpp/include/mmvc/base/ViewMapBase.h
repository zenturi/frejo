// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_base_ViewMapBase
#define INCLUDED_mmvc_base_ViewMapBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(mmvc,api,IViewContainer)
HX_DECLARE_CLASS2(mmvc,base,ViewMapBase)

namespace mmvc{
namespace base{


class HXCPP_CLASS_ATTRIBUTES ViewMapBase_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ViewMapBase_obj OBJ_;
		ViewMapBase_obj();

	public:
		enum { _hx_ClassId = 0x6dcb1a2a };

		void __construct(::Dynamic contextView, ::minject::Injector injector);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.base.ViewMapBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.base.ViewMapBase"); }
		static hx::ObjectPtr< ViewMapBase_obj > __new(::Dynamic contextView, ::minject::Injector injector);
		static hx::ObjectPtr< ViewMapBase_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::minject::Injector injector);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ViewMapBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ViewMapBase",c8,70,52,ec); }

		 ::minject::Injector injector;
		int viewListenerCount;
		::Dynamic contextView;
		bool enabled;
		::Dynamic set_contextView(::Dynamic value);
		::Dynamic set_contextView_dyn();

		bool set_enabled(bool value);
		::Dynamic set_enabled_dyn();

		virtual void addListeners();
		::Dynamic addListeners_dyn();

		virtual void removeListeners();
		::Dynamic removeListeners_dyn();

};

} // end namespace mmvc
} // end namespace base

#endif /* INCLUDED_mmvc_base_ViewMapBase */ 
