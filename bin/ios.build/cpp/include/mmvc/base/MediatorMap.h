// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_base_MediatorMap
#define INCLUDED_mmvc_base_MediatorMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_base_ViewMapBase
#include <mmvc/base/ViewMapBase.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediatorMap
#include <mmvc/api/IMediatorMap.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS1(minject,Reflector)
HX_DECLARE_CLASS2(mmvc,api,IMediator)
HX_DECLARE_CLASS2(mmvc,api,IMediatorMap)
HX_DECLARE_CLASS2(mmvc,api,IViewContainer)
HX_DECLARE_CLASS2(mmvc,base,MappingConfig)
HX_DECLARE_CLASS2(mmvc,base,MediatorMap)
HX_DECLARE_CLASS2(mmvc,base,ViewMapBase)

namespace mmvc{
namespace base{


class HXCPP_CLASS_ATTRIBUTES MediatorMap_obj : public  ::mmvc::base::ViewMapBase_obj
{
	public:
		typedef  ::mmvc::base::ViewMapBase_obj super;
		typedef MediatorMap_obj OBJ_;
		MediatorMap_obj();

	public:
		enum { _hx_ClassId = 0x55d55d6b };

		void __construct(::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.base.MediatorMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.base.MediatorMap"); }
		static hx::ObjectPtr< MediatorMap_obj > __new(::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector);
		static hx::ObjectPtr< MediatorMap_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MediatorMap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("MediatorMap",09,b4,5c,d4); }

		 ::haxe::ds::ObjectMap mediatorByView;
		 ::haxe::ds::ObjectMap mappingConfigByView;
		 ::haxe::ds::StringMap mappingConfigByViewClassName;
		 ::haxe::ds::ObjectMap mediatorsMarkedForRemoval;
		bool hasMediatorsMarkedForRemoval;
		 ::minject::Reflector reflector;
		void mapView( ::Dynamic viewClassOrName,hx::Class mediatorClass, ::Dynamic injectViewAs, ::Dynamic autoCreate, ::Dynamic autoRemove);
		::Dynamic mapView_dyn();

		void unmapView( ::Dynamic viewClassOrName);
		::Dynamic unmapView_dyn();

		::Dynamic createMediator( ::Dynamic viewComponent);
		::Dynamic createMediator_dyn();

		void registerMediator( ::Dynamic viewComponent,::Dynamic mediator);
		::Dynamic registerMediator_dyn();

		::Dynamic removeMediator(::Dynamic mediator);
		::Dynamic removeMediator_dyn();

		::Dynamic removeMediatorByView( ::Dynamic viewComponent);
		::Dynamic removeMediatorByView_dyn();

		::Dynamic retrieveMediator( ::Dynamic viewComponent);
		::Dynamic retrieveMediator_dyn();

		bool hasMapping( ::Dynamic viewClassOrName);
		::Dynamic hasMapping_dyn();

		bool hasMediatorForView( ::Dynamic viewComponent);
		::Dynamic hasMediatorForView_dyn();

		bool hasMediator(::Dynamic mediator);
		::Dynamic hasMediator_dyn();

		void addListeners();

		void removeListeners();

		void onViewAdded( ::Dynamic view);

		void onViewRemoved( ::Dynamic view);

		void removeMediatorLater();
		::Dynamic removeMediatorLater_dyn();

		::Dynamic createMediatorUsing( ::Dynamic viewComponent,::String viewClassName, ::mmvc::base::MappingConfig config);
		::Dynamic createMediatorUsing_dyn();

};

} // end namespace mmvc
} // end namespace base

#endif /* INCLUDED_mmvc_base_MediatorMap */ 
