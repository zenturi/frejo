// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_mmvc_base_TriggerMap
#define INCLUDED_mmvc_base_TriggerMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mmvc_api_ITriggerMap
#include <mmvc/api/ITriggerMap.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(minject,Injector)
HX_DECLARE_CLASS2(mmvc,api,ITriggerMap)
HX_DECLARE_CLASS2(mmvc,base,TriggerMap)

namespace mmvc{
namespace base{


class HXCPP_CLASS_ATTRIBUTES TriggerMap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TriggerMap_obj OBJ_;
		TriggerMap_obj();

	public:
		enum { _hx_ClassId = 0x1213df6e };

		void __construct( ::minject::Injector injector);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mmvc.base.TriggerMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mmvc.base.TriggerMap"); }
		static hx::ObjectPtr< TriggerMap_obj > __new( ::minject::Injector injector);
		static hx::ObjectPtr< TriggerMap_obj > __alloc(hx::Ctx *_hx_ctx, ::minject::Injector injector);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TriggerMap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("TriggerMap",64,84,93,da); }

		 ::minject::Injector injector;
		 ::haxe::ds::StringMap classToCommand;
		 ::haxe::ds::StringMap stringToCommand;
		 ::haxe::ds::EnumValueMap enumValueToCommand;
		 ::haxe::ds::IntMap intToCommand;
		 ::haxe::ds::ObjectMap instanceToCommand;
		void map( ::Dynamic trigger,hx::Class command);
		::Dynamic map_dyn();

		void unmap( ::Dynamic trigger,hx::Class command);
		::Dynamic unmap_dyn();

		void dispatch( ::Dynamic trigger);
		::Dynamic dispatch_dyn();

		void mapClass(hx::Class trigger,hx::Class command);
		::Dynamic mapClass_dyn();

		void unmapClass(hx::Class trigger,hx::Class command);
		::Dynamic unmapClass_dyn();

		void dispatchClass( ::Dynamic trigger);
		::Dynamic dispatchClass_dyn();

		void mapString(::String trigger,hx::Class command);
		::Dynamic mapString_dyn();

		void unmapString(::String trigger,hx::Class command);
		::Dynamic unmapString_dyn();

		void dispatchString(::String trigger);
		::Dynamic dispatchString_dyn();

		void mapEnumValue( ::Dynamic trigger,hx::Class command);
		::Dynamic mapEnumValue_dyn();

		void unmapEnumValue( ::Dynamic trigger,hx::Class command);
		::Dynamic unmapEnumValue_dyn();

		void dispatchEnumValue( ::Dynamic trigger);
		::Dynamic dispatchEnumValue_dyn();

		void mapInt(int trigger,hx::Class command);
		::Dynamic mapInt_dyn();

		void unmapInt(int trigger,hx::Class command);
		::Dynamic unmapInt_dyn();

		void dispatchInt(int trigger);
		::Dynamic dispatchInt_dyn();

		void mapInstance( ::Dynamic trigger,hx::Class command);
		::Dynamic mapInstance_dyn();

		void unmapInstance( ::Dynamic trigger,hx::Class command);
		::Dynamic unmapInstance_dyn();

		void dispatchInstance( ::Dynamic trigger);
		::Dynamic dispatchInstance_dyn();

		void invokeCommand( ::Dynamic trigger,hx::Class triggerClass,hx::Class commandClass);
		::Dynamic invokeCommand_dyn();

		bool isClass( ::Dynamic source);
		::Dynamic isClass_dyn();

		bool isString( ::Dynamic source);
		::Dynamic isString_dyn();

		bool isEnumValue( ::Dynamic source);
		::Dynamic isEnumValue_dyn();

		bool isInt( ::Dynamic source);
		::Dynamic isInt_dyn();

		bool isClassInstance( ::Dynamic source);
		::Dynamic isClassInstance_dyn();

};

} // end namespace mmvc
} // end namespace base

#endif /* INCLUDED_mmvc_base_TriggerMap */ 
