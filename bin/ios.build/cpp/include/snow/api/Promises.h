// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_api_Promises
#define INCLUDED_snow_api_Promises

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,api,Promises)

namespace snow{
namespace api{


class HXCPP_CLASS_ATTRIBUTES Promises_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Promises_obj OBJ_;
		Promises_obj();

	public:
		enum { _hx_ClassId = 0x7fd6b55f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="snow.api.Promises")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"snow.api.Promises"); }

		hx::ObjectPtr< Promises_obj > __new() {
			hx::ObjectPtr< Promises_obj > __this = new Promises_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Promises_obj > __alloc(hx::Ctx *_hx_ctx) {
			Promises_obj *__this = (Promises_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Promises_obj), false, "snow.api.Promises"));
			*(void **)__this = Promises_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Promises_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Promises",98,d6,5b,ce); }

		static void __boot();
		static ::cpp::VirtualArray calls;
		static ::Array< ::Dynamic> defers;
		static void step();
		static ::Dynamic step_dyn();

		static void next();
		static ::Dynamic next_dyn();

		static void defer( ::Dynamic f, ::Dynamic a);
		static ::Dynamic defer_dyn();

		static void queue( ::Dynamic f);
		static ::Dynamic queue_dyn();

};

} // end namespace snow
} // end namespace api

#endif /* INCLUDED_snow_api_Promises */ 
