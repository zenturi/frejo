// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#define INCLUDED_snow_api_buffers_ArrayBufferView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_8664b18ab865b55e_12_new)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)

namespace snow{
namespace api{
namespace buffers{


class HXCPP_CLASS_ATTRIBUTES ArrayBufferView_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ArrayBufferView_obj OBJ_;
		ArrayBufferView_obj();

	public:
		enum { _hx_ClassId = 0x28adf4de };

		void __construct(int in_type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.api.buffers.ArrayBufferView")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.api.buffers.ArrayBufferView"); }

		hx::ObjectPtr< ArrayBufferView_obj > __new(int in_type) {
			hx::ObjectPtr< ArrayBufferView_obj > __this = new ArrayBufferView_obj();
			__this->__construct(in_type);
			return __this;
		}

		static hx::ObjectPtr< ArrayBufferView_obj > __alloc(hx::Ctx *_hx_ctx,int in_type) {
			ArrayBufferView_obj *__this = (ArrayBufferView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayBufferView_obj), true, "snow.api.buffers.ArrayBufferView"));
			*(void **)__this = ArrayBufferView_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_8664b18ab865b55e_12_new)
HXLINE(  21)		( ( ::snow::api::buffers::ArrayBufferView)(__this) )->bytesPerElement = 0;
HXLINE(  14)		( ( ::snow::api::buffers::ArrayBufferView)(__this) )->type = 0;
HXLINE(  27)		( ( ::snow::api::buffers::ArrayBufferView)(__this) )->type = in_type;
HXLINE(  28)		int _hx_tmp;
HXDLIN(  28)		switch((int)(( ( ::snow::api::buffers::ArrayBufferView)(__this) )->type)){
            			case (int)1: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)2: {
HXLINE(  28)				_hx_tmp = 2;
            			}
            			break;
            			case (int)3: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)4: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)5: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)6: {
HXLINE(  28)				_hx_tmp = 2;
            			}
            			break;
            			case (int)7: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)8: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)9: {
HXLINE(  28)				_hx_tmp = 8;
            			}
            			break;
            			default:{
HXLINE(  28)				_hx_tmp = 1;
            			}
            		}
HXDLIN(  28)		( ( ::snow::api::buffers::ArrayBufferView)(__this) )->bytesPerElement = _hx_tmp;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ArrayBufferView_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ArrayBufferView",5e,6e,84,fd); }

		int type;
		::Array< unsigned char > buffer;
		int byteOffset;
		int byteLength;
		int length;
		int bytesPerElement;
};

} // end namespace snow
} // end namespace api
} // end namespace buffers

#endif /* INCLUDED_snow_api_buffers_ArrayBufferView */ 
