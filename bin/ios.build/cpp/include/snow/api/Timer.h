// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_api_Timer
#define INCLUDED_snow_api_Timer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,api,Timer)

namespace snow{
namespace api{


class HXCPP_CLASS_ATTRIBUTES Timer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Timer_obj OBJ_;
		Timer_obj();

	public:
		enum { _hx_ClassId = 0x479eed4e };

		void __construct(Float _time);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.api.Timer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.api.Timer"); }
		static hx::ObjectPtr< Timer_obj > __new(Float _time);
		static hx::ObjectPtr< Timer_obj > __alloc(hx::Ctx *_hx_ctx,Float _time);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(hx::Ctx *_hx_alloc,Timer_obj *_hx_obj);
		//~Timer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Timer",a5,2f,63,a3); }

		static void __boot();
		static ::Array< ::Dynamic> running_timers;
		static  ::Dynamic measure( ::Dynamic f, ::Dynamic pos);
		static ::Dynamic measure_dyn();

		static void update();
		static ::Dynamic update_dyn();

		static  ::snow::api::Timer delay(Float _time, ::Dynamic _f);
		static ::Dynamic delay_dyn();

		Float time;
		Float fire_at;
		bool running;
		::Dynamic run;
		inline ::Dynamic &run_dyn() {return run; }

		void stop();
		::Dynamic stop_dyn();

};

} // end namespace snow
} // end namespace api

#endif /* INCLUDED_snow_api_Timer */ 
