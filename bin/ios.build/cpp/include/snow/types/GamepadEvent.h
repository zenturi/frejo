// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_GamepadEvent
#define INCLUDED_snow_types_GamepadEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a466dc0cfb2adbcf_739_new)
HX_DECLARE_CLASS2(snow,types,GamepadEvent)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES GamepadEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GamepadEvent_obj OBJ_;
		GamepadEvent_obj();

	public:
		enum { _hx_ClassId = 0x658a88e7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.types.GamepadEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.types.GamepadEvent"); }

		hx::ObjectPtr< GamepadEvent_obj > __new() {
			hx::ObjectPtr< GamepadEvent_obj > __this = new GamepadEvent_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GamepadEvent_obj > __alloc(hx::Ctx *_hx_ctx) {
			GamepadEvent_obj *__this = (GamepadEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GamepadEvent_obj), true, "snow.types.GamepadEvent"));
			*(void **)__this = GamepadEvent_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a466dc0cfb2adbcf_739_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GamepadEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GamepadEvent",d9,bb,a7,f5); }

		int type;
		int gamepad;
		 ::Dynamic axis;
		 ::Dynamic button;
		 ::Dynamic value;
		::String device_id;
		 ::Dynamic device_event;
		void set_axis(int _gamepad,int _axis,Float _value);
		::Dynamic set_axis_dyn();

		void set_button(int _type,int _gamepad,int _button,Float _value);
		::Dynamic set_button_dyn();

		void set_device(int _gamepad,::String _id,int _event);
		::Dynamic set_device_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_GamepadEvent */ 
