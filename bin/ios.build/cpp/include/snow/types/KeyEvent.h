// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_KeyEvent
#define INCLUDED_snow_types_KeyEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,types,KeyEvent)
HX_DECLARE_CLASS2(snow,types,ModState)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES KeyEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef KeyEvent_obj OBJ_;
		KeyEvent_obj();

	public:
		enum { _hx_ClassId = 0x5522cb0d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.types.KeyEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.types.KeyEvent"); }
		static hx::ObjectPtr< KeyEvent_obj > __new();
		static hx::ObjectPtr< KeyEvent_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~KeyEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KeyEvent",1b,2a,e0,93); }

		 ::Dynamic type;
		 ::Dynamic keycode;
		 ::Dynamic scancode;
		 ::Dynamic repeat;
		 ::snow::types::ModState mod;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_KeyEvent */ 
