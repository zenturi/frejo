// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_ModState
#define INCLUDED_snow_types_ModState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_097a1ce7af24d9ae_856_new)
HX_DECLARE_CLASS2(snow,types,ModState)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES ModState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ModState_obj OBJ_;
		ModState_obj();

	public:
		enum { _hx_ClassId = 0x61915fe5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="snow.types.ModState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"snow.types.ModState"); }

		hx::ObjectPtr< ModState_obj > __new() {
			hx::ObjectPtr< ModState_obj > __this = new ModState_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ModState_obj > __alloc(hx::Ctx *_hx_ctx) {
			ModState_obj *__this = (ModState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ModState_obj), false, "snow.types.ModState"));
			*(void **)__this = ModState_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_097a1ce7af24d9ae_856_new)
HXLINE( 892)		( ( ::snow::types::ModState)(__this) )->meta = false;
HXLINE( 890)		( ( ::snow::types::ModState)(__this) )->alt = false;
HXLINE( 888)		( ( ::snow::types::ModState)(__this) )->shift = false;
HXLINE( 886)		( ( ::snow::types::ModState)(__this) )->ctrl = false;
HXLINE( 884)		( ( ::snow::types::ModState)(__this) )->mode = false;
HXLINE( 882)		( ( ::snow::types::ModState)(__this) )->caps = false;
HXLINE( 880)		( ( ::snow::types::ModState)(__this) )->num = false;
HXLINE( 878)		( ( ::snow::types::ModState)(__this) )->rmeta = false;
HXLINE( 876)		( ( ::snow::types::ModState)(__this) )->lmeta = false;
HXLINE( 874)		( ( ::snow::types::ModState)(__this) )->ralt = false;
HXLINE( 872)		( ( ::snow::types::ModState)(__this) )->lalt = false;
HXLINE( 870)		( ( ::snow::types::ModState)(__this) )->rctrl = false;
HXLINE( 868)		( ( ::snow::types::ModState)(__this) )->lctrl = false;
HXLINE( 866)		( ( ::snow::types::ModState)(__this) )->rshift = false;
HXLINE( 864)		( ( ::snow::types::ModState)(__this) )->lshift = false;
HXLINE( 862)		( ( ::snow::types::ModState)(__this) )->none = false;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ModState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ModState",0f,cc,e3,4e); }

		bool none;
		bool lshift;
		bool rshift;
		bool lctrl;
		bool rctrl;
		bool lalt;
		bool ralt;
		bool lmeta;
		bool rmeta;
		bool num;
		bool caps;
		bool mode;
		bool ctrl;
		bool shift;
		bool alt;
		bool meta;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_ModState */ 
