// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_Config
#define INCLUDED_snow_types_Config

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,types,Config)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES Config_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Config_obj OBJ_;
		Config_obj();

	public:
		enum { _hx_ClassId = 0x74ba9d38 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="snow.types.Config")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"snow.types.Config"); }

		hx::ObjectPtr< Config_obj > __new() {
			hx::ObjectPtr< Config_obj > __this = new Config_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Config_obj > __alloc(hx::Ctx *_hx_ctx) {
			Config_obj *__this = (Config_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), false, "snow.types.Config"));
			*(void **)__this = Config_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Config_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Config",e2,ca,66,fc); }

		static void __boot();
		static ::String app_config;
		static ::String app_ident;
		static ::Array< ::String > extensions;
};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_Config */ 
