// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_WindowEvent
#define INCLUDED_snow_types_WindowEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b4793fdf819cc060_603_new)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES WindowEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef WindowEvent_obj OBJ_;
		WindowEvent_obj();

	public:
		enum { _hx_ClassId = 0x1a0debd4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.types.WindowEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.types.WindowEvent"); }

		hx::ObjectPtr< WindowEvent_obj > __new() {
			hx::ObjectPtr< WindowEvent_obj > __this = new WindowEvent_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< WindowEvent_obj > __alloc(hx::Ctx *_hx_ctx) {
			WindowEvent_obj *__this = (WindowEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WindowEvent_obj), true, "snow.types.WindowEvent"));
			*(void **)__this = WindowEvent_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b4793fdf819cc060_603_new)
HXLINE( 610)		( ( ::snow::types::WindowEvent)(__this) )->window_id = -1;
HXLINE( 608)		( ( ::snow::types::WindowEvent)(__this) )->timestamp = ((Float)0.0);
HXLINE( 606)		( ( ::snow::types::WindowEvent)(__this) )->type = 0;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~WindowEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("WindowEvent",ea,f5,c9,4a); }

		int type;
		Float timestamp;
		int window_id;
		 ::Dynamic x;
		 ::Dynamic y;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_WindowEvent */ 
