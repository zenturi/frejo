// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_types_SystemEvent
#define INCLUDED_snow_types_SystemEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(snow,types,InputEvent)
HX_DECLARE_CLASS2(snow,types,SystemEvent)
HX_DECLARE_CLASS2(snow,types,WindowEvent)

namespace snow{
namespace types{


class HXCPP_CLASS_ATTRIBUTES SystemEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SystemEvent_obj OBJ_;
		SystemEvent_obj();

	public:
		enum { _hx_ClassId = 0x2db1ac75 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.types.SystemEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.types.SystemEvent"); }
		static hx::ObjectPtr< SystemEvent_obj > __new();
		static hx::ObjectPtr< SystemEvent_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SystemEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SystemEvent",8b,b6,6d,5e); }

		int type;
		 ::snow::types::WindowEvent window;
		 ::snow::types::InputEvent input;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace snow
} // end namespace types

#endif /* INCLUDED_snow_types_SystemEvent */ 
