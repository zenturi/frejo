// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_modules_openal_ALStream
#define INCLUDED_snow_modules_openal_ALStream

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_snow_modules_openal_ALSound
#include <snow/modules/openal/ALSound.h>
#endif
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)
HX_DECLARE_CLASS3(snow,modules,interfaces,Audio)
HX_DECLARE_CLASS3(snow,modules,openal,ALSound)
HX_DECLARE_CLASS3(snow,modules,openal,ALStream)
HX_DECLARE_CLASS3(snow,modules,openal,Audio)
HX_DECLARE_CLASS3(snow,systems,audio,AudioInstance)
HX_DECLARE_CLASS3(snow,systems,audio,AudioSource)

namespace snow{
namespace modules{
namespace openal{


class HXCPP_CLASS_ATTRIBUTES ALStream_obj : public  ::snow::modules::openal::ALSound_obj
{
	public:
		typedef  ::snow::modules::openal::ALSound_obj super;
		typedef ALStream_obj OBJ_;
		ALStream_obj();

	public:
		enum { _hx_ClassId = 0x7ee9061c };

		void __construct( ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.modules.openal.ALStream")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.modules.openal.ALStream"); }
		static hx::ObjectPtr< ALStream_obj > __new( ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance);
		static hx::ObjectPtr< ALStream_obj > __alloc(hx::Ctx *_hx_ctx, ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ALStream_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ALStream",cb,c3,ef,23); }

		::Array< int > buffers;
		 ::snow::api::buffers::ArrayBufferView buffer_data;
		int buffers_left;
		Float duration;
		void init();

		void destroy();

		Float position_of();

		void position(Float _time);

		void init_queue( ::Dynamic _start);
		::Dynamic init_queue_dyn();

		void flush_queue();
		::Dynamic flush_queue_dyn();

		::Array< int > data_get_result;
		::Array< int > fill_buffer(int _buffer);
		::Dynamic fill_buffer_dyn();

		void tick();

};

} // end namespace snow
} // end namespace modules
} // end namespace openal

#endif /* INCLUDED_snow_modules_openal_ALStream */ 
