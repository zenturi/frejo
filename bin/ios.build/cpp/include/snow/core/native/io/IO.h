// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_core_native_io_IO
#define INCLUDED_snow_core_native_io_IO

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS3(snow,api,buffers,ArrayBufferView)
HX_DECLARE_CLASS4(snow,core,native,io,IO)
HX_DECLARE_CLASS3(snow,modules,interfaces,IO)
HX_DECLARE_CLASS2(snow,types,SystemEvent)

namespace snow{
namespace core{
namespace native{
namespace io{


class HXCPP_CLASS_ATTRIBUTES IO_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IO_obj OBJ_;
		IO_obj();

	public:
		enum { _hx_ClassId = 0x29dc1d4d };

		void __construct( ::snow::Snow _app);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.core.native.io.IO")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.core.native.io.IO"); }
		static hx::ObjectPtr< IO_obj > __new( ::snow::Snow _app);
		static hx::ObjectPtr< IO_obj > __alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IO_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("IO",e6,3f,00,00); }

		 ::snow::Snow app;
		void shutdown();
		::Dynamic shutdown_dyn();

		void onevent( ::snow::types::SystemEvent _event);
		::Dynamic onevent_dyn();

		virtual ::String app_path();
		::Dynamic app_path_dyn();

		virtual ::String app_path_prefs();
		::Dynamic app_path_prefs_dyn();

		void url_open(::String _url);
		::Dynamic url_open_dyn();

		 ::snow::api::Promise data_load(::String _path, ::Dynamic _options);
		::Dynamic data_load_dyn();

		bool data_save(::String _path, ::snow::api::buffers::ArrayBufferView _data, ::Dynamic _options);
		::Dynamic data_save_dyn();

		::String string_save_path( ::Dynamic _slot);
		::Dynamic string_save_path_dyn();

		bool string_slot_destroy( ::Dynamic _slot);
		::Dynamic string_slot_destroy_dyn();

		bool string_slot_save( ::Dynamic _slot,::String _contents);
		::Dynamic string_slot_save_dyn();

		::String string_slot_load( ::Dynamic _slot);
		::Dynamic string_slot_load_dyn();

		::String string_slot_encode(::String _string);
		::Dynamic string_slot_encode_dyn();

		::String string_slot_decode(::String _string);
		::Dynamic string_slot_decode_dyn();

		virtual ::cpp::Pointer<  SDL_RWops > file_handle(::String _path,::String _mode);
		::Dynamic file_handle_dyn();

		virtual ::cpp::Pointer<  SDL_RWops > file_handle_from_mem( ::snow::api::buffers::ArrayBufferView mem,int size);
		::Dynamic file_handle_from_mem_dyn();

		virtual int file_read(::cpp::Pointer<  SDL_RWops > handle, ::snow::api::buffers::ArrayBufferView dest,int size,int maxnum);
		::Dynamic file_read_dyn();

		virtual int file_write(::cpp::Pointer<  SDL_RWops > handle, ::snow::api::buffers::ArrayBufferView src,int size,int num);
		::Dynamic file_write_dyn();

		virtual int file_seek(::cpp::Pointer<  SDL_RWops > handle,int offset,int whence);
		::Dynamic file_seek_dyn();

		virtual int file_tell(::cpp::Pointer<  SDL_RWops > handle);
		::Dynamic file_tell_dyn();

		virtual int file_close(::cpp::Pointer<  SDL_RWops > handle);
		::Dynamic file_close_dyn();

		int file_size(::cpp::Pointer<  SDL_RWops > handle);
		::Dynamic file_size_dyn();

		 ::snow::api::buffers::ArrayBufferView _data_load(::String _path, ::Dynamic _options);
		::Dynamic _data_load_dyn();

};

} // end namespace snow
} // end namespace core
} // end namespace native
} // end namespace io

#endif /* INCLUDED_snow_core_native_io_IO */ 
