// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_App
#define INCLUDED_snow_App

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(snow,App)
HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,types,ModState)
HX_DECLARE_CLASS2(snow,types,SystemEvent)

namespace snow{


class HXCPP_CLASS_ATTRIBUTES App_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef App_obj OBJ_;
		App_obj();

	public:
		enum { _hx_ClassId = 0x7e2b5c5e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.App")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.App"); }
		static hx::ObjectPtr< App_obj > __new();
		static hx::ObjectPtr< App_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~App_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("App",81,b4,31,00); }

		static void main();
		static ::Dynamic main_dyn();

		 ::snow::Snow app;
		Float timescale;
		Float fixed_delta;
		Float update_rate;
		Float tick_start;
		Float tick_start_prev;
		Float tick_delta;
		Float frame_start;
		Float frame_start_prev;
		Float frame_delta;
		Float frame_max_delta;
		Float sim_delta;
		Float sim_time;
		Float fixed_alpha;
		bool fixed_timestep;
		Float fixed_frame_time;
		Float fixed_overflow;
		Float next_tick;
		virtual  ::Dynamic config( ::Dynamic _config);
		::Dynamic config_dyn();

		virtual void ready();
		::Dynamic ready_dyn();

		virtual void update(Float dt);
		::Dynamic update_dyn();

		virtual void tick(Float dt);
		::Dynamic tick_dyn();

		void ondestroy();
		::Dynamic ondestroy_dyn();

		virtual void onevent( ::snow::types::SystemEvent event);
		::Dynamic onevent_dyn();

		void ontickstart();
		::Dynamic ontickstart_dyn();

		void ontickend();
		::Dynamic ontickend_dyn();

		void onkeydown(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id);
		::Dynamic onkeydown_dyn();

		void onkeyup(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id);
		::Dynamic onkeyup_dyn();

		void ontextinput(::String text,int start,int length,int type,Float timestamp,int window_id);
		::Dynamic ontextinput_dyn();

		void onmousedown(int x,int y,int button,Float timestamp,int window_id);
		::Dynamic onmousedown_dyn();

		void onmouseup(int x,int y,int button,Float timestamp,int window_id);
		::Dynamic onmouseup_dyn();

		void onmousewheel(Float x,Float y,Float timestamp,int window_id);
		::Dynamic onmousewheel_dyn();

		void onmousemove(int x,int y,int xrel,int yrel,Float timestamp,int window_id);
		::Dynamic onmousemove_dyn();

		void ontouchdown(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp);
		::Dynamic ontouchdown_dyn();

		void ontouchup(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp);
		::Dynamic ontouchup_dyn();

		void ontouchmove(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp);
		::Dynamic ontouchmove_dyn();

		void ongamepadaxis(int gamepad,int axis,Float value,Float timestamp);
		::Dynamic ongamepadaxis_dyn();

		void ongamepaddown(int gamepad,int button,Float value,Float timestamp);
		::Dynamic ongamepaddown_dyn();

		void ongamepadup(int gamepad,int button,Float value,Float timestamp);
		::Dynamic ongamepadup_dyn();

		void ongamepaddevice(int gamepad,::String id,int type,Float timestamp);
		::Dynamic ongamepaddevice_dyn();

		void internal_init();
		::Dynamic internal_init_dyn();

		void internal_tick();
		::Dynamic internal_tick_dyn();

		void internal_tick_default();
		::Dynamic internal_tick_default_dyn();

		void internal_tick_fixed_timestep();
		::Dynamic internal_tick_fixed_timestep_dyn();

};

} // end namespace snow

#endif /* INCLUDED_snow_App */ 
