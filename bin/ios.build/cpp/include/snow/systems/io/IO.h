// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_systems_io_IO
#define INCLUDED_snow_systems_io_IO

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS2(snow,api,Promise)
HX_DECLARE_CLASS4(snow,core,native,io,IO)
HX_DECLARE_CLASS3(snow,modules,interfaces,IO)
HX_DECLARE_CLASS3(snow,modules,sdl,IO)
HX_DECLARE_CLASS3(snow,systems,io,IO)

namespace snow{
namespace systems{
namespace io{


class HXCPP_CLASS_ATTRIBUTES IO_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IO_obj OBJ_;
		IO_obj();

	public:
		enum { _hx_ClassId = 0x7eecf769 };

		void __construct( ::snow::Snow _app);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.systems.io.IO")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.systems.io.IO"); }
		static hx::ObjectPtr< IO_obj > __new( ::snow::Snow _app);
		static hx::ObjectPtr< IO_obj > __alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IO_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IO",e6,3f,00,00); }

		 ::snow::Snow app;
		 ::snow::modules::sdl::IO module;
		 ::snow::api::Promise data_flow(::String _id, ::Dynamic _processor, ::Dynamic _provider);
		::Dynamic data_flow_dyn();

		 ::snow::api::Promise default_provider( ::snow::Snow _app,::String _id);
		::Dynamic default_provider_dyn();

		void shutdown();
		::Dynamic shutdown_dyn();

};

} // end namespace snow
} // end namespace systems
} // end namespace io

#endif /* INCLUDED_snow_systems_io_IO */ 
