// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_snow_systems_audio_AudioSource
#define INCLUDED_snow_systems_audio_AudioSource

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(snow,Snow)
HX_DECLARE_CLASS3(snow,systems,audio,AudioInstance)
HX_DECLARE_CLASS3(snow,systems,audio,AudioSource)
HX_DECLARE_CLASS2(snow,types,AudioData)

namespace snow{
namespace systems{
namespace audio{


class HXCPP_CLASS_ATTRIBUTES AudioSource_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AudioSource_obj OBJ_;
		AudioSource_obj();

	public:
		enum { _hx_ClassId = 0x040ade38 };

		void __construct( ::snow::Snow _app, ::snow::types::AudioData _data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="snow.systems.audio.AudioSource")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"snow.systems.audio.AudioSource"); }
		static hx::ObjectPtr< AudioSource_obj > __new( ::snow::Snow _app, ::snow::types::AudioData _data);
		static hx::ObjectPtr< AudioSource_obj > __alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app, ::snow::types::AudioData _data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AudioSource_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AudioSource",31,7a,14,e5); }

		 ::snow::Snow app;
		 ::snow::types::AudioData data;
		int stream_buffer_length;
		int stream_buffer_count;
		bool destroyed;
		::String source_id;
		::Array< ::Dynamic> instances;
		 ::snow::systems::audio::AudioInstance instance( ::Dynamic _handle);
		::Dynamic instance_dyn();

		Float bytes_to_seconds(int _bytes);
		::Dynamic bytes_to_seconds_dyn();

		int seconds_to_bytes(Float _seconds);
		::Dynamic seconds_to_bytes_dyn();

		Float duration();
		::Dynamic duration_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void instance_killed( ::snow::systems::audio::AudioInstance _instance);
		::Dynamic instance_killed_dyn();

};

} // end namespace snow
} // end namespace systems
} // end namespace audio

#endif /* INCLUDED_snow_systems_audio_AudioSource */ 
