// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#ifndef INCLUDED_openal_ALError
#define INCLUDED_openal_ALError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(openal,ALError)

namespace openal{


class HXCPP_CLASS_ATTRIBUTES ALError_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ALError_obj OBJ_;
		ALError_obj();

	public:
		enum { _hx_ClassId = 0x365c0648 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openal.ALError")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openal.ALError"); }

		hx::ObjectPtr< ALError_obj > __new() {
			hx::ObjectPtr< ALError_obj > __this = new ALError_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ALError_obj > __alloc(hx::Ctx *_hx_ctx) {
			ALError_obj *__this = (ALError_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ALError_obj), false, "openal.ALError"));
			*(void **)__this = ALError_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ALError_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ALError",dd,ce,69,f8); }

		static void __boot();
		static ::String INVALID_NAME;
		static ::String INVALID_ENUM;
		static ::String INVALID_VALUE;
		static ::String INVALID_OPERATION;
		static ::String OUT_OF_MEMORY;
		static ::String desc(int error);
		static ::Dynamic desc_dyn();

};

} // end namespace openal

#endif /* INCLUDED_openal_ALError */ 
