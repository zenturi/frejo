// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_Fast_Impl_
#include <haxe/xml/_Fast/Fast_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_21109c8e250e0543_201_get_innerData,"haxe.xml._Fast.Fast_Impl_","get_innerData",0x9d984b57,"haxe.xml._Fast.Fast_Impl_.get_innerData","/usr/local/lib/haxe/std/haxe/xml/Fast.hx",201,0x1680b11e)
HX_LOCAL_STACK_FRAME(_hx_pos_21109c8e250e0543_223_get_innerHTML,"haxe.xml._Fast.Fast_Impl_","get_innerHTML",0xa0332678,"haxe.xml._Fast.Fast_Impl_.get_innerHTML","/usr/local/lib/haxe/std/haxe/xml/Fast.hx",223,0x1680b11e)
namespace haxe{
namespace xml{
namespace _Fast{

void Fast_Impl__obj::__construct() { }

Dynamic Fast_Impl__obj::__CreateEmpty() { return new Fast_Impl__obj; }

void *Fast_Impl__obj::_hx_vtable = 0;

Dynamic Fast_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Fast_Impl__obj > _hx_result = new Fast_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Fast_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a6f09ae;
}

::String Fast_Impl__obj::get_innerData( ::Xml this1){
            	HX_STACKFRAME(&_hx_pos_21109c8e250e0543_201_get_innerData)
HXLINE( 202)		bool _hx_tmp;
HXDLIN( 202)		if ((this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 202)			_hx_tmp = (this1->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 202)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this1->nodeType));
            		}
HXDLIN( 202)		 ::Dynamic it = this1->children->iterator();
HXLINE( 203)		if (!(( (bool)(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ))) {
HXLINE( 204)			::String _hx_tmp1;
HXDLIN( 204)			if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 204)				_hx_tmp1 = HX_("Document",3b,ab,c4,74);
            			}
            			else {
HXLINE( 204)				if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 204)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this1->nodeType));
            				}
HXDLIN( 204)				_hx_tmp1 = this1->nodeName;
            			}
HXDLIN( 204)			HX_STACK_DO_THROW((_hx_tmp1 + HX_(" does not have data",0e,54,3b,f4)));
            		}
HXLINE( 205)		 ::Xml v = ( ( ::Xml)(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 206)		if (( (bool)(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )) {
HXLINE( 207)			 ::Xml n = ( ( ::Xml)(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 209)			bool _hx_tmp2;
HXDLIN( 209)			bool _hx_tmp3;
HXDLIN( 209)			if ((v->nodeType == ::Xml_obj::PCData)) {
HXLINE( 209)				_hx_tmp3 = (n->nodeType == ::Xml_obj::CData);
            			}
            			else {
HXLINE( 209)				_hx_tmp3 = false;
            			}
HXDLIN( 209)			if (_hx_tmp3) {
HXLINE( 209)				bool _hx_tmp4;
HXDLIN( 209)				if ((v->nodeType != ::Xml_obj::Document)) {
HXLINE( 209)					_hx_tmp4 = (v->nodeType == ::Xml_obj::Element);
            				}
            				else {
HXLINE( 209)					_hx_tmp4 = true;
            				}
HXDLIN( 209)				if (_hx_tmp4) {
HXLINE( 209)					HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + v->nodeType));
            				}
HXDLIN( 209)				_hx_tmp2 = (::StringTools_obj::trim(v->nodeValue) == HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 209)				_hx_tmp2 = false;
            			}
HXDLIN( 209)			if (_hx_tmp2) {
HXLINE( 210)				if (!(( (bool)(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ))) {
HXLINE( 211)					bool _hx_tmp5;
HXDLIN( 211)					if ((n->nodeType != ::Xml_obj::Document)) {
HXLINE( 211)						_hx_tmp5 = (n->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 211)						_hx_tmp5 = true;
            					}
HXDLIN( 211)					if (_hx_tmp5) {
HXLINE( 211)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + n->nodeType));
            					}
HXDLIN( 211)					return n->nodeValue;
            				}
HXLINE( 212)				 ::Xml n2 = ( ( ::Xml)(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 213)				bool _hx_tmp6;
HXDLIN( 213)				bool _hx_tmp7;
HXDLIN( 213)				if ((n2->nodeType == ::Xml_obj::PCData)) {
HXLINE( 213)					bool _hx_tmp8;
HXDLIN( 213)					if ((n2->nodeType != ::Xml_obj::Document)) {
HXLINE( 213)						_hx_tmp8 = (n2->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 213)						_hx_tmp8 = true;
            					}
HXDLIN( 213)					if (_hx_tmp8) {
HXLINE( 213)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + n2->nodeType));
            					}
HXDLIN( 213)					_hx_tmp7 = (::StringTools_obj::trim(n2->nodeValue) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 213)					_hx_tmp7 = false;
            				}
HXDLIN( 213)				if (_hx_tmp7) {
HXLINE( 213)					_hx_tmp6 = !(( (bool)(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ));
            				}
            				else {
HXLINE( 213)					_hx_tmp6 = false;
            				}
HXDLIN( 213)				if (_hx_tmp6) {
HXLINE( 214)					bool _hx_tmp9;
HXDLIN( 214)					if ((n->nodeType != ::Xml_obj::Document)) {
HXLINE( 214)						_hx_tmp9 = (n->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE( 214)						_hx_tmp9 = true;
            					}
HXDLIN( 214)					if (_hx_tmp9) {
HXLINE( 214)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + n->nodeType));
            					}
HXDLIN( 214)					return n->nodeValue;
            				}
            			}
HXLINE( 216)			::String _hx_tmp10;
HXDLIN( 216)			if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 216)				_hx_tmp10 = HX_("Document",3b,ab,c4,74);
            			}
            			else {
HXLINE( 216)				if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 216)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this1->nodeType));
            				}
HXDLIN( 216)				_hx_tmp10 = this1->nodeName;
            			}
HXDLIN( 216)			HX_STACK_DO_THROW((_hx_tmp10 + HX_(" does not only have data",82,e2,30,ae)));
            		}
HXLINE( 218)		bool _hx_tmp11;
HXDLIN( 218)		if ((v->nodeType != ::Xml_obj::PCData)) {
HXLINE( 218)			_hx_tmp11 = (v->nodeType != ::Xml_obj::CData);
            		}
            		else {
HXLINE( 218)			_hx_tmp11 = false;
            		}
HXDLIN( 218)		if (_hx_tmp11) {
HXLINE( 219)			::String _hx_tmp12;
HXDLIN( 219)			if ((this1->nodeType == ::Xml_obj::Document)) {
HXLINE( 219)				_hx_tmp12 = HX_("Document",3b,ab,c4,74);
            			}
            			else {
HXLINE( 219)				if ((this1->nodeType != ::Xml_obj::Element)) {
HXLINE( 219)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + this1->nodeType));
            				}
HXDLIN( 219)				_hx_tmp12 = this1->nodeName;
            			}
HXDLIN( 219)			HX_STACK_DO_THROW((_hx_tmp12 + HX_(" does not have data",0e,54,3b,f4)));
            		}
HXLINE( 220)		bool _hx_tmp13;
HXDLIN( 220)		if ((v->nodeType != ::Xml_obj::Document)) {
HXLINE( 220)			_hx_tmp13 = (v->nodeType == ::Xml_obj::Element);
            		}
            		else {
HXLINE( 220)			_hx_tmp13 = true;
            		}
HXDLIN( 220)		if (_hx_tmp13) {
HXLINE( 220)			HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + v->nodeType));
            		}
HXDLIN( 220)		return v->nodeValue;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Fast_Impl__obj,get_innerData,return )

::String Fast_Impl__obj::get_innerHTML( ::Xml this1){
            	HX_GC_STACKFRAME(&_hx_pos_21109c8e250e0543_223_get_innerHTML)
HXLINE( 224)		 ::StringBuf s =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 225)		{
HXLINE( 225)			bool _hx_tmp;
HXDLIN( 225)			if ((this1->nodeType != ::Xml_obj::Document)) {
HXLINE( 225)				_hx_tmp = (this1->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 225)				_hx_tmp = false;
            			}
HXDLIN( 225)			if (_hx_tmp) {
HXLINE( 225)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + this1->nodeType));
            			}
HXDLIN( 225)			 ::Dynamic x = this1->children->iterator();
HXDLIN( 225)			while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 225)				 ::Xml x1 = ( ( ::Xml)(x->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 226)				::String x2 = ::haxe::xml::Printer_obj::print(x1,null());
HXDLIN( 226)				if (hx::IsNotNull( s->charBuf )) {
HXLINE( 226)					s->flush();
            				}
HXDLIN( 226)				if (hx::IsNull( s->b )) {
HXLINE( 226)					s->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            				}
            				else {
HXLINE( 226)					::Array< ::String > s1 = s->b;
HXDLIN( 226)					s1->push(::Std_obj::string(x2));
            				}
            			}
            		}
HXLINE( 227)		return s->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Fast_Impl__obj,get_innerHTML,return )


Fast_Impl__obj::Fast_Impl__obj()
{
}

bool Fast_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"get_innerData") ) { outValue = get_innerData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_innerHTML") ) { outValue = get_innerHTML_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Fast_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Fast_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class Fast_Impl__obj::__mClass;

static ::String Fast_Impl__obj_sStaticFields[] = {
	HX_("get_innerData",b7,0a,44,eb),
	HX_("get_innerHTML",d8,e5,de,ed),
	::String(null())
};

void Fast_Impl__obj::__register()
{
	Fast_Impl__obj _hx_dummy;
	Fast_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.xml._Fast.Fast_Impl_",0e,c9,7e,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Fast_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Fast_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Fast_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Fast_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Fast_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace xml
} // end namespace _Fast
