// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_rtti_CType
#include <haxe/rtti/CType.h>
#endif
#ifndef INCLUDED_haxe_rtti_Rights
#include <haxe/rtti/Rights.h>
#endif
#ifndef INCLUDED_haxe_rtti_TypeTree
#include <haxe/rtti/TypeTree.h>
#endif
#ifndef INCLUDED_haxe_rtti_XmlParser
#include <haxe/rtti/XmlParser.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess_Impl_
#include <haxe/xml/_Fast/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_Fast_Impl_
#include <haxe/xml/_Fast/Fast_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess_Impl_
#include <haxe/xml/_Fast/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess_Impl_
#include <haxe/xml/_Fast/HasNodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess_Impl_
#include <haxe/xml/_Fast/NodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess_Impl_
#include <haxe/xml/_Fast/NodeListAccess_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_00e093b263f67172_38_new,"haxe.rtti.XmlParser","new",0x122ab839,"haxe.rtti.XmlParser.new","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",38,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_288_mkPath,"haxe.rtti.XmlParser","mkPath",0xdd943dea,"haxe.rtti.XmlParser.mkPath","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",288,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_291_mkTypeParams,"haxe.rtti.XmlParser","mkTypeParams",0x6ccf83a5,"haxe.rtti.XmlParser.mkTypeParams","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",291,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_299_mkRights,"haxe.rtti.XmlParser","mkRights",0xf8e3089c,"haxe.rtti.XmlParser.mkRights","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",299,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_309_xerror,"haxe.rtti.XmlParser","xerror",0xe59fde17,"haxe.rtti.XmlParser.xerror","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",309,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_318_processElement,"haxe.rtti.XmlParser","processElement",0x61cb54d4,"haxe.rtti.XmlParser.processElement","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",318,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_329_xmeta,"haxe.rtti.XmlParser","xmeta",0xc3b23756,"haxe.rtti.XmlParser.xmeta","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",329,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_340_xoverloads,"haxe.rtti.XmlParser","xoverloads",0xe2124b88,"haxe.rtti.XmlParser.xoverloads","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",340,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_348_xpath,"haxe.rtti.XmlParser","xpath",0xc5aad236,"haxe.rtti.XmlParser.xpath","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",348,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_359_xclass,"haxe.rtti.XmlParser","xclass",0xbace8a87,"haxe.rtti.XmlParser.xclass","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",359,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_399_xclassfield,"haxe.rtti.XmlParser","xclassfield",0x94fe80d3,"haxe.rtti.XmlParser.xclassfield","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",399,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_430_xenum,"haxe.rtti.XmlParser","xenum",0xbe6f5792,"haxe.rtti.XmlParser.xenum","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",430,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_455_xenumfield,"haxe.rtti.XmlParser","xenumfield",0xfc438be8,"haxe.rtti.XmlParser.xenumfield","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",455,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_485_xabstract,"haxe.rtti.XmlParser","xabstract",0xbdd7c9f3,"haxe.rtti.XmlParser.xabstract","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",485,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_524_xtypedef,"haxe.rtti.XmlParser","xtypedef",0x82b2bb5a,"haxe.rtti.XmlParser.xtypedef","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",524,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_553_xtype,"haxe.rtti.XmlParser","xtype",0xc861df4b,"haxe.rtti.XmlParser.xtype","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",553,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_608_xtypeparams,"haxe.rtti.XmlParser","xtypeparams",0x15d7e4d1,"haxe.rtti.XmlParser.xtypeparams","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",608,0x9d79c334)
HX_LOCAL_STACK_FRAME(_hx_pos_00e093b263f67172_615_defplat,"haxe.rtti.XmlParser","defplat",0xdc71768d,"haxe.rtti.XmlParser.defplat","/usr/local/lib/haxe/std/haxe/rtti/XmlParser.hx",615,0x9d79c334)
namespace haxe{
namespace rtti{

void XmlParser_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_38_new)
HXDLIN(  38)		this->root = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic XmlParser_obj::__CreateEmpty() { return new XmlParser_obj; }

void *XmlParser_obj::_hx_vtable = 0;

Dynamic XmlParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< XmlParser_obj > _hx_result = new XmlParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool XmlParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x31dccf71;
}

::String XmlParser_obj::mkPath(::String p){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_288_mkPath)
HXDLIN( 288)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,mkPath,return )

::Array< ::String > XmlParser_obj::mkTypeParams(::String p){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_291_mkTypeParams)
HXLINE( 292)		::Array< ::String > pl = p.split(HX_(":",3a,00,00,00));
HXLINE( 293)		if ((pl->__get(0) == HX_("",00,00,00,00))) {
HXLINE( 294)			return ::Array_obj< ::String >::__new();
            		}
HXLINE( 295)		return pl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,mkTypeParams,return )

 ::haxe::rtti::Rights XmlParser_obj::mkRights(::String r){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_299_mkRights)
HXDLIN( 299)		::String _hx_switch_0 = r;
            		if (  (_hx_switch_0==HX_("dynamic",7f,9f,15,36)) ){
HXLINE( 302)			return ::haxe::rtti::Rights_obj::RDynamic_dyn();
HXDLIN( 302)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
HXLINE( 303)			return ::haxe::rtti::Rights_obj::RInline_dyn();
HXDLIN( 303)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("method",e1,f6,5a,09)) ){
HXLINE( 301)			return ::haxe::rtti::Rights_obj::RMethod_dyn();
HXDLIN( 301)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("null",87,9e,0e,49)) ){
HXLINE( 300)			return ::haxe::rtti::Rights_obj::RNo_dyn();
HXDLIN( 300)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE( 304)			return ::haxe::rtti::Rights_obj::RCall(r);
            		}
            		_hx_goto_3:;
HXLINE( 299)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,mkRights,return )

 ::Dynamic XmlParser_obj::xerror( ::Xml c){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_309_xerror)
HXDLIN( 309)		::String _hx_tmp;
HXDLIN( 309)		if ((c->nodeType == ::Xml_obj::Document)) {
HXDLIN( 309)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXDLIN( 309)			if ((c->nodeType != ::Xml_obj::Element)) {
HXDLIN( 309)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c->nodeType));
            			}
HXDLIN( 309)			_hx_tmp = c->nodeName;
            		}
HXDLIN( 309)		HX_STACK_DO_THROW((HX_("Invalid ",69,79,49,7d) + _hx_tmp));
HXDLIN( 309)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xerror,return )

 ::haxe::rtti::TypeTree XmlParser_obj::processElement( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_318_processElement)
HXLINE( 319)		bool _hx_tmp;
HXDLIN( 319)		if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 319)			_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 319)			_hx_tmp = false;
            		}
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 319)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + x->nodeType));
            		}
HXDLIN( 319)		 ::Xml this1 = x;
HXDLIN( 319)		 ::Xml c = this1;
HXLINE( 320)		::String _g;
HXDLIN( 320)		if ((c->nodeType == ::Xml_obj::Document)) {
HXLINE( 320)			_g = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE( 320)			if ((c->nodeType != ::Xml_obj::Element)) {
HXLINE( 320)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c->nodeType));
            			}
HXDLIN( 320)			_g = c->nodeName;
            		}
HXDLIN( 320)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("abstract",e2,c0,7e,a8)) ){
HXLINE( 324)			return ::haxe::rtti::TypeTree_obj::TAbstractdecl(this->xabstract(c));
HXDLIN( 324)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("class",38,78,58,48)) ){
HXLINE( 321)			return ::haxe::rtti::TypeTree_obj::TClassdecl(this->xclass(c));
HXDLIN( 321)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("enum",01,6b,16,43)) ){
HXLINE( 322)			return ::haxe::rtti::TypeTree_obj::TEnumdecl(this->xenum(c));
HXDLIN( 322)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("typedef",4b,37,d8,f8)) ){
HXLINE( 323)			return ::haxe::rtti::TypeTree_obj::TTypedecl(this->xtypedef(c));
HXDLIN( 323)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 325)			return this->xerror(c);
            		}
            		_hx_goto_6:;
HXLINE( 320)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,processElement,return )

::Array< ::Dynamic> XmlParser_obj::xmeta( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_329_xmeta)
HXLINE( 330)		::Array< ::Dynamic> ml = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 331)		{
HXLINE( 331)			int _g = 0;
HXDLIN( 331)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Fast::NodeListAccess_Impl__obj::resolve(x,HX_("m",6d,00,00,00));
HXDLIN( 331)			while((_g < _g1->length)){
HXLINE( 331)				 ::Xml m = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 331)				_g = (_g + 1);
HXLINE( 332)				::Array< ::String > pl = ::Array_obj< ::String >::__new(0);
HXLINE( 333)				{
HXLINE( 333)					int _g2 = 0;
HXDLIN( 333)					::Array< ::Dynamic> _g3 = ::haxe::xml::_Fast::NodeListAccess_Impl__obj::resolve(m,HX_("e",65,00,00,00));
HXDLIN( 333)					while((_g2 < _g3->length)){
HXLINE( 333)						 ::Xml p = _g3->__get(_g2).StaticCast<  ::Xml >();
HXDLIN( 333)						_g2 = (_g2 + 1);
HXLINE( 334)						pl->push(::haxe::xml::_Fast::Fast_Impl__obj::get_innerHTML(p));
            					}
            				}
HXLINE( 335)				ml->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("params",46,fb,7a,ed),pl)
            					->setFixed(1,HX_("name",4b,72,ff,48),::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(m,HX_("n",6e,00,00,00)))));
            			}
            		}
HXLINE( 337)		return ml;
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xmeta,return )

::Array< ::Dynamic> XmlParser_obj::xoverloads( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_340_xoverloads)
HXLINE( 341)		::Array< ::Dynamic> l = ::Array_obj< ::Dynamic>::__new();
HXLINE( 342)		{
HXLINE( 342)			 ::Dynamic m = x->elements();
HXDLIN( 342)			while(( (bool)(m->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 342)				 ::Xml m1 = ( ( ::Xml)(m->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 343)				l->push(this->xclassfield(m1,null()));
            			}
            		}
HXLINE( 345)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xoverloads,return )

 ::Dynamic XmlParser_obj::xpath( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_348_xpath)
HXLINE( 349)		::String path = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXLINE( 350)		::Array< ::Dynamic> params = ::Array_obj< ::Dynamic>::__new();
HXLINE( 351)		{
HXLINE( 351)			 ::Dynamic c = x->elements();
HXDLIN( 351)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 351)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 352)				params->push(this->xtype(c1));
            			}
            		}
HXLINE( 353)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("params",46,fb,7a,ed),params)
            			->setFixed(1,HX_("path",a5,e5,51,4a),path));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xpath,return )

 ::Dynamic XmlParser_obj::xclass( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_359_xclass)
HXLINE( 360)		 ::Dynamic csuper = null();
HXLINE( 361)		::String doc = null();
HXLINE( 362)		 ::haxe::rtti::CType tdynamic = null();
HXLINE( 363)		::Array< ::Dynamic> interfaces = ::Array_obj< ::Dynamic>::__new();
HXLINE( 364)		::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new();
HXLINE( 365)		::Array< ::Dynamic> statics = ::Array_obj< ::Dynamic>::__new();
HXLINE( 366)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 367)		{
HXLINE( 367)			 ::Dynamic c = x->elements();
HXDLIN( 367)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 367)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 368)				{
HXLINE( 368)					::String _g;
HXDLIN( 368)					if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 368)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 368)						if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 368)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            						}
HXDLIN( 368)						_g = c1->nodeName;
            					}
HXDLIN( 368)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("extends",59,cd,5c,70)) ){
HXLINE( 370)						csuper = this->xpath(c1);
HXDLIN( 370)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("haxe_doc",9f,c6,83,5f)) ){
HXLINE( 369)						doc = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(c1);
HXDLIN( 369)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("haxe_dynamic",26,c3,ff,55)) ){
HXLINE( 372)						 ::Xml x1 = c1->firstElement();
HXDLIN( 372)						bool tdynamic1;
HXDLIN( 372)						if ((x1->nodeType != ::Xml_obj::Document)) {
HXLINE( 372)							tdynamic1 = (x1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE( 372)							tdynamic1 = false;
            						}
HXDLIN( 372)						if (tdynamic1) {
HXLINE( 372)							HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + x1->nodeType));
            						}
HXDLIN( 372)						 ::Xml this1 = x1;
HXDLIN( 372)						tdynamic = this->xtype(this1);
HXDLIN( 372)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("implements",70,fd,43,a8)) ){
HXLINE( 371)						interfaces->push(this->xpath(c1));
HXDLIN( 371)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("meta",c5,4a,59,48)) ){
HXLINE( 373)						meta = this->xmeta(c1);
HXDLIN( 373)						goto _hx_goto_16;
            					}
            					/* default */{
HXLINE( 375)						if (c1->exists(HX_("static",ae,dc,fb,05))) {
HXLINE( 376)							statics->push(this->xclassfield(c1,null()));
            						}
            						else {
HXLINE( 378)							fields->push(this->xclassfield(c1,null()));
            						}
            					}
            					_hx_goto_16:;
            				}
            			}
            		}
HXLINE( 381)		::String _hx_tmp;
HXDLIN( 381)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43))) {
HXLINE( 381)			_hx_tmp = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43));
            		}
            		else {
HXLINE( 381)			_hx_tmp = null();
            		}
HXLINE( 382)		::String _hx_tmp1 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXLINE( 383)		::String _hx_tmp2;
HXDLIN( 383)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0))) {
HXLINE( 383)			_hx_tmp2 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0)));
            		}
            		else {
HXLINE( 383)			_hx_tmp2 = null();
            		}
HXLINE( 385)		bool _hx_tmp3 = x->exists(HX_("private",03,2d,6f,89));
HXLINE( 386)		bool _hx_tmp4 = x->exists(HX_("extern",60,d5,1a,c7));
HXLINE( 387)		bool _hx_tmp5 = x->exists(HX_("interface",b9,31,da,39));
HXLINE( 388)		::Array< ::String > _hx_tmp6 = this->mkTypeParams(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed)));
HXLINE( 380)		return  ::Dynamic(hx::Anon_obj::Create(15)
            			->setFixed(0,HX_("fields",79,8e,8e,80),fields)
            			->setFixed(1,HX_("isPrivate",39,aa,6d,8d),_hx_tmp3)
            			->setFixed(2,HX_("platforms",60,aa,82,92),this->defplat())
            			->setFixed(3,HX_("superClass",bd,a8,07,a8),csuper)
            			->setFixed(4,HX_("module",ac,34,d3,c0),_hx_tmp2)
            			->setFixed(5,HX_("params",46,fb,7a,ed),_hx_tmp6)
            			->setFixed(6,HX_("doc",78,42,4c,00),doc)
            			->setFixed(7,HX_("isInterface",6f,e8,5a,18),_hx_tmp5)
            			->setFixed(8,HX_("isExtern",ea,70,84,1f),_hx_tmp4)
            			->setFixed(9,HX_("tdynamic",8b,55,f1,20),tdynamic)
            			->setFixed(10,HX_("statics",05,3c,65,36),statics)
            			->setFixed(11,HX_("file",7c,ce,bb,43),_hx_tmp)
            			->setFixed(12,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(13,HX_("path",a5,e5,51,4a),_hx_tmp1)
            			->setFixed(14,HX_("interfaces",9a,50,11,65),interfaces));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xclass,return )

 ::Dynamic XmlParser_obj::xclassfield( ::Xml x, ::Dynamic __o_defPublic){
 ::Dynamic defPublic = __o_defPublic.Default(false);
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_399_xclassfield)
HXLINE( 400)		 ::Dynamic e = x->elements();
HXLINE( 401)		 ::haxe::rtti::CType t = this->xtype(( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ));
HXLINE( 402)		::String doc = null();
HXLINE( 403)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 404)		::Array< ::Dynamic> overloads = null();
HXLINE( 405)		{
HXLINE( 405)			 ::Dynamic c = e;
HXDLIN( 405)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 405)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 406)				{
HXLINE( 406)					::String _g;
HXDLIN( 406)					if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 406)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 406)						if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 406)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            						}
HXDLIN( 406)						_g = c1->nodeName;
            					}
HXDLIN( 406)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("haxe_doc",9f,c6,83,5f)) ){
HXLINE( 407)						doc = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(c1);
HXDLIN( 407)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_0==HX_("meta",c5,4a,59,48)) ){
HXLINE( 408)						meta = this->xmeta(c1);
HXDLIN( 408)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_0==HX_("overloads",b9,65,83,49)) ){
HXLINE( 409)						overloads = this->xoverloads(c1);
HXDLIN( 409)						goto _hx_goto_19;
            					}
            					/* default */{
HXLINE( 410)						this->xerror(c1);
            					}
            					_hx_goto_19:;
            				}
            			}
            		}
HXLINE( 413)		::String _hx_tmp;
HXDLIN( 413)		if ((x->nodeType == ::Xml_obj::Document)) {
HXLINE( 413)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE( 413)			if ((x->nodeType != ::Xml_obj::Element)) {
HXLINE( 413)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + x->nodeType));
            			}
HXDLIN( 413)			_hx_tmp = x->nodeName;
            		}
HXLINE( 415)		bool _hx_tmp1;
HXDLIN( 415)		if (!(x->exists(HX_("public",a9,80,f3,66)))) {
HXLINE( 415)			_hx_tmp1 = ( (bool)(defPublic) );
            		}
            		else {
HXLINE( 415)			_hx_tmp1 = true;
            		}
HXLINE( 416)		bool _hx_tmp2 = x->exists(HX_("final",76,5f,9a,00));
HXLINE( 417)		bool _hx_tmp3 = x->exists(HX_("override",4c,22,28,49));
HXLINE( 418)		 ::Dynamic _hx_tmp4;
HXDLIN( 418)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("line",f4,17,b3,47))) {
HXLINE( 418)			_hx_tmp4 = ::Std_obj::parseInt(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("line",f4,17,b3,47)));
            		}
            		else {
HXLINE( 418)			_hx_tmp4 = null();
            		}
HXLINE( 420)		 ::haxe::rtti::Rights _hx_tmp5;
HXDLIN( 420)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("get",96,80,4e,00))) {
HXLINE( 420)			_hx_tmp5 = this->mkRights(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("get",96,80,4e,00)));
            		}
            		else {
HXLINE( 420)			_hx_tmp5 = ::haxe::rtti::Rights_obj::RNormal_dyn();
            		}
HXLINE( 421)		 ::haxe::rtti::Rights _hx_tmp6;
HXDLIN( 421)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("set",a2,9b,57,00))) {
HXLINE( 421)			_hx_tmp6 = this->mkRights(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("set",a2,9b,57,00)));
            		}
            		else {
HXLINE( 421)			_hx_tmp6 = ::haxe::rtti::Rights_obj::RNormal_dyn();
            		}
HXLINE( 422)		::Array< ::String > _hx_tmp7;
HXDLIN( 422)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed))) {
HXLINE( 422)			_hx_tmp7 = this->mkTypeParams(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed)));
            		}
            		else {
HXLINE( 422)			_hx_tmp7 = ::Array_obj< ::String >::__new(0);
            		}
HXLINE( 423)		::Array< ::String > _hx_tmp8 = this->defplat();
HXLINE( 426)		::String _hx_tmp9;
HXDLIN( 426)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("expr",35,fd,1d,43))) {
HXLINE( 426)			_hx_tmp9 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("expr",35,fd,1d,43));
            		}
            		else {
HXLINE( 426)			_hx_tmp9 = null();
            		}
HXLINE( 412)		return  ::Dynamic(hx::Anon_obj::Create(14)
            			->setFixed(0,HX_("platforms",60,aa,82,92),_hx_tmp8)
            			->setFixed(1,HX_("isFinal",2c,03,20,9d),_hx_tmp2)
            			->setFixed(2,HX_("isPublic",33,1c,5d,bf),_hx_tmp1)
            			->setFixed(3,HX_("isOverride",56,34,d7,c3),_hx_tmp3)
            			->setFixed(4,HX_("params",46,fb,7a,ed),_hx_tmp7)
            			->setFixed(5,HX_("doc",78,42,4c,00),doc)
            			->setFixed(6,HX_("get",96,80,4e,00),_hx_tmp5)
            			->setFixed(7,HX_("set",a2,9b,57,00),_hx_tmp6)
            			->setFixed(8,HX_("expr",35,fd,1d,43),_hx_tmp9)
            			->setFixed(9,HX_("line",f4,17,b3,47),_hx_tmp4)
            			->setFixed(10,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(11,HX_("name",4b,72,ff,48),_hx_tmp)
            			->setFixed(12,HX_("overloads",b9,65,83,49),overloads)
            			->setFixed(13,HX_("type",ba,f2,08,4d),t));
            	}


HX_DEFINE_DYNAMIC_FUNC2(XmlParser_obj,xclassfield,return )

 ::Dynamic XmlParser_obj::xenum( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_430_xenum)
HXLINE( 431)		::Array< ::Dynamic> cl = ::Array_obj< ::Dynamic>::__new();
HXLINE( 432)		::String doc = null();
HXLINE( 433)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 434)		{
HXLINE( 434)			 ::Dynamic c = x->elements();
HXDLIN( 434)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 434)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 435)				::String _hx_tmp;
HXDLIN( 435)				if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 435)					_hx_tmp = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE( 435)					if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 435)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            					}
HXDLIN( 435)					_hx_tmp = c1->nodeName;
            				}
HXDLIN( 435)				if ((_hx_tmp == HX_("haxe_doc",9f,c6,83,5f))) {
HXLINE( 436)					doc = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(c1);
            				}
            				else {
HXLINE( 437)					::String _hx_tmp1;
HXDLIN( 437)					if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 437)						_hx_tmp1 = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 437)						if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 437)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            						}
HXDLIN( 437)						_hx_tmp1 = c1->nodeName;
            					}
HXDLIN( 437)					if ((_hx_tmp1 == HX_("meta",c5,4a,59,48))) {
HXLINE( 438)						meta = this->xmeta(c1);
            					}
            					else {
HXLINE( 440)						cl->push(this->xenumfield(c1));
            					}
            				}
            			}
            		}
HXLINE( 442)		::String _hx_tmp2;
HXDLIN( 442)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43))) {
HXLINE( 442)			_hx_tmp2 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43));
            		}
            		else {
HXLINE( 442)			_hx_tmp2 = null();
            		}
HXLINE( 443)		::String _hx_tmp3 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXLINE( 444)		::String _hx_tmp4;
HXDLIN( 444)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0))) {
HXLINE( 444)			_hx_tmp4 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0)));
            		}
            		else {
HXLINE( 444)			_hx_tmp4 = null();
            		}
HXLINE( 446)		bool _hx_tmp5 = x->exists(HX_("private",03,2d,6f,89));
HXLINE( 447)		bool _hx_tmp6 = x->exists(HX_("extern",60,d5,1a,c7));
HXLINE( 448)		::Array< ::String > _hx_tmp7 = this->mkTypeParams(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed)));
HXLINE( 441)		return  ::Dynamic(hx::Anon_obj::Create(10)
            			->setFixed(0,HX_("isPrivate",39,aa,6d,8d),_hx_tmp5)
            			->setFixed(1,HX_("platforms",60,aa,82,92),this->defplat())
            			->setFixed(2,HX_("module",ac,34,d3,c0),_hx_tmp4)
            			->setFixed(3,HX_("params",46,fb,7a,ed),_hx_tmp7)
            			->setFixed(4,HX_("doc",78,42,4c,00),doc)
            			->setFixed(5,HX_("isExtern",ea,70,84,1f),_hx_tmp6)
            			->setFixed(6,HX_("constructors",39,2e,c2,34),cl)
            			->setFixed(7,HX_("file",7c,ce,bb,43),_hx_tmp2)
            			->setFixed(8,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(9,HX_("path",a5,e5,51,4a),_hx_tmp3));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xenum,return )

 ::Dynamic XmlParser_obj::xenumfield( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_455_xenumfield)
HXLINE( 456)		::Array< ::Dynamic> args = null();
HXLINE( 457)		 ::Xml xdoc = ( ( ::Xml)(x->elementsNamed(HX_("haxe_doc",9f,c6,83,5f))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 458)		::Array< ::Dynamic> meta;
HXDLIN( 458)		if (::haxe::xml::_Fast::HasNodeAccess_Impl__obj::resolve(x,HX_("meta",c5,4a,59,48))) {
HXLINE( 458)			meta = this->xmeta(::haxe::xml::_Fast::NodeAccess_Impl__obj::resolve(x,HX_("meta",c5,4a,59,48)));
            		}
            		else {
HXLINE( 458)			meta = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 459)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("a",61,00,00,00))) {
HXLINE( 460)			::Array< ::String > names = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("a",61,00,00,00)).split(HX_(":",3a,00,00,00));
HXLINE( 461)			 ::Dynamic elts = x->elements();
HXLINE( 462)			args = ::Array_obj< ::Dynamic>::__new();
HXLINE( 463)			{
HXLINE( 463)				int _g = 0;
HXDLIN( 463)				while((_g < names->length)){
HXLINE( 463)					::String c = names->__get(_g);
HXDLIN( 463)					_g = (_g + 1);
HXLINE( 464)					bool opt = false;
HXLINE( 465)					if ((c.charAt(0) == HX_("?",3f,00,00,00))) {
HXLINE( 466)						opt = true;
HXLINE( 467)						c = c.substr(1,null());
            					}
HXLINE( 469)					args->push( ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("t",74,00,00,00),this->xtype(( ( ::Xml)(elts->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) )))
            						->setFixed(1,HX_("opt",33,9c,54,00),opt)
            						->setFixed(2,HX_("name",4b,72,ff,48),c)));
            				}
            			}
            		}
HXLINE( 477)		::String _hx_tmp;
HXDLIN( 477)		if ((x->nodeType == ::Xml_obj::Document)) {
HXLINE( 477)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE( 477)			if ((x->nodeType != ::Xml_obj::Element)) {
HXLINE( 477)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + x->nodeType));
            			}
HXDLIN( 477)			_hx_tmp = x->nodeName;
            		}
HXLINE( 479)		::String _hx_tmp1;
HXDLIN( 479)		if (hx::IsNull( xdoc )) {
HXLINE( 479)			_hx_tmp1 = null();
            		}
            		else {
HXLINE( 479)			bool _hx_tmp2;
HXDLIN( 479)			if ((xdoc->nodeType != ::Xml_obj::Document)) {
HXLINE( 479)				_hx_tmp2 = (xdoc->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 479)				_hx_tmp2 = false;
            			}
HXDLIN( 479)			if (_hx_tmp2) {
HXLINE( 479)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + xdoc->nodeType));
            			}
HXDLIN( 479)			 ::Xml this1 = xdoc;
HXDLIN( 479)			_hx_tmp1 = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(this1);
            		}
HXLINE( 476)		return  ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("platforms",60,aa,82,92),this->defplat())
            			->setFixed(1,HX_("doc",78,42,4c,00),_hx_tmp1)
            			->setFixed(2,HX_("args",5d,8d,74,40),args)
            			->setFixed(3,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(4,HX_("name",4b,72,ff,48),_hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xenumfield,return )

 ::Dynamic XmlParser_obj::xabstract( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_485_xabstract)
HXLINE( 486)		::String doc = null();
HXDLIN( 486)		 ::Dynamic impl = null();
HXDLIN( 486)		 ::haxe::rtti::CType athis = null();
HXLINE( 487)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 487)		::Array< ::Dynamic> to = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 487)		::Array< ::Dynamic> from = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 488)		{
HXLINE( 488)			 ::Dynamic c = x->elements();
HXDLIN( 488)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 488)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 489)				{
HXLINE( 489)					::String _g;
HXDLIN( 489)					if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 489)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 489)						if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 489)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            						}
HXDLIN( 489)						_g = c1->nodeName;
            					}
HXDLIN( 489)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("from",6a,a5,c2,43)) ){
HXLINE( 498)						 ::Dynamic t = c1->elements();
HXDLIN( 498)						while(( (bool)(t->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 498)							 ::Xml t1 = ( ( ::Xml)(t->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 499)							 ::Xml x1 = t1->firstElement();
HXDLIN( 499)							bool _hx_tmp;
HXDLIN( 499)							if ((x1->nodeType != ::Xml_obj::Document)) {
HXLINE( 499)								_hx_tmp = (x1->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 499)								_hx_tmp = false;
            							}
HXDLIN( 499)							if (_hx_tmp) {
HXLINE( 499)								HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + x1->nodeType));
            							}
HXDLIN( 499)							 ::Xml this1 = x1;
HXDLIN( 499)							 ::haxe::rtti::CType _hx_tmp1 = this->xtype(this1);
HXDLIN( 499)							::String _hx_tmp2;
HXDLIN( 499)							if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(t1,HX_("field",ba,94,93,00))) {
HXLINE( 499)								_hx_tmp2 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(t1,HX_("field",ba,94,93,00));
            							}
            							else {
HXLINE( 499)								_hx_tmp2 = null();
            							}
HXDLIN( 499)							from->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("t",74,00,00,00),_hx_tmp1)
            								->setFixed(1,HX_("field",ba,94,93,00),_hx_tmp2)));
            						}
HXLINE( 498)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_0==HX_("haxe_doc",9f,c6,83,5f)) ){
HXLINE( 491)						doc = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(c1);
HXDLIN( 491)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_0==HX_("impl",e0,7e,ba,45)) ){
HXLINE( 501)						impl = this->xclass(::haxe::xml::_Fast::NodeAccess_Impl__obj::resolve(c1,HX_("class",38,78,58,48)));
HXDLIN( 501)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_0==HX_("meta",c5,4a,59,48)) ){
HXLINE( 493)						meta = this->xmeta(c1);
HXDLIN( 493)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_0==HX_("this",5e,06,fc,4c)) ){
HXLINE( 503)						 ::Xml x2 = c1->firstElement();
HXDLIN( 503)						bool athis1;
HXDLIN( 503)						if ((x2->nodeType != ::Xml_obj::Document)) {
HXLINE( 503)							athis1 = (x2->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE( 503)							athis1 = false;
            						}
HXDLIN( 503)						if (athis1) {
HXLINE( 503)							HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + x2->nodeType));
            						}
HXDLIN( 503)						 ::Xml this2 = x2;
HXDLIN( 503)						athis = this->xtype(this2);
HXDLIN( 503)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_0==HX_("to",7b,65,00,00)) ){
HXLINE( 495)						 ::Dynamic t2 = c1->elements();
HXDLIN( 495)						while(( (bool)(t2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 495)							 ::Xml t3 = ( ( ::Xml)(t2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 496)							 ::Xml x3 = t3->firstElement();
HXDLIN( 496)							bool _hx_tmp3;
HXDLIN( 496)							if ((x3->nodeType != ::Xml_obj::Document)) {
HXLINE( 496)								_hx_tmp3 = (x3->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 496)								_hx_tmp3 = false;
            							}
HXDLIN( 496)							if (_hx_tmp3) {
HXLINE( 496)								HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + x3->nodeType));
            							}
HXDLIN( 496)							 ::Xml this3 = x3;
HXDLIN( 496)							 ::haxe::rtti::CType _hx_tmp4 = this->xtype(this3);
HXDLIN( 496)							::String _hx_tmp5;
HXDLIN( 496)							if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(t3,HX_("field",ba,94,93,00))) {
HXLINE( 496)								_hx_tmp5 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(t3,HX_("field",ba,94,93,00));
            							}
            							else {
HXLINE( 496)								_hx_tmp5 = null();
            							}
HXDLIN( 496)							to->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("t",74,00,00,00),_hx_tmp4)
            								->setFixed(1,HX_("field",ba,94,93,00),_hx_tmp5)));
            						}
HXLINE( 495)						goto _hx_goto_26;
            					}
            					/* default */{
HXLINE( 505)						this->xerror(c1);
            					}
            					_hx_goto_26:;
            				}
            			}
            		}
HXLINE( 508)		::String _hx_tmp6;
HXDLIN( 508)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43))) {
HXLINE( 508)			_hx_tmp6 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43));
            		}
            		else {
HXLINE( 508)			_hx_tmp6 = null();
            		}
HXLINE( 509)		::String _hx_tmp7 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXLINE( 510)		::String _hx_tmp8;
HXDLIN( 510)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0))) {
HXLINE( 510)			_hx_tmp8 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0)));
            		}
            		else {
HXLINE( 510)			_hx_tmp8 = null();
            		}
HXLINE( 512)		bool _hx_tmp9 = x->exists(HX_("private",03,2d,6f,89));
HXLINE( 513)		::Array< ::String > _hx_tmp10 = this->mkTypeParams(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed)));
HXLINE( 507)		return  ::Dynamic(hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("isPrivate",39,aa,6d,8d),_hx_tmp9)
            			->setFixed(1,HX_("platforms",60,aa,82,92),this->defplat())
            			->setFixed(2,HX_("module",ac,34,d3,c0),_hx_tmp8)
            			->setFixed(3,HX_("params",46,fb,7a,ed),_hx_tmp10)
            			->setFixed(4,HX_("to",7b,65,00,00),to)
            			->setFixed(5,HX_("doc",78,42,4c,00),doc)
            			->setFixed(6,HX_("athis",3f,4b,da,26),athis)
            			->setFixed(7,HX_("file",7c,ce,bb,43),_hx_tmp6)
            			->setFixed(8,HX_("from",6a,a5,c2,43),from)
            			->setFixed(9,HX_("impl",e0,7e,ba,45),impl)
            			->setFixed(10,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(11,HX_("path",a5,e5,51,4a),_hx_tmp7));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xabstract,return )

 ::Dynamic XmlParser_obj::xtypedef( ::Xml x){
            	HX_GC_STACKFRAME(&_hx_pos_00e093b263f67172_524_xtypedef)
HXLINE( 525)		::String doc = null();
HXLINE( 526)		 ::haxe::rtti::CType t = null();
HXLINE( 527)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 528)		{
HXLINE( 528)			 ::Dynamic c = x->elements();
HXDLIN( 528)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 528)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 529)				::String _hx_tmp;
HXDLIN( 529)				if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 529)					_hx_tmp = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE( 529)					if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 529)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            					}
HXDLIN( 529)					_hx_tmp = c1->nodeName;
            				}
HXDLIN( 529)				if ((_hx_tmp == HX_("haxe_doc",9f,c6,83,5f))) {
HXLINE( 530)					doc = ::haxe::xml::_Fast::Fast_Impl__obj::get_innerData(c1);
            				}
            				else {
HXLINE( 531)					::String _hx_tmp1;
HXDLIN( 531)					if ((c1->nodeType == ::Xml_obj::Document)) {
HXLINE( 531)						_hx_tmp1 = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 531)						if ((c1->nodeType != ::Xml_obj::Element)) {
HXLINE( 531)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + c1->nodeType));
            						}
HXDLIN( 531)						_hx_tmp1 = c1->nodeName;
            					}
HXDLIN( 531)					if ((_hx_tmp1 == HX_("meta",c5,4a,59,48))) {
HXLINE( 532)						meta = this->xmeta(c1);
            					}
            					else {
HXLINE( 534)						t = this->xtype(c1);
            					}
            				}
            			}
            		}
HXLINE( 535)		 ::haxe::ds::StringMap types =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 536)		if (hx::IsNotNull( this->curplatform )) {
HXLINE( 537)			types->set(this->curplatform,t);
            		}
HXLINE( 539)		::String _hx_tmp2;
HXDLIN( 539)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43))) {
HXLINE( 539)			_hx_tmp2 = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("file",7c,ce,bb,43));
            		}
            		else {
HXLINE( 539)			_hx_tmp2 = null();
            		}
HXLINE( 540)		::String _hx_tmp3 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXLINE( 541)		::String _hx_tmp4;
HXDLIN( 541)		if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0))) {
HXLINE( 541)			_hx_tmp4 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("module",ac,34,d3,c0)));
            		}
            		else {
HXLINE( 541)			_hx_tmp4 = null();
            		}
HXLINE( 543)		bool _hx_tmp5 = x->exists(HX_("private",03,2d,6f,89));
HXLINE( 544)		::Array< ::String > _hx_tmp6 = this->mkTypeParams(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("params",46,fb,7a,ed)));
HXLINE( 538)		return  ::Dynamic(hx::Anon_obj::Create(10)
            			->setFixed(0,HX_("isPrivate",39,aa,6d,8d),_hx_tmp5)
            			->setFixed(1,HX_("platforms",60,aa,82,92),this->defplat())
            			->setFixed(2,HX_("module",ac,34,d3,c0),_hx_tmp4)
            			->setFixed(3,HX_("params",46,fb,7a,ed),_hx_tmp6)
            			->setFixed(4,HX_("doc",78,42,4c,00),doc)
            			->setFixed(5,HX_("types",79,70,cb,1a),types)
            			->setFixed(6,HX_("file",7c,ce,bb,43),_hx_tmp2)
            			->setFixed(7,HX_("meta",c5,4a,59,48),meta)
            			->setFixed(8,HX_("path",a5,e5,51,4a),_hx_tmp3)
            			->setFixed(9,HX_("type",ba,f2,08,4d),t));
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xtypedef,return )

 ::haxe::rtti::CType XmlParser_obj::xtype( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_553_xtype)
HXDLIN( 553)		::String _g;
HXDLIN( 553)		if ((x->nodeType == ::Xml_obj::Document)) {
HXDLIN( 553)			_g = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXDLIN( 553)			if ((x->nodeType != ::Xml_obj::Element)) {
HXDLIN( 553)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + x->nodeType));
            			}
HXDLIN( 553)			_g = x->nodeName;
            		}
HXDLIN( 553)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 590)			::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new();
HXLINE( 591)			{
HXLINE( 591)				 ::Dynamic f = x->elements();
HXDLIN( 591)				while(( (bool)(f->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 591)					 ::Xml f1 = ( ( ::Xml)(f->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 592)					 ::Dynamic f2 = this->xclassfield(f1,true);
HXLINE( 593)					f2->__SetField(HX_("platforms",60,aa,82,92),::Array_obj< ::String >::__new(),hx::paccDynamic);
HXLINE( 594)					fields->push(f2);
            				}
            			}
HXLINE( 596)			return ::haxe::rtti::CType_obj::CAnonymous(fields);
HXLINE( 589)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 559)			::String _hx_tmp = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXDLIN( 559)			return ::haxe::rtti::CType_obj::CClass(_hx_tmp,this->xtypeparams(x));
HXDLIN( 559)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 598)			 ::haxe::rtti::CType t = null();
HXLINE( 599)			 ::Xml tx = x->firstElement();
HXLINE( 600)			if (hx::IsNotNull( tx )) {
HXLINE( 601)				bool t1;
HXDLIN( 601)				if ((tx->nodeType != ::Xml_obj::Document)) {
HXLINE( 601)					t1 = (tx->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 601)					t1 = false;
            				}
HXDLIN( 601)				if (t1) {
HXLINE( 601)					HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + tx->nodeType));
            				}
HXDLIN( 601)				 ::Xml this1 = tx;
HXDLIN( 601)				t = this->xtype(this1);
            			}
HXLINE( 602)			return ::haxe::rtti::CType_obj::CDynamic(t);
HXLINE( 597)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 557)			::String _hx_tmp1 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXDLIN( 557)			return ::haxe::rtti::CType_obj::CEnum(_hx_tmp1,this->xtypeparams(x));
HXDLIN( 557)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 565)			::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE( 566)			::Array< ::String > aname = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("a",61,00,00,00)).split(HX_(":",3a,00,00,00));
HXLINE( 567)			 ::Dynamic eargs = aname->iterator();
HXLINE( 568)			 ::Dynamic evalues;
HXDLIN( 568)			if (::haxe::xml::_Fast::HasAttribAccess_Impl__obj::resolve(x,HX_("v",76,00,00,00))) {
HXLINE( 568)				evalues = ::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("v",76,00,00,00)).split(HX_(":",3a,00,00,00))->iterator();
            			}
            			else {
HXLINE( 568)				evalues = null();
            			}
HXLINE( 569)			{
HXLINE( 569)				 ::Dynamic e = x->elements();
HXDLIN( 569)				while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 569)					 ::Xml e1 = ( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 570)					bool opt = false;
HXLINE( 571)					::String a;
HXDLIN( 571)					if (( (bool)(eargs->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )) {
HXLINE( 571)						a = ( (::String)(eargs->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            					}
            					else {
HXLINE( 571)						a = null();
            					}
HXLINE( 572)					if (hx::IsNull( a )) {
HXLINE( 573)						a = HX_("",00,00,00,00);
            					}
HXLINE( 574)					if ((a.charAt(0) == HX_("?",3f,00,00,00))) {
HXLINE( 575)						opt = true;
HXLINE( 576)						a = a.substr(1,null());
            					}
HXLINE( 578)					::String v;
HXDLIN( 578)					bool v1;
HXDLIN( 578)					if (hx::IsNotNull( evalues )) {
HXLINE( 578)						v1 = !(( (bool)(evalues->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ));
            					}
            					else {
HXLINE( 578)						v1 = true;
            					}
HXDLIN( 578)					if (v1) {
HXLINE( 578)						v = null();
            					}
            					else {
HXLINE( 578)						v = ( (::String)(evalues->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            					}
HXLINE( 582)					 ::haxe::rtti::CType _hx_tmp2 = this->xtype(e1);
HXLINE( 583)					::String _hx_tmp3;
HXDLIN( 583)					if ((v == HX_("",00,00,00,00))) {
HXLINE( 583)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 583)						_hx_tmp3 = v;
            					}
HXLINE( 579)					args->push( ::Dynamic(hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("t",74,00,00,00),_hx_tmp2)
            						->setFixed(1,HX_("opt",33,9c,54,00),opt)
            						->setFixed(2,HX_("value",71,7f,b8,31),_hx_tmp3)
            						->setFixed(3,HX_("name",4b,72,ff,48),a)));
            				}
            			}
HXLINE( 586)			 ::Dynamic ret = args->__get((args->length - 1));
HXLINE( 587)			args->remove(ret);
HXLINE( 588)			return ::haxe::rtti::CType_obj::CFunction(args, ::Dynamic(ret->__Field(HX_("t",74,00,00,00),hx::paccDynamic)));
HXLINE( 564)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("t",74,00,00,00)) ){
HXLINE( 561)			::String _hx_tmp4 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXDLIN( 561)			return ::haxe::rtti::CType_obj::CTypedef(_hx_tmp4,this->xtypeparams(x));
HXDLIN( 561)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("unknown",8a,23,7b,e1)) ){
HXLINE( 555)			return ::haxe::rtti::CType_obj::CUnknown_dyn();
HXDLIN( 555)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("x",78,00,00,00)) ){
HXLINE( 563)			::String _hx_tmp5 = this->mkPath(::haxe::xml::_Fast::AttribAccess_Impl__obj::resolve(x,HX_("path",a5,e5,51,4a)));
HXDLIN( 563)			return ::haxe::rtti::CType_obj::CAbstract(_hx_tmp5,this->xtypeparams(x));
HXDLIN( 563)			goto _hx_goto_32;
            		}
            		/* default */{
HXLINE( 604)			return this->xerror(x);
            		}
            		_hx_goto_32:;
HXLINE( 553)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xtype,return )

::Array< ::Dynamic> XmlParser_obj::xtypeparams( ::Xml x){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_608_xtypeparams)
HXLINE( 609)		::Array< ::Dynamic> p = ::Array_obj< ::Dynamic>::__new();
HXLINE( 610)		{
HXLINE( 610)			 ::Dynamic c = x->elements();
HXDLIN( 610)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 610)				 ::Xml c1 = ( ( ::Xml)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 611)				p->push(this->xtype(c1));
            			}
            		}
HXLINE( 612)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(XmlParser_obj,xtypeparams,return )

::Array< ::String > XmlParser_obj::defplat(){
            	HX_STACKFRAME(&_hx_pos_00e093b263f67172_615_defplat)
HXLINE( 616)		::Array< ::String > l = ::Array_obj< ::String >::__new();
HXLINE( 617)		if (hx::IsNotNull( this->curplatform )) {
HXLINE( 618)			l->push(this->curplatform);
            		}
HXLINE( 619)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(XmlParser_obj,defplat,return )


hx::ObjectPtr< XmlParser_obj > XmlParser_obj::__new() {
	hx::ObjectPtr< XmlParser_obj > __this = new XmlParser_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< XmlParser_obj > XmlParser_obj::__alloc(hx::Ctx *_hx_ctx) {
	XmlParser_obj *__this = (XmlParser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(XmlParser_obj), true, "haxe.rtti.XmlParser"));
	*(void **)__this = XmlParser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

XmlParser_obj::XmlParser_obj()
{
}

void XmlParser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(XmlParser);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(curplatform,"curplatform");
	HX_MARK_END_CLASS();
}

void XmlParser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(curplatform,"curplatform");
}

hx::Val XmlParser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xmeta") ) { return hx::Val( xmeta_dyn() ); }
		if (HX_FIELD_EQ(inName,"xpath") ) { return hx::Val( xpath_dyn() ); }
		if (HX_FIELD_EQ(inName,"xenum") ) { return hx::Val( xenum_dyn() ); }
		if (HX_FIELD_EQ(inName,"xtype") ) { return hx::Val( xtype_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mkPath") ) { return hx::Val( mkPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"xerror") ) { return hx::Val( xerror_dyn() ); }
		if (HX_FIELD_EQ(inName,"xclass") ) { return hx::Val( xclass_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"defplat") ) { return hx::Val( defplat_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mkRights") ) { return hx::Val( mkRights_dyn() ); }
		if (HX_FIELD_EQ(inName,"xtypedef") ) { return hx::Val( xtypedef_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xabstract") ) { return hx::Val( xabstract_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xoverloads") ) { return hx::Val( xoverloads_dyn() ); }
		if (HX_FIELD_EQ(inName,"xenumfield") ) { return hx::Val( xenumfield_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curplatform") ) { return hx::Val( curplatform ); }
		if (HX_FIELD_EQ(inName,"xclassfield") ) { return hx::Val( xclassfield_dyn() ); }
		if (HX_FIELD_EQ(inName,"xtypeparams") ) { return hx::Val( xtypeparams_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mkTypeParams") ) { return hx::Val( mkTypeParams_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"processElement") ) { return hx::Val( processElement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val XmlParser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curplatform") ) { curplatform=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void XmlParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("curplatform",33,b8,86,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo XmlParser_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(XmlParser_obj,root),HX_("root",22,ee,ae,4b)},
	{hx::fsString,(int)offsetof(XmlParser_obj,curplatform),HX_("curplatform",33,b8,86,0f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *XmlParser_obj_sStaticStorageInfo = 0;
#endif

static ::String XmlParser_obj_sMemberFields[] = {
	HX_("root",22,ee,ae,4b),
	HX_("curplatform",33,b8,86,0f),
	HX_("mkPath",23,78,f1,65),
	HX_("mkTypeParams",9e,ae,1b,38),
	HX_("mkRights",15,03,ae,3e),
	HX_("xerror",50,18,fd,6d),
	HX_("processElement",0d,f0,b2,b8),
	HX_("xmeta",3d,e7,6e,60),
	HX_("xoverloads",41,96,6b,6c),
	HX_("xpath",1d,82,67,62),
	HX_("xclass",c0,c4,2b,43),
	HX_("xclassfield",fa,97,c6,18),
	HX_("xenum",79,07,2c,5b),
	HX_("xenumfield",a1,d6,9c,86),
	HX_("xabstract",5a,f9,a7,89),
	HX_("xtypedef",d3,b5,7d,c8),
	HX_("xtype",32,8f,1e,65),
	HX_("xtypeparams",f8,fb,9f,99),
	HX_("defplat",34,2e,a7,a5),
	::String(null()) };

hx::Class XmlParser_obj::__mClass;

void XmlParser_obj::__register()
{
	XmlParser_obj _hx_dummy;
	XmlParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.rtti.XmlParser",c7,27,12,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(XmlParser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< XmlParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = XmlParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = XmlParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace rtti
