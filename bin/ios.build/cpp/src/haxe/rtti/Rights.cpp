// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_rtti_Rights
#include <haxe/rtti/Rights.h>
#endif
namespace haxe{
namespace rtti{

::haxe::rtti::Rights Rights_obj::RCall(::String m)
{
	return hx::CreateEnum< Rights_obj >(HX_("RCall",10,d6,6e,63),2,1)->_hx_init(0,m);
}

::haxe::rtti::Rights Rights_obj::RDynamic;

::haxe::rtti::Rights Rights_obj::RInline;

::haxe::rtti::Rights Rights_obj::RMethod;

::haxe::rtti::Rights Rights_obj::RNo;

::haxe::rtti::Rights Rights_obj::RNormal;

bool Rights_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("RCall",10,d6,6e,63)) { outValue = Rights_obj::RCall_dyn(); return true; }
	if (inName==HX_("RDynamic",4d,55,8f,55)) { outValue = Rights_obj::RDynamic; return true; }
	if (inName==HX_("RInline",4b,48,b4,1f)) { outValue = Rights_obj::RInline; return true; }
	if (inName==HX_("RMethod",d3,74,cf,8f)) { outValue = Rights_obj::RMethod; return true; }
	if (inName==HX_("RNo",33,7d,3e,00)) { outValue = Rights_obj::RNo; return true; }
	if (inName==HX_("RNormal",19,f0,dd,b6)) { outValue = Rights_obj::RNormal; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Rights_obj)

int Rights_obj::__FindIndex(::String inName)
{
	if (inName==HX_("RCall",10,d6,6e,63)) return 2;
	if (inName==HX_("RDynamic",4d,55,8f,55)) return 4;
	if (inName==HX_("RInline",4b,48,b4,1f)) return 5;
	if (inName==HX_("RMethod",d3,74,cf,8f)) return 3;
	if (inName==HX_("RNo",33,7d,3e,00)) return 1;
	if (inName==HX_("RNormal",19,f0,dd,b6)) return 0;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rights_obj,RCall,return)

int Rights_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("RCall",10,d6,6e,63)) return 1;
	if (inName==HX_("RDynamic",4d,55,8f,55)) return 0;
	if (inName==HX_("RInline",4b,48,b4,1f)) return 0;
	if (inName==HX_("RMethod",d3,74,cf,8f)) return 0;
	if (inName==HX_("RNo",33,7d,3e,00)) return 0;
	if (inName==HX_("RNormal",19,f0,dd,b6)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Rights_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("RCall",10,d6,6e,63)) return RCall_dyn();
	if (inName==HX_("RDynamic",4d,55,8f,55)) return RDynamic;
	if (inName==HX_("RInline",4b,48,b4,1f)) return RInline;
	if (inName==HX_("RMethod",d3,74,cf,8f)) return RMethod;
	if (inName==HX_("RNo",33,7d,3e,00)) return RNo;
	if (inName==HX_("RNormal",19,f0,dd,b6)) return RNormal;
	return super::__Field(inName,inCallProp);
}

static ::String Rights_obj_sStaticFields[] = {
	HX_("RNormal",19,f0,dd,b6),
	HX_("RNo",33,7d,3e,00),
	HX_("RCall",10,d6,6e,63),
	HX_("RMethod",d3,74,cf,8f),
	HX_("RDynamic",4d,55,8f,55),
	HX_("RInline",4b,48,b4,1f),
	::String(null())
};

hx::Class Rights_obj::__mClass;

Dynamic __Create_Rights_obj() { return new Rights_obj; }

void Rights_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_("haxe.rtti.Rights",c6,1e,f3,80), hx::TCanCast< Rights_obj >,Rights_obj_sStaticFields,0,
	&__Create_Rights_obj, &__Create,
	&super::__SGetClass(), &CreateRights_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Rights_obj::__GetStatic;
}

void Rights_obj::__boot()
{
RDynamic = hx::CreateConstEnum< Rights_obj >(HX_("RDynamic",4d,55,8f,55),4);
RInline = hx::CreateConstEnum< Rights_obj >(HX_("RInline",4b,48,b4,1f),5);
RMethod = hx::CreateConstEnum< Rights_obj >(HX_("RMethod",d3,74,cf,8f),3);
RNo = hx::CreateConstEnum< Rights_obj >(HX_("RNo",33,7d,3e,00),1);
RNormal = hx::CreateConstEnum< Rights_obj >(HX_("RNormal",19,f0,dd,b6),0);
}


} // end namespace haxe
} // end namespace rtti
