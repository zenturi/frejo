// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_rtti_Rtti
#include <haxe/rtti/Rtti.h>
#endif
#ifndef INCLUDED_haxe_rtti_TypeTree
#include <haxe/rtti/TypeTree.h>
#endif
#ifndef INCLUDED_haxe_rtti_XmlParser
#include <haxe/rtti/XmlParser.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bc27424a88b3a170_41_getRtti,"haxe.rtti.Rtti","getRtti",0xd34572a5,"haxe.rtti.Rtti.getRtti","/usr/local/lib/haxe/std/haxe/rtti/Rtti.hx",41,0x5c9cdc1b)
namespace haxe{
namespace rtti{

void Rtti_obj::__construct() { }

Dynamic Rtti_obj::__CreateEmpty() { return new Rtti_obj; }

void *Rtti_obj::_hx_vtable = 0;

Dynamic Rtti_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rtti_obj > _hx_result = new Rtti_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Rtti_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x390ed574;
}

 ::Dynamic Rtti_obj::getRtti(hx::Class c){
            	HX_GC_STACKFRAME(&_hx_pos_bc27424a88b3a170_41_getRtti)
HXLINE(  42)		::String rtti = ( (::String)(::Reflect_obj::field(c,HX_("__rtti",d7,20,ab,fa))) );
HXLINE(  43)		if (hx::IsNull( rtti )) {
HXLINE(  44)			HX_STACK_DO_THROW(((HX_("Class ",08,2d,a5,39) + ::Type_obj::getClassName(c)) + HX_(" has no RTTI information, consider adding @:rtti",79,e3,ee,20)));
            		}
HXLINE(  46)		 ::Xml x = ::Xml_obj::parse(rtti)->firstElement();
HXLINE(  47)		 ::haxe::rtti::TypeTree infos =  ::haxe::rtti::XmlParser_obj::__alloc( HX_CTX )->processElement(x);
HXLINE(  48)		if ((infos->_hx_getIndex() == 1)) {
HXLINE(  49)			 ::Dynamic c1 = infos->_hx_getObject(0);
HXDLIN(  49)			return c1;
            		}
            		else {
HXLINE(  50)			 ::haxe::rtti::TypeTree t = infos;
HXDLIN(  50)			HX_STACK_DO_THROW((HX_("Enum mismatch: expected TClassDecl but found ",5a,0e,42,c4) + ::Std_obj::string(t)));
            		}
HXLINE(  48)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rtti_obj,getRtti,return )


Rtti_obj::Rtti_obj()
{
}

bool Rtti_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getRtti") ) { outValue = getRtti_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Rtti_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rtti_obj_sStaticStorageInfo = 0;
#endif

hx::Class Rtti_obj::__mClass;

static ::String Rtti_obj_sStaticFields[] = {
	HX_("getRtti",6d,6d,35,1e),
	::String(null())
};

void Rtti_obj::__register()
{
	Rtti_obj _hx_dummy;
	Rtti_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.rtti.Rtti",a6,6d,c0,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rtti_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rtti_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Rtti_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rtti_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rtti_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace rtti
