// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewMap
#include <mmvc/api/IViewMap.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMap
#include <mmvc/base/ViewMap.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMapBase
#include <mmvc/base/ViewMapBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f02dfc3eb265fe76_50_new,"mmvc.base.ViewMap","new",0x13701cad,"mmvc.base.ViewMap.new","mmvc/base/ViewMap.hx",50,0x1b5f6bc3)
HX_LOCAL_STACK_FRAME(_hx_pos_f02dfc3eb265fe76_100_addListeners,"mmvc.base.ViewMap","addListeners",0x8e42c931,"mmvc.base.ViewMap.addListeners","mmvc/base/ViewMap.hx",100,0x1b5f6bc3)
HX_LOCAL_STACK_FRAME(_hx_pos_f02dfc3eb265fe76_107_removeListeners,"mmvc.base.ViewMap","removeListeners",0xa1f10c68,"mmvc.base.ViewMap.removeListeners","mmvc/base/ViewMap.hx",107,0x1b5f6bc3)
HX_LOCAL_STACK_FRAME(_hx_pos_f02dfc3eb265fe76_114_onViewAdded,"mmvc.base.ViewMap","onViewAdded",0x2c000849,"mmvc.base.ViewMap.onViewAdded","mmvc/base/ViewMap.hx",114,0x1b5f6bc3)
HX_LOCAL_STACK_FRAME(_hx_pos_f02dfc3eb265fe76_151_injectInto,"mmvc.base.ViewMap","injectInto",0x1ff75f24,"mmvc.base.ViewMap.injectInto","mmvc/base/ViewMap.hx",151,0x1b5f6bc3)
namespace mmvc{
namespace base{

void ViewMap_obj::__construct(::Dynamic contextView, ::minject::Injector injector){
            	HX_GC_STACKFRAME(&_hx_pos_f02dfc3eb265fe76_50_new)
HXLINE(  51)		super::__construct(contextView,injector);
HXLINE(  52)		this->mappedPackages = ::cpp::VirtualArray_obj::__new();
HXLINE(  53)		this->mappedTypes =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  54)		this->injectedViews =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}

Dynamic ViewMap_obj::__CreateEmpty() { return new ViewMap_obj; }

void *ViewMap_obj::_hx_vtable = 0;

Dynamic ViewMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ViewMap_obj > _hx_result = new ViewMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ViewMap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6dcb1a2a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6dcb1a2a;
	} else {
		return inClassId==(int)0x7f74d869;
	}
}

static ::mmvc::api::IViewMap_obj _hx_mmvc_base_ViewMap__hx_mmvc_api_IViewMap= {
};

void *ViewMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x5d4fa11b: return &_hx_mmvc_base_ViewMap__hx_mmvc_api_IViewMap;
	}
	return super::_hx_getInterface(inHash);
}

void ViewMap_obj::addListeners(){
            	HX_STACKFRAME(&_hx_pos_f02dfc3eb265fe76_100_addListeners)
HXLINE( 101)		bool _hx_tmp;
HXDLIN( 101)		if (hx::IsNotNull( this->contextView )) {
HXLINE( 101)			_hx_tmp = !(this->enabled);
            		}
            		else {
HXLINE( 101)			_hx_tmp = true;
            		}
HXDLIN( 101)		if (_hx_tmp) {
HXLINE( 101)			return;
            		}
HXLINE( 102)		this->contextView->__SetField(HX_("viewAdded",1b,44,d8,5c),this->onViewAdded_dyn(),hx::paccDynamic);
HXLINE( 103)		this->contextView->__SetField(HX_("viewRemoved",bb,5b,13,d5),this->onViewAdded_dyn(),hx::paccDynamic);
            	}


void ViewMap_obj::removeListeners(){
            	HX_STACKFRAME(&_hx_pos_f02dfc3eb265fe76_107_removeListeners)
HXLINE( 108)		if (hx::IsNull( this->contextView )) {
HXLINE( 108)			return;
            		}
HXLINE( 109)		this->contextView->__SetField(HX_("viewAdded",1b,44,d8,5c),null(),hx::paccDynamic);
HXLINE( 110)		this->contextView->__SetField(HX_("viewRemoved",bb,5b,13,d5),null(),hx::paccDynamic);
            	}


void ViewMap_obj::onViewAdded( ::Dynamic view){
            	HX_STACKFRAME(&_hx_pos_f02dfc3eb265fe76_114_onViewAdded)
HXLINE( 115)		if (this->injectedViews->exists(view)) {
HXLINE( 115)			return;
            		}
HXLINE( 117)		{
HXLINE( 117)			 ::Dynamic type = this->mappedTypes->iterator();
HXDLIN( 117)			while(( (bool)(type->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 117)				hx::Class type1 = type->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 119)				if (::Std_obj::is(view,type1)) {
HXLINE( 121)					this->injectInto(view);
HXLINE( 122)					return;
            				}
            			}
            		}
HXLINE( 126)		int len = this->mappedPackages->get_length();
HXLINE( 128)		if ((len > 0)) {
HXLINE( 130)			::String className = ::Type_obj::getClassName(::Type_obj::getClass(view));
HXLINE( 132)			{
HXLINE( 132)				int _g1 = 0;
HXDLIN( 132)				int _g = len;
HXDLIN( 132)				while((_g1 < _g)){
HXLINE( 132)					_g1 = (_g1 + 1);
HXDLIN( 132)					int i = (_g1 - 1);
HXLINE( 134)					::String packageName = ( (::String)(this->mappedPackages->__get(i)) );
HXLINE( 136)					if ((className.indexOf(packageName,null()) == 0)) {
HXLINE( 138)						this->injectInto(view);
HXLINE( 139)						return;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ViewMap_obj,onViewAdded,(void))

void ViewMap_obj::injectInto( ::Dynamic view){
            	HX_STACKFRAME(&_hx_pos_f02dfc3eb265fe76_151_injectInto)
HXLINE( 152)		this->injector->injectInto(view);
HXLINE( 153)		this->injectedViews->set(view,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ViewMap_obj,injectInto,(void))


hx::ObjectPtr< ViewMap_obj > ViewMap_obj::__new(::Dynamic contextView, ::minject::Injector injector) {
	hx::ObjectPtr< ViewMap_obj > __this = new ViewMap_obj();
	__this->__construct(contextView,injector);
	return __this;
}

hx::ObjectPtr< ViewMap_obj > ViewMap_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::minject::Injector injector) {
	ViewMap_obj *__this = (ViewMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ViewMap_obj), true, "mmvc.base.ViewMap"));
	*(void **)__this = ViewMap_obj::_hx_vtable;
	__this->__construct(contextView,injector);
	return __this;
}

ViewMap_obj::ViewMap_obj()
{
}

void ViewMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ViewMap);
	HX_MARK_MEMBER_NAME(mappedPackages,"mappedPackages");
	HX_MARK_MEMBER_NAME(mappedTypes,"mappedTypes");
	HX_MARK_MEMBER_NAME(injectedViews,"injectedViews");
	 ::mmvc::base::ViewMapBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ViewMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mappedPackages,"mappedPackages");
	HX_VISIT_MEMBER_NAME(mappedTypes,"mappedTypes");
	HX_VISIT_MEMBER_NAME(injectedViews,"injectedViews");
	 ::mmvc::base::ViewMapBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ViewMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"injectInto") ) { return hx::Val( injectInto_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mappedTypes") ) { return hx::Val( mappedTypes ); }
		if (HX_FIELD_EQ(inName,"onViewAdded") ) { return hx::Val( onViewAdded_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addListeners") ) { return hx::Val( addListeners_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"injectedViews") ) { return hx::Val( injectedViews ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mappedPackages") ) { return hx::Val( mappedPackages ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeListeners") ) { return hx::Val( removeListeners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ViewMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mappedTypes") ) { mappedTypes=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"injectedViews") ) { injectedViews=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mappedPackages") ) { mappedPackages=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ViewMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mappedPackages",00,e5,7f,cd));
	outFields->push(HX_("mappedTypes",c6,c3,3b,1c));
	outFields->push(HX_("injectedViews",1e,df,b7,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ViewMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ViewMap_obj,mappedPackages),HX_("mappedPackages",00,e5,7f,cd)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(ViewMap_obj,mappedTypes),HX_("mappedTypes",c6,c3,3b,1c)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(ViewMap_obj,injectedViews),HX_("injectedViews",1e,df,b7,c1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ViewMap_obj_sStaticStorageInfo = 0;
#endif

static ::String ViewMap_obj_sMemberFields[] = {
	HX_("mappedPackages",00,e5,7f,cd),
	HX_("mappedTypes",c6,c3,3b,1c),
	HX_("injectedViews",1e,df,b7,c1),
	HX_("addListeners",1e,87,e2,f2),
	HX_("removeListeners",9b,00,ad,34),
	HX_("onViewAdded",fc,26,1b,7f),
	HX_("injectInto",d1,d7,85,29),
	::String(null()) };

hx::Class ViewMap_obj::__mClass;

void ViewMap_obj::__register()
{
	ViewMap_obj _hx_dummy;
	ViewMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.base.ViewMap",3b,42,47,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ViewMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ViewMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ViewMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ViewMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace base
