// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_ITriggerMap
#include <mmvc/api/ITriggerMap.h>
#endif
#ifndef INCLUDED_mmvc_base_TriggerMap
#include <mmvc/base/TriggerMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_80643b951edd4de2_47_new,"mmvc.base.TriggerMap","new",0xd01016b2,"mmvc.base.TriggerMap.new","mmvc/base/TriggerMap.hx",47,0x045b2c9e)
namespace mmvc{
namespace base{

void TriggerMap_obj::__construct( ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_80643b951edd4de2_47_new)
HXDLIN(  47)		this->injector = injector;
            	}

Dynamic TriggerMap_obj::__CreateEmpty() { return new TriggerMap_obj; }

void *TriggerMap_obj::_hx_vtable = 0;

Dynamic TriggerMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TriggerMap_obj > _hx_result = new TriggerMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TriggerMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1213df6e;
}

static ::mmvc::api::ITriggerMap_obj _hx_mmvc_base_TriggerMap__hx_mmvc_api_ITriggerMap= {
};

void *TriggerMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x050cc2e0: return &_hx_mmvc_base_TriggerMap__hx_mmvc_api_ITriggerMap;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


hx::ObjectPtr< TriggerMap_obj > TriggerMap_obj::__new( ::minject::Injector injector) {
	hx::ObjectPtr< TriggerMap_obj > __this = new TriggerMap_obj();
	__this->__construct(injector);
	return __this;
}

hx::ObjectPtr< TriggerMap_obj > TriggerMap_obj::__alloc(hx::Ctx *_hx_ctx, ::minject::Injector injector) {
	TriggerMap_obj *__this = (TriggerMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TriggerMap_obj), true, "mmvc.base.TriggerMap"));
	*(void **)__this = TriggerMap_obj::_hx_vtable;
	__this->__construct(injector);
	return __this;
}

TriggerMap_obj::TriggerMap_obj()
{
}

void TriggerMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TriggerMap);
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_END_CLASS();
}

void TriggerMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(injector,"injector");
}

hx::Val TriggerMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( injector ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TriggerMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriggerMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("injector",f4,31,ff,1e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TriggerMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(TriggerMap_obj,injector),HX_("injector",f4,31,ff,1e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TriggerMap_obj_sStaticStorageInfo = 0;
#endif

static ::String TriggerMap_obj_sMemberFields[] = {
	HX_("injector",f4,31,ff,1e),
	::String(null()) };

hx::Class TriggerMap_obj::__mClass;

void TriggerMap_obj::__register()
{
	TriggerMap_obj _hx_dummy;
	TriggerMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.base.TriggerMap",c0,95,f6,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TriggerMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TriggerMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriggerMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriggerMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace base
