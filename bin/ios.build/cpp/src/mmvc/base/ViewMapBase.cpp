// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMapBase
#include <mmvc/base/ViewMapBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_79311e293f9adffc_46_new,"mmvc.base.ViewMapBase","new",0x15de96de,"mmvc.base.ViewMapBase.new","mmvc/base/ViewMapBase.hx",46,0xb326b2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_79311e293f9adffc_55_set_contextView,"mmvc.base.ViewMapBase","set_contextView",0x5a59d815,"mmvc.base.ViewMapBase.set_contextView","mmvc/base/ViewMapBase.hx",55,0xb326b2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_79311e293f9adffc_66_set_enabled,"mmvc.base.ViewMapBase","set_enabled",0x482ae022,"mmvc.base.ViewMapBase.set_enabled","mmvc/base/ViewMapBase.hx",66,0xb326b2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_79311e293f9adffc_76_addListeners,"mmvc.base.ViewMapBase","addListeners",0x197600e0,"mmvc.base.ViewMapBase.addListeners","mmvc/base/ViewMapBase.hx",76,0xb326b2b2)
HX_LOCAL_STACK_FRAME(_hx_pos_79311e293f9adffc_77_removeListeners,"mmvc.base.ViewMapBase","removeListeners",0xa7068c19,"mmvc.base.ViewMapBase.removeListeners","mmvc/base/ViewMapBase.hx",77,0xb326b2b2)
namespace mmvc{
namespace base{

void ViewMapBase_obj::__construct(::Dynamic contextView, ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_79311e293f9adffc_46_new)
HXLINE(  47)		this->viewListenerCount = 0;
HXLINE(  48)		this->set_enabled(true);
HXLINE(  49)		this->injector = injector;
HXLINE(  51)		this->set_contextView(contextView);
            	}

Dynamic ViewMapBase_obj::__CreateEmpty() { return new ViewMapBase_obj; }

void *ViewMapBase_obj::_hx_vtable = 0;

Dynamic ViewMapBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ViewMapBase_obj > _hx_result = new ViewMapBase_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ViewMapBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6dcb1a2a;
}

::Dynamic ViewMapBase_obj::set_contextView(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_79311e293f9adffc_55_set_contextView)
HXLINE(  56)		if (hx::IsNotEq( value,this->contextView )) {
HXLINE(  58)			this->removeListeners();
HXLINE(  59)			this->contextView = value;
HXLINE(  60)			if ((this->viewListenerCount > 0)) {
HXLINE(  60)				this->addListeners();
            			}
            		}
HXLINE(  62)		return this->contextView;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ViewMapBase_obj,set_contextView,return )

bool ViewMapBase_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_79311e293f9adffc_66_set_enabled)
HXLINE(  67)		if ((value != this->enabled)) {
HXLINE(  69)			this->removeListeners();
HXLINE(  70)			this->enabled = value;
HXLINE(  71)			if ((this->viewListenerCount > 0)) {
HXLINE(  71)				this->addListeners();
            			}
            		}
HXLINE(  73)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ViewMapBase_obj,set_enabled,return )

void ViewMapBase_obj::addListeners(){
            	HX_STACKFRAME(&_hx_pos_79311e293f9adffc_76_addListeners)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ViewMapBase_obj,addListeners,(void))

void ViewMapBase_obj::removeListeners(){
            	HX_STACKFRAME(&_hx_pos_79311e293f9adffc_77_removeListeners)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ViewMapBase_obj,removeListeners,(void))


hx::ObjectPtr< ViewMapBase_obj > ViewMapBase_obj::__new(::Dynamic contextView, ::minject::Injector injector) {
	hx::ObjectPtr< ViewMapBase_obj > __this = new ViewMapBase_obj();
	__this->__construct(contextView,injector);
	return __this;
}

hx::ObjectPtr< ViewMapBase_obj > ViewMapBase_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::minject::Injector injector) {
	ViewMapBase_obj *__this = (ViewMapBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ViewMapBase_obj), true, "mmvc.base.ViewMapBase"));
	*(void **)__this = ViewMapBase_obj::_hx_vtable;
	__this->__construct(contextView,injector);
	return __this;
}

ViewMapBase_obj::ViewMapBase_obj()
{
}

void ViewMapBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ViewMapBase);
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_MEMBER_NAME(viewListenerCount,"viewListenerCount");
	HX_MARK_MEMBER_NAME(contextView,"contextView");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_END_CLASS();
}

void ViewMapBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(injector,"injector");
	HX_VISIT_MEMBER_NAME(viewListenerCount,"viewListenerCount");
	HX_VISIT_MEMBER_NAME(contextView,"contextView");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
}

hx::Val ViewMapBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( injector ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { return hx::Val( contextView ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return hx::Val( set_enabled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addListeners") ) { return hx::Val( addListeners_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_contextView") ) { return hx::Val( set_contextView_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeListeners") ) { return hx::Val( removeListeners_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"viewListenerCount") ) { return hx::Val( viewListenerCount ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ViewMapBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enabled(inValue.Cast< bool >()) );enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_contextView(inValue.Cast< ::Dynamic >()) );contextView=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"viewListenerCount") ) { viewListenerCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ViewMapBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("injector",f4,31,ff,1e));
	outFields->push(HX_("viewListenerCount",16,52,70,ae));
	outFields->push(HX_("contextView",f4,17,53,2b));
	outFields->push(HX_("enabled",81,04,31,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ViewMapBase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(ViewMapBase_obj,injector),HX_("injector",f4,31,ff,1e)},
	{hx::fsInt,(int)offsetof(ViewMapBase_obj,viewListenerCount),HX_("viewListenerCount",16,52,70,ae)},
	{hx::fsObject /*::mmvc::api::IViewContainer*/ ,(int)offsetof(ViewMapBase_obj,contextView),HX_("contextView",f4,17,53,2b)},
	{hx::fsBool,(int)offsetof(ViewMapBase_obj,enabled),HX_("enabled",81,04,31,7e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ViewMapBase_obj_sStaticStorageInfo = 0;
#endif

static ::String ViewMapBase_obj_sMemberFields[] = {
	HX_("injector",f4,31,ff,1e),
	HX_("viewListenerCount",16,52,70,ae),
	HX_("contextView",f4,17,53,2b),
	HX_("enabled",81,04,31,7e),
	HX_("set_contextView",97,4c,00,e8),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("addListeners",1e,87,e2,f2),
	HX_("removeListeners",9b,00,ad,34),
	::String(null()) };

hx::Class ViewMapBase_obj::__mClass;

void ViewMapBase_obj::__register()
{
	ViewMapBase_obj _hx_dummy;
	ViewMapBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.base.ViewMapBase",ec,8f,9e,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ViewMapBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ViewMapBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ViewMapBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ViewMapBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace base
