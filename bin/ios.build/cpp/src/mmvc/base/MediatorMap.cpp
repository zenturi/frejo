// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_minject_InjecteeSet
#include <minject/InjecteeSet.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_Reflector
#include <minject/Reflector.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediator
#include <mmvc/api/IMediator.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediatorMap
#include <mmvc/api/IMediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_base_ContextError
#include <mmvc/base/ContextError.h>
#endif
#ifndef INCLUDED_mmvc_base_MappingConfig
#include <mmvc/base/MappingConfig.h>
#endif
#ifndef INCLUDED_mmvc_base_MediatorMap
#include <mmvc/base/MediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMapBase
#include <mmvc/base/ViewMapBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e74d60c669900c9_55_new,"mmvc.base.MediatorMap","new",0x10d20e9f,"mmvc.base.MediatorMap.new","mmvc/base/MediatorMap.hx",55,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_67_mapView,"mmvc.base.MediatorMap","mapView",0x78feb0e0,"mmvc.base.MediatorMap.mapView","mmvc/base/MediatorMap.hx",67,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_142_registerMediator,"mmvc.base.MediatorMap","registerMediator",0x4e090c17,"mmvc.base.MediatorMap.registerMediator","mmvc/base/MediatorMap.hx",142,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_151_removeMediator,"mmvc.base.MediatorMap","removeMediator",0xacec40b8,"mmvc.base.MediatorMap.removeMediator","mmvc/base/MediatorMap.hx",151,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_165_removeMediatorByView,"mmvc.base.MediatorMap","removeMediatorByView",0xaf3bfab4,"mmvc.base.MediatorMap.removeMediatorByView","mmvc/base/MediatorMap.hx",165,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_173_retrieveMediator,"mmvc.base.MediatorMap","retrieveMediator",0x94c7c130,"mmvc.base.MediatorMap.retrieveMediator","mmvc/base/MediatorMap.hx",173,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_202_addListeners,"mmvc.base.MediatorMap","addListeners",0x3e0008ff,"mmvc.base.MediatorMap.addListeners","mmvc/base/MediatorMap.hx",202,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_211_removeListeners,"mmvc.base.MediatorMap","removeListeners",0xd2ef215a,"mmvc.base.MediatorMap.removeListeners","mmvc/base/MediatorMap.hx",211,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_219_onViewAdded,"mmvc.base.MediatorMap","onViewAdded",0x9e703c3b,"mmvc.base.MediatorMap.onViewAdded","mmvc/base/MediatorMap.hx",219,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_236_onViewRemoved,"mmvc.base.MediatorMap","onViewRemoved",0xa6b19bdb,"mmvc.base.MediatorMap.onViewRemoved","mmvc/base/MediatorMap.hx",236,0x619f2e11)
HX_LOCAL_STACK_FRAME(_hx_pos_8e74d60c669900c9_261_createMediatorUsing,"mmvc.base.MediatorMap","createMediatorUsing",0x1ecfebb4,"mmvc.base.MediatorMap.createMediatorUsing","mmvc/base/MediatorMap.hx",261,0x619f2e11)
namespace mmvc{
namespace base{

void MediatorMap_obj::__construct(::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector){
            	HX_GC_STACKFRAME(&_hx_pos_8e74d60c669900c9_55_new)
HXLINE(  56)		super::__construct(contextView,injector);
HXLINE(  57)		this->reflector = reflector;
HXLINE(  59)		this->mediatorByView =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  60)		this->mappingConfigByView =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  61)		this->mappingConfigByViewClassName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->mediatorsMarkedForRemoval =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  63)		this->hasMediatorsMarkedForRemoval = false;
            	}

Dynamic MediatorMap_obj::__CreateEmpty() { return new MediatorMap_obj; }

void *MediatorMap_obj::_hx_vtable = 0;

Dynamic MediatorMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MediatorMap_obj > _hx_result = new MediatorMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MediatorMap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x55d55d6b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x55d55d6b;
	} else {
		return inClassId==(int)0x6dcb1a2a;
	}
}

static ::mmvc::api::IMediatorMap_obj _hx_mmvc_base_MediatorMap__hx_mmvc_api_IMediatorMap= {
	( void (hx::Object::*)( ::Dynamic,hx::Class, ::Dynamic, ::Dynamic, ::Dynamic))&::mmvc::base::MediatorMap_obj::mapView,
};

void *MediatorMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd3fa220d: return &_hx_mmvc_base_MediatorMap__hx_mmvc_api_IMediatorMap;
	}
	return super::_hx_getInterface(inHash);
}

void MediatorMap_obj::mapView( ::Dynamic viewClassOrName,hx::Class mediatorClass, ::Dynamic injectViewAs, ::Dynamic __o_autoCreate, ::Dynamic __o_autoRemove){
 ::Dynamic autoCreate = __o_autoCreate.Default(true);
 ::Dynamic autoRemove = __o_autoRemove.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_8e74d60c669900c9_67_mapView)
HXLINE(  68)		::String viewClassName = this->reflector->getFQCN(viewClassOrName);
HXLINE(  70)		if (hx::IsNotNull( this->mappingConfigByViewClassName->get(viewClassName) )) {
HXLINE(  72)			HX_STACK_DO_THROW( ::mmvc::base::ContextError_obj::__alloc( HX_CTX ,(HX_("Mediator Class has already been mapped to a View Class in this context - ",a6,e3,17,b2) + ::Std_obj::string(mediatorClass)),null()));
            		}
HXLINE(  75)		if ((this->reflector->classExtendsOrImplements(mediatorClass,hx::ClassOf< ::mmvc::api::IMediator >()) == false)) {
HXLINE(  77)			HX_STACK_DO_THROW( ::mmvc::base::ContextError_obj::__alloc( HX_CTX ,(HX_("Mediator Class does not implement IMediator - ",d3,f7,cc,da) + ::Std_obj::string(mediatorClass)),null()));
            		}
HXLINE(  80)		 ::mmvc::base::MappingConfig config =  ::mmvc::base::MappingConfig_obj::__alloc( HX_CTX );
HXLINE(  81)		config->mediatorClass = mediatorClass;
HXLINE(  82)		config->autoCreate = ( (bool)(autoCreate) );
HXLINE(  83)		config->autoRemove = ( (bool)(autoRemove) );
HXLINE(  85)		if (( (bool)(injectViewAs) )) {
HXLINE(  87)			if (::Std_obj::is(injectViewAs,hx::ArrayBase::__mClass)) {
HXLINE(  89)				config->typedViewClasses = hx::TCast< ::cpp::VirtualArray >::cast(injectViewAs)->copy();
            			}
            			else {
HXLINE(  91)				if (::Std_obj::is(injectViewAs,hx::ClassOf< ::hx::Class >())) {
HXLINE(  93)					config->typedViewClasses = ::cpp::VirtualArray_obj::__new(1)->init(0,injectViewAs);
            				}
            			}
            		}
            		else {
HXLINE(  96)			if (::Std_obj::is(viewClassOrName,hx::ClassOf< ::hx::Class >())) {
HXLINE(  98)				config->typedViewClasses = ::cpp::VirtualArray_obj::__new(1)->init(0,viewClassOrName);
            			}
            		}
HXLINE( 100)		this->mappingConfigByViewClassName->set(viewClassName,config);
HXLINE( 102)		bool _hx_tmp;
HXDLIN( 102)		if (!(( (bool)(autoCreate) ))) {
HXLINE( 102)			_hx_tmp = ( (bool)(autoRemove) );
            		}
            		else {
HXLINE( 102)			_hx_tmp = true;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			this->viewListenerCount++;
HXLINE( 106)			if ((this->viewListenerCount == 1)) {
HXLINE( 108)				this->addListeners();
            			}
            		}
HXLINE( 112)		bool _hx_tmp1;
HXDLIN( 112)		bool _hx_tmp2;
HXDLIN( 112)		if (( (bool)(autoCreate) )) {
HXLINE( 112)			_hx_tmp2 = hx::IsNotNull( this->contextView );
            		}
            		else {
HXLINE( 112)			_hx_tmp2 = false;
            		}
HXDLIN( 112)		if (_hx_tmp2) {
HXLINE( 112)			_hx_tmp1 = (viewClassName == ::Type_obj::getClassName(::Type_obj::getClass(this->contextView)));
            		}
            		else {
HXLINE( 112)			_hx_tmp1 = false;
            		}
HXDLIN( 112)		if (_hx_tmp1) {
HXLINE( 114)			this->createMediatorUsing(this->contextView,viewClassName,config);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(MediatorMap_obj,mapView,(void))

void MediatorMap_obj::registerMediator( ::Dynamic viewComponent,::Dynamic mediator){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_142_registerMediator)
HXLINE( 143)		this->mediatorByView->set(viewComponent,mediator);
HXLINE( 144)		::Dynamic this1 = this->mappingConfigByViewClassName;
HXDLIN( 144)		 ::mmvc::base::MappingConfig mapping = ( ( ::mmvc::base::MappingConfig)(( ( ::haxe::ds::StringMap)(this1) )->get(::Type_obj::getClassName(::Type_obj::getClass(viewComponent)))) );
HXLINE( 145)		this->mappingConfigByView->set(viewComponent,mapping);
HXLINE( 146)		::mmvc::api::IMediator_obj::setViewComponent(mediator,viewComponent);
HXLINE( 147)		::mmvc::api::IMediator_obj::preRegister(mediator);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MediatorMap_obj,registerMediator,(void))

::Dynamic MediatorMap_obj::removeMediator(::Dynamic mediator){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_151_removeMediator)
HXLINE( 152)		if (hx::IsNotNull( mediator )) {
HXLINE( 154)			 ::Dynamic viewComponent = ::mmvc::api::IMediator_obj::getViewComponent(mediator);
HXLINE( 155)			this->mediatorByView->remove(viewComponent);
HXLINE( 156)			this->mappingConfigByView->remove(viewComponent);
HXLINE( 157)			::mmvc::api::IMediator_obj::preRemove(mediator);
HXLINE( 158)			::mmvc::api::IMediator_obj::setViewComponent(mediator,null());
            		}
HXLINE( 161)		return mediator;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MediatorMap_obj,removeMediator,return )

::Dynamic MediatorMap_obj::removeMediatorByView( ::Dynamic viewComponent){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_165_removeMediatorByView)
HXLINE( 166)		::Dynamic mediator = this->removeMediator(this->retrieveMediator(viewComponent));
HXLINE( 167)		this->injector->attendedToInjectees->remove(mediator);
HXLINE( 168)		return mediator;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MediatorMap_obj,removeMediatorByView,return )

::Dynamic MediatorMap_obj::retrieveMediator( ::Dynamic viewComponent){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_173_retrieveMediator)
HXDLIN( 173)		return this->mediatorByView->get(viewComponent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MediatorMap_obj,retrieveMediator,return )

void MediatorMap_obj::addListeners(){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_202_addListeners)
HXDLIN( 202)		bool _hx_tmp;
HXDLIN( 202)		if (hx::IsNotNull( this->contextView )) {
HXDLIN( 202)			_hx_tmp = this->enabled;
            		}
            		else {
HXDLIN( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 204)			this->contextView->__SetField(HX_("viewAdded",1b,44,d8,5c),this->onViewAdded_dyn(),hx::paccDynamic);
HXLINE( 205)			this->contextView->__SetField(HX_("viewRemoved",bb,5b,13,d5),this->onViewRemoved_dyn(),hx::paccDynamic);
            		}
            	}


void MediatorMap_obj::removeListeners(){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_211_removeListeners)
HXDLIN( 211)		if (hx::IsNotNull( this->contextView )) {
HXLINE( 213)			this->contextView->__SetField(HX_("viewAdded",1b,44,d8,5c),null(),hx::paccDynamic);
HXLINE( 214)			this->contextView->__SetField(HX_("viewRemoved",bb,5b,13,d5),null(),hx::paccDynamic);
            		}
            	}


void MediatorMap_obj::onViewAdded( ::Dynamic view){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_219_onViewAdded)
HXLINE( 220)		if (hx::IsNotNull( this->mediatorsMarkedForRemoval->get(view) )) {
HXLINE( 222)			this->mediatorsMarkedForRemoval->remove(view);
HXLINE( 223)			return;
            		}
HXLINE( 226)		::String viewClassName = ::Type_obj::getClassName(::Type_obj::getClass(view));
HXLINE( 227)		 ::mmvc::base::MappingConfig config = ( ( ::mmvc::base::MappingConfig)(this->mappingConfigByViewClassName->get(viewClassName)) );
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if (hx::IsNotNull( config )) {
HXLINE( 229)			_hx_tmp = config->autoCreate;
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 231)			this->createMediatorUsing(view,viewClassName,config);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MediatorMap_obj,onViewAdded,(void))

void MediatorMap_obj::onViewRemoved( ::Dynamic view){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_236_onViewRemoved)
HXLINE( 237)		 ::mmvc::base::MappingConfig config = ( ( ::mmvc::base::MappingConfig)(this->mappingConfigByView->get(view)) );
HXLINE( 239)		bool _hx_tmp;
HXDLIN( 239)		if (hx::IsNotNull( config )) {
HXLINE( 239)			_hx_tmp = config->autoRemove;
            		}
            		else {
HXLINE( 239)			_hx_tmp = false;
            		}
HXDLIN( 239)		if (_hx_tmp) {
HXLINE( 241)			this->removeMediatorByView(view);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MediatorMap_obj,onViewRemoved,(void))

::Dynamic MediatorMap_obj::createMediatorUsing( ::Dynamic viewComponent,::String viewClassName, ::mmvc::base::MappingConfig config){
            	HX_STACKFRAME(&_hx_pos_8e74d60c669900c9_261_createMediatorUsing)
HXLINE( 262)		::Dynamic mediator = this->mediatorByView->get(viewComponent);
HXLINE( 264)		if (hx::IsNull( mediator )) {
HXLINE( 266)			if (hx::IsNull( viewClassName )) {
HXLINE( 268)				viewClassName = ::Type_obj::getClassName(::Type_obj::getClass(viewComponent));
            			}
HXLINE( 271)			if (hx::IsNull( config )) {
HXLINE( 273)				config = ( ( ::mmvc::base::MappingConfig)(this->mappingConfigByViewClassName->get(viewClassName)) );
            			}
HXLINE( 276)			if (hx::IsNotNull( config )) {
HXLINE( 278)				if (hx::IsNotNull( config->typedViewClasses )) {
HXLINE( 280)					int _g = 0;
HXDLIN( 280)					::cpp::VirtualArray _g1 = config->typedViewClasses;
HXDLIN( 280)					while((_g < _g1->get_length())){
HXLINE( 280)						 ::Dynamic claxx = _g1->__get(_g);
HXDLIN( 280)						_g = (_g + 1);
HXLINE( 282)						this->injector->mapValue(claxx,viewComponent,null());
            					}
            				}
HXLINE( 286)				mediator = this->injector->instantiate(config->mediatorClass);
HXLINE( 288)				if (hx::IsNotNull( config->typedViewClasses )) {
HXLINE( 290)					int _g2 = 0;
HXDLIN( 290)					::cpp::VirtualArray _g11 = config->typedViewClasses;
HXDLIN( 290)					while((_g2 < _g11->get_length())){
HXLINE( 290)						 ::Dynamic clazz = _g11->__get(_g2);
HXDLIN( 290)						_g2 = (_g2 + 1);
HXLINE( 292)						this->injector->unmap(clazz,null());
            					}
            				}
HXLINE( 296)				this->registerMediator(viewComponent,mediator);
            			}
            		}
HXLINE( 300)		return mediator;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MediatorMap_obj,createMediatorUsing,return )


hx::ObjectPtr< MediatorMap_obj > MediatorMap_obj::__new(::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector) {
	hx::ObjectPtr< MediatorMap_obj > __this = new MediatorMap_obj();
	__this->__construct(contextView,injector,reflector);
	return __this;
}

hx::ObjectPtr< MediatorMap_obj > MediatorMap_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::minject::Injector injector, ::minject::Reflector reflector) {
	MediatorMap_obj *__this = (MediatorMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MediatorMap_obj), true, "mmvc.base.MediatorMap"));
	*(void **)__this = MediatorMap_obj::_hx_vtable;
	__this->__construct(contextView,injector,reflector);
	return __this;
}

MediatorMap_obj::MediatorMap_obj()
{
}

void MediatorMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MediatorMap);
	HX_MARK_MEMBER_NAME(mediatorByView,"mediatorByView");
	HX_MARK_MEMBER_NAME(mappingConfigByView,"mappingConfigByView");
	HX_MARK_MEMBER_NAME(mappingConfigByViewClassName,"mappingConfigByViewClassName");
	HX_MARK_MEMBER_NAME(mediatorsMarkedForRemoval,"mediatorsMarkedForRemoval");
	HX_MARK_MEMBER_NAME(hasMediatorsMarkedForRemoval,"hasMediatorsMarkedForRemoval");
	HX_MARK_MEMBER_NAME(reflector,"reflector");
	 ::mmvc::base::ViewMapBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MediatorMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mediatorByView,"mediatorByView");
	HX_VISIT_MEMBER_NAME(mappingConfigByView,"mappingConfigByView");
	HX_VISIT_MEMBER_NAME(mappingConfigByViewClassName,"mappingConfigByViewClassName");
	HX_VISIT_MEMBER_NAME(mediatorsMarkedForRemoval,"mediatorsMarkedForRemoval");
	HX_VISIT_MEMBER_NAME(hasMediatorsMarkedForRemoval,"hasMediatorsMarkedForRemoval");
	HX_VISIT_MEMBER_NAME(reflector,"reflector");
	 ::mmvc::base::ViewMapBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MediatorMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"mapView") ) { return hx::Val( mapView_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"reflector") ) { return hx::Val( reflector ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onViewAdded") ) { return hx::Val( onViewAdded_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addListeners") ) { return hx::Val( addListeners_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onViewRemoved") ) { return hx::Val( onViewRemoved_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mediatorByView") ) { return hx::Val( mediatorByView ); }
		if (HX_FIELD_EQ(inName,"removeMediator") ) { return hx::Val( removeMediator_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeListeners") ) { return hx::Val( removeListeners_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerMediator") ) { return hx::Val( registerMediator_dyn() ); }
		if (HX_FIELD_EQ(inName,"retrieveMediator") ) { return hx::Val( retrieveMediator_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mappingConfigByView") ) { return hx::Val( mappingConfigByView ); }
		if (HX_FIELD_EQ(inName,"createMediatorUsing") ) { return hx::Val( createMediatorUsing_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeMediatorByView") ) { return hx::Val( removeMediatorByView_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"mediatorsMarkedForRemoval") ) { return hx::Val( mediatorsMarkedForRemoval ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"mappingConfigByViewClassName") ) { return hx::Val( mappingConfigByViewClassName ); }
		if (HX_FIELD_EQ(inName,"hasMediatorsMarkedForRemoval") ) { return hx::Val( hasMediatorsMarkedForRemoval ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MediatorMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"reflector") ) { reflector=inValue.Cast<  ::minject::Reflector >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mediatorByView") ) { mediatorByView=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mappingConfigByView") ) { mappingConfigByView=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"mediatorsMarkedForRemoval") ) { mediatorsMarkedForRemoval=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"mappingConfigByViewClassName") ) { mappingConfigByViewClassName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasMediatorsMarkedForRemoval") ) { hasMediatorsMarkedForRemoval=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MediatorMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mediatorByView",6f,90,fa,fd));
	outFields->push(HX_("mappingConfigByView",6c,58,0d,9b));
	outFields->push(HX_("mappingConfigByViewClassName",97,ac,02,52));
	outFields->push(HX_("mediatorsMarkedForRemoval",ef,69,fc,10));
	outFields->push(HX_("hasMediatorsMarkedForRemoval",35,bb,d3,f9));
	outFields->push(HX_("reflector",a0,2e,c1,a9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo MediatorMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(MediatorMap_obj,mediatorByView),HX_("mediatorByView",6f,90,fa,fd)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(MediatorMap_obj,mappingConfigByView),HX_("mappingConfigByView",6c,58,0d,9b)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(MediatorMap_obj,mappingConfigByViewClassName),HX_("mappingConfigByViewClassName",97,ac,02,52)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(MediatorMap_obj,mediatorsMarkedForRemoval),HX_("mediatorsMarkedForRemoval",ef,69,fc,10)},
	{hx::fsBool,(int)offsetof(MediatorMap_obj,hasMediatorsMarkedForRemoval),HX_("hasMediatorsMarkedForRemoval",35,bb,d3,f9)},
	{hx::fsObject /*::minject::Reflector*/ ,(int)offsetof(MediatorMap_obj,reflector),HX_("reflector",a0,2e,c1,a9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MediatorMap_obj_sStaticStorageInfo = 0;
#endif

static ::String MediatorMap_obj_sMemberFields[] = {
	HX_("mediatorByView",6f,90,fa,fd),
	HX_("mappingConfigByView",6c,58,0d,9b),
	HX_("mappingConfigByViewClassName",97,ac,02,52),
	HX_("mediatorsMarkedForRemoval",ef,69,fc,10),
	HX_("hasMediatorsMarkedForRemoval",35,bb,d3,f9),
	HX_("reflector",a0,2e,c1,a9),
	HX_("mapView",21,e7,4a,33),
	HX_("registerMediator",b6,85,6e,72),
	HX_("removeMediator",97,c4,01,3e),
	HX_("removeMediatorByView",d3,2f,08,73),
	HX_("retrieveMediator",cf,3a,2d,b9),
	HX_("addListeners",1e,87,e2,f2),
	HX_("removeListeners",9b,00,ad,34),
	HX_("onViewAdded",fc,26,1b,7f),
	HX_("onViewRemoved",dc,78,fd,37),
	HX_("createMediatorUsing",75,ff,74,6b),
	::String(null()) };

hx::Class MediatorMap_obj::__mClass;

void MediatorMap_obj::__register()
{
	MediatorMap_obj _hx_dummy;
	MediatorMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.base.MediatorMap",2d,d3,a8,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MediatorMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MediatorMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MediatorMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MediatorMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace base
