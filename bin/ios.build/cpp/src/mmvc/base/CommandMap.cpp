// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_ICommandMap
#include <mmvc/api/ICommandMap.h>
#endif
#ifndef INCLUDED_mmvc_base_CommandMap
#include <mmvc/base/CommandMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea49f0d42676f9f1_39_new,"mmvc.base.CommandMap","new",0xe57bf2ff,"mmvc.base.CommandMap.new","mmvc/base/CommandMap.hx",39,0xed7e18f1)
namespace mmvc{
namespace base{

void CommandMap_obj::__construct( ::minject::Injector injector){
            	HX_GC_STACKFRAME(&_hx_pos_ea49f0d42676f9f1_39_new)
HXLINE(  40)		this->injector = injector;
HXLINE(  42)		this->signalMap =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  43)		this->signalClassMap =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  44)		this->detainedCommands =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}

Dynamic CommandMap_obj::__CreateEmpty() { return new CommandMap_obj; }

void *CommandMap_obj::_hx_vtable = 0;

Dynamic CommandMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CommandMap_obj > _hx_result = new CommandMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CommandMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x364b0f0f;
}

static ::mmvc::api::ICommandMap_obj _hx_mmvc_base_CommandMap__hx_mmvc_api_ICommandMap= {
};

void *CommandMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x64c734ad: return &_hx_mmvc_base_CommandMap__hx_mmvc_api_ICommandMap;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


hx::ObjectPtr< CommandMap_obj > CommandMap_obj::__new( ::minject::Injector injector) {
	hx::ObjectPtr< CommandMap_obj > __this = new CommandMap_obj();
	__this->__construct(injector);
	return __this;
}

hx::ObjectPtr< CommandMap_obj > CommandMap_obj::__alloc(hx::Ctx *_hx_ctx, ::minject::Injector injector) {
	CommandMap_obj *__this = (CommandMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CommandMap_obj), true, "mmvc.base.CommandMap"));
	*(void **)__this = CommandMap_obj::_hx_vtable;
	__this->__construct(injector);
	return __this;
}

CommandMap_obj::CommandMap_obj()
{
}

void CommandMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CommandMap);
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_MEMBER_NAME(signalMap,"signalMap");
	HX_MARK_MEMBER_NAME(signalClassMap,"signalClassMap");
	HX_MARK_MEMBER_NAME(detainedCommands,"detainedCommands");
	HX_MARK_END_CLASS();
}

void CommandMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(injector,"injector");
	HX_VISIT_MEMBER_NAME(signalMap,"signalMap");
	HX_VISIT_MEMBER_NAME(signalClassMap,"signalClassMap");
	HX_VISIT_MEMBER_NAME(detainedCommands,"detainedCommands");
}

hx::Val CommandMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( injector ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"signalMap") ) { return hx::Val( signalMap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"signalClassMap") ) { return hx::Val( signalClassMap ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"detainedCommands") ) { return hx::Val( detainedCommands ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CommandMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"signalMap") ) { signalMap=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"signalClassMap") ) { signalClassMap=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"detainedCommands") ) { detainedCommands=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CommandMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("injector",f4,31,ff,1e));
	outFields->push(HX_("signalMap",14,85,03,10));
	outFields->push(HX_("signalClassMap",cc,cf,a9,8c));
	outFields->push(HX_("detainedCommands",9a,34,5b,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CommandMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(CommandMap_obj,injector),HX_("injector",f4,31,ff,1e)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(CommandMap_obj,signalMap),HX_("signalMap",14,85,03,10)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(CommandMap_obj,signalClassMap),HX_("signalClassMap",cc,cf,a9,8c)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(CommandMap_obj,detainedCommands),HX_("detainedCommands",9a,34,5b,6d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CommandMap_obj_sStaticStorageInfo = 0;
#endif

static ::String CommandMap_obj_sMemberFields[] = {
	HX_("injector",f4,31,ff,1e),
	HX_("signalMap",14,85,03,10),
	HX_("signalClassMap",cc,cf,a9,8c),
	HX_("detainedCommands",9a,34,5b,6d),
	::String(null()) };

hx::Class CommandMap_obj::__mClass;

void CommandMap_obj::__register()
{
	CommandMap_obj _hx_dummy;
	CommandMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.base.CommandMap",8d,07,b1,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CommandMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CommandMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CommandMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CommandMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace base
