// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_Reflector
#include <minject/Reflector.h>
#endif
#ifndef INCLUDED_mmvc_api_ICommandMap
#include <mmvc/api/ICommandMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IContext
#include <mmvc/api/IContext.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediatorMap
#include <mmvc/api/IMediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_api_ITriggerMap
#include <mmvc/api/ITriggerMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewMap
#include <mmvc/api/IViewMap.h>
#endif
#ifndef INCLUDED_mmvc_base_CommandMap
#include <mmvc/base/CommandMap.h>
#endif
#ifndef INCLUDED_mmvc_base_MediatorMap
#include <mmvc/base/MediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_base_TriggerMap
#include <mmvc/base/TriggerMap.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMap
#include <mmvc/base/ViewMap.h>
#endif
#ifndef INCLUDED_mmvc_base_ViewMapBase
#include <mmvc/base/ViewMapBase.h>
#endif
#ifndef INCLUDED_mmvc_impl_Context
#include <mmvc/impl/Context.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d6c449d19558aa9_69_new,"mmvc.impl.Context","new",0x37bd22b4,"mmvc.impl.Context.new","mmvc/impl/Context.hx",69,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_77_startup,"mmvc.impl.Context","startup",0x0e3e4391,"mmvc.impl.Context.startup","mmvc/impl/Context.hx",77,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_82_shutdown,"mmvc.impl.Context","shutdown",0x9093b9c2,"mmvc.impl.Context.shutdown","mmvc/impl/Context.hx",82,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_85_set_contextView,"mmvc.impl.Context","set_contextView",0xa445cceb,"mmvc.impl.Context.set_contextView","mmvc/impl/Context.hx",85,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_105_get_injector,"mmvc.impl.Context","get_injector",0xda64a929,"mmvc.impl.Context.get_injector","mmvc/impl/Context.hx",105,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_118_get_reflector,"mmvc.impl.Context","get_reflector",0xe72405cb,"mmvc.impl.Context.get_reflector","mmvc/impl/Context.hx",118,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_131_get_commandMap,"mmvc.impl.Context","get_commandMap",0xbcb66086,"mmvc.impl.Context.get_commandMap","mmvc/impl/Context.hx",131,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_144_get_mediatorMap,"mmvc.impl.Context","get_mediatorMap",0x6d515414,"mmvc.impl.Context.get_mediatorMap","mmvc/impl/Context.hx",144,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_157_get_viewMap,"mmvc.impl.Context","get_viewMap",0xf5f583a2,"mmvc.impl.Context.get_viewMap","mmvc/impl/Context.hx",157,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_170_get_triggerMap,"mmvc.impl.Context","get_triggerMap",0x5cfbeeb9,"mmvc.impl.Context.get_triggerMap","mmvc/impl/Context.hx",170,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_187_mapInjections,"mmvc.impl.Context","mapInjections",0xaf2a55cc,"mmvc.impl.Context.mapInjections","mmvc/impl/Context.hx",187,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_199_checkAutoStartup,"mmvc.impl.Context","checkAutoStartup",0xd06a48d2,"mmvc.impl.Context.checkAutoStartup","mmvc/impl/Context.hx",199,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_206_createInjector,"mmvc.impl.Context","createInjector",0x745d973c,"mmvc.impl.Context.createInjector","mmvc/impl/Context.hx",206,0x54ef439c)
HX_LOCAL_STACK_FRAME(_hx_pos_0d6c449d19558aa9_213_createChildInjector,"mmvc.impl.Context","createChildInjector",0x53dd0968,"mmvc.impl.Context.createChildInjector","mmvc/impl/Context.hx",213,0x54ef439c)
namespace mmvc{
namespace impl{

void Context_obj::__construct(::Dynamic contextView, ::Dynamic __o_autoStartup){
 ::Dynamic autoStartup = __o_autoStartup.Default(true);
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_69_new)
HXLINE(  70)		this->autoStartup = ( (bool)(autoStartup) );
HXLINE(  71)		this->set_contextView(contextView);
            	}

Dynamic Context_obj::__CreateEmpty() { return new Context_obj; }

void *Context_obj::_hx_vtable = 0;

Dynamic Context_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context_obj > _hx_result = new Context_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Context_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fe6fb86;
}

static ::mmvc::api::IContext_obj _hx_mmvc_impl_Context__hx_mmvc_api_IContext= {
	( ::Dynamic (hx::Object::*)())&::mmvc::impl::Context_obj::get_commandMap,
};

void *Context_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xda0dd9d3: return &_hx_mmvc_impl_Context__hx_mmvc_api_IContext;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Context_obj::startup(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_77_startup)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,startup,(void))

void Context_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_82_shutdown)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,shutdown,(void))

::Dynamic Context_obj::set_contextView(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_85_set_contextView)
HXLINE(  86)		if (hx::IsNotEq( this->contextView,value )) {
HXLINE(  88)			this->contextView = value;
HXLINE(  89)			this->commandMap = null();
HXLINE(  90)			this->mediatorMap = null();
HXLINE(  91)			this->viewMap = null();
HXLINE(  92)			this->triggerMap = null();
HXLINE(  94)			this->mapInjections();
HXLINE(  95)			this->checkAutoStartup();
            		}
HXLINE(  98)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context_obj,set_contextView,return )

 ::minject::Injector Context_obj::get_injector(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_105_get_injector)
HXLINE( 106)		if (hx::IsNull( this->injector )) {
HXLINE( 108)			return this->createInjector();
            		}
HXLINE( 111)		return this->injector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_injector,return )

 ::minject::Reflector Context_obj::get_reflector(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_118_get_reflector)
HXLINE( 119)		if (hx::IsNull( this->reflector )) {
HXLINE( 121)			this->reflector =  ::minject::Reflector_obj::__alloc( HX_CTX );
            		}
HXLINE( 124)		return this->reflector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_reflector,return )

::Dynamic Context_obj::get_commandMap(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_131_get_commandMap)
HXLINE( 132)		if (hx::IsNull( this->commandMap )) {
HXLINE( 134)			this->commandMap =  ::mmvc::base::CommandMap_obj::__alloc( HX_CTX ,this->createChildInjector());
            		}
HXLINE( 137)		return this->commandMap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_commandMap,return )

::Dynamic Context_obj::get_mediatorMap(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_144_get_mediatorMap)
HXLINE( 145)		if (hx::IsNull( this->mediatorMap )) {
HXLINE( 147)			::Dynamic _hx_tmp = this->contextView;
HXDLIN( 147)			 ::minject::Injector _hx_tmp1 = this->createChildInjector();
HXDLIN( 147)			this->mediatorMap =  ::mmvc::base::MediatorMap_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->get_reflector());
            		}
HXLINE( 150)		return this->mediatorMap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_mediatorMap,return )

::Dynamic Context_obj::get_viewMap(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_157_get_viewMap)
HXLINE( 158)		if (hx::IsNull( this->viewMap )) {
HXLINE( 160)			::Dynamic _hx_tmp = this->contextView;
HXDLIN( 160)			this->viewMap =  ::mmvc::base::ViewMap_obj::__alloc( HX_CTX ,_hx_tmp,this->get_injector());
            		}
HXLINE( 163)		return this->viewMap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_viewMap,return )

::Dynamic Context_obj::get_triggerMap(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_170_get_triggerMap)
HXLINE( 171)		if (hx::IsNull( this->triggerMap )) {
HXLINE( 173)			this->triggerMap =  ::mmvc::base::TriggerMap_obj::__alloc( HX_CTX ,this->get_injector());
            		}
HXLINE( 176)		return this->triggerMap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,get_triggerMap,return )

void Context_obj::mapInjections(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_187_mapInjections)
HXLINE( 188)		 ::minject::Injector _hx_tmp = this->get_injector();
HXDLIN( 188)		_hx_tmp->mapValue(hx::ClassOf< ::minject::Reflector >(),this->get_reflector(),null());
HXLINE( 189)		 ::minject::Injector _hx_tmp1 = this->get_injector();
HXDLIN( 189)		_hx_tmp1->mapValue(hx::ClassOf< ::minject::Injector >(),this->get_injector(),null());
HXLINE( 190)		this->get_injector()->mapValue(hx::ClassOf< ::mmvc::api::IViewContainer >(),this->contextView,null());
HXLINE( 191)		 ::minject::Injector _hx_tmp2 = this->get_injector();
HXDLIN( 191)		_hx_tmp2->mapValue(hx::ClassOf< ::mmvc::api::ICommandMap >(),this->get_commandMap(),null());
HXLINE( 192)		 ::minject::Injector _hx_tmp3 = this->get_injector();
HXDLIN( 192)		_hx_tmp3->mapValue(hx::ClassOf< ::mmvc::api::IMediatorMap >(),this->get_mediatorMap(),null());
HXLINE( 193)		 ::minject::Injector _hx_tmp4 = this->get_injector();
HXDLIN( 193)		_hx_tmp4->mapValue(hx::ClassOf< ::mmvc::api::IViewMap >(),this->get_viewMap(),null());
HXLINE( 194)		 ::minject::Injector _hx_tmp5 = this->get_injector();
HXDLIN( 194)		_hx_tmp5->mapValue(hx::ClassOf< ::mmvc::api::ITriggerMap >(),this->get_triggerMap(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,mapInjections,(void))

void Context_obj::checkAutoStartup(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_199_checkAutoStartup)
HXDLIN( 199)		bool _hx_tmp;
HXDLIN( 199)		if (this->autoStartup) {
HXDLIN( 199)			_hx_tmp = hx::IsNotNull( this->contextView );
            		}
            		else {
HXDLIN( 199)			_hx_tmp = false;
            		}
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 201)			this->startup();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,checkAutoStartup,(void))

 ::minject::Injector Context_obj::createInjector(){
            	HX_GC_STACKFRAME(&_hx_pos_0d6c449d19558aa9_206_createInjector)
HXLINE( 207)		this->injector =  ::minject::Injector_obj::__alloc( HX_CTX );
HXLINE( 208)		return this->get_injector();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,createInjector,return )

 ::minject::Injector Context_obj::createChildInjector(){
            	HX_STACKFRAME(&_hx_pos_0d6c449d19558aa9_213_createChildInjector)
HXDLIN( 213)		return this->get_injector()->createChildInjector();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context_obj,createChildInjector,return )


hx::ObjectPtr< Context_obj > Context_obj::__new(::Dynamic contextView, ::Dynamic __o_autoStartup) {
	hx::ObjectPtr< Context_obj > __this = new Context_obj();
	__this->__construct(contextView,__o_autoStartup);
	return __this;
}

hx::ObjectPtr< Context_obj > Context_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic contextView, ::Dynamic __o_autoStartup) {
	Context_obj *__this = (Context_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context_obj), true, "mmvc.impl.Context"));
	*(void **)__this = Context_obj::_hx_vtable;
	__this->__construct(contextView,__o_autoStartup);
	return __this;
}

Context_obj::Context_obj()
{
}

void Context_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context);
	HX_MARK_MEMBER_NAME(autoStartup,"autoStartup");
	HX_MARK_MEMBER_NAME(contextView,"contextView");
	HX_MARK_MEMBER_NAME(commandMap,"commandMap");
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_MEMBER_NAME(mediatorMap,"mediatorMap");
	HX_MARK_MEMBER_NAME(reflector,"reflector");
	HX_MARK_MEMBER_NAME(viewMap,"viewMap");
	HX_MARK_MEMBER_NAME(triggerMap,"triggerMap");
	HX_MARK_END_CLASS();
}

void Context_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(autoStartup,"autoStartup");
	HX_VISIT_MEMBER_NAME(contextView,"contextView");
	HX_VISIT_MEMBER_NAME(commandMap,"commandMap");
	HX_VISIT_MEMBER_NAME(injector,"injector");
	HX_VISIT_MEMBER_NAME(mediatorMap,"mediatorMap");
	HX_VISIT_MEMBER_NAME(reflector,"reflector");
	HX_VISIT_MEMBER_NAME(viewMap,"viewMap");
	HX_VISIT_MEMBER_NAME(triggerMap,"triggerMap");
}

hx::Val Context_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"viewMap") ) { return hx::Val( inCallProp == hx::paccAlways ? get_viewMap() : viewMap ); }
		if (HX_FIELD_EQ(inName,"startup") ) { return hx::Val( startup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( inCallProp == hx::paccAlways ? get_injector() : injector ); }
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"reflector") ) { return hx::Val( inCallProp == hx::paccAlways ? get_reflector() : reflector ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandMap") ) { return hx::Val( inCallProp == hx::paccAlways ? get_commandMap() : commandMap ); }
		if (HX_FIELD_EQ(inName,"triggerMap") ) { return hx::Val( inCallProp == hx::paccAlways ? get_triggerMap() : triggerMap ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"autoStartup") ) { return hx::Val( autoStartup ); }
		if (HX_FIELD_EQ(inName,"contextView") ) { return hx::Val( contextView ); }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { return hx::Val( inCallProp == hx::paccAlways ? get_mediatorMap() : mediatorMap ); }
		if (HX_FIELD_EQ(inName,"get_viewMap") ) { return hx::Val( get_viewMap_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_injector") ) { return hx::Val( get_injector_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_reflector") ) { return hx::Val( get_reflector_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapInjections") ) { return hx::Val( mapInjections_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_commandMap") ) { return hx::Val( get_commandMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_triggerMap") ) { return hx::Val( get_triggerMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"createInjector") ) { return hx::Val( createInjector_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_contextView") ) { return hx::Val( set_contextView_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mediatorMap") ) { return hx::Val( get_mediatorMap_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"checkAutoStartup") ) { return hx::Val( checkAutoStartup_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createChildInjector") ) { return hx::Val( createChildInjector_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Context_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"viewMap") ) { viewMap=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"reflector") ) { reflector=inValue.Cast<  ::minject::Reflector >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandMap") ) { commandMap=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggerMap") ) { triggerMap=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"autoStartup") ) { autoStartup=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contextView") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_contextView(inValue.Cast< ::Dynamic >()) );contextView=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { mediatorMap=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Context_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("autoStartup",8e,db,fe,1a));
	outFields->push(HX_("contextView",f4,17,53,2b));
	outFields->push(HX_("commandMap",11,f2,9c,43));
	outFields->push(HX_("injector",f4,31,ff,1e));
	outFields->push(HX_("mediatorMap",29,1c,2a,f0));
	outFields->push(HX_("reflector",a0,2e,c1,a9));
	outFields->push(HX_("viewMap",37,5d,b9,9c));
	outFields->push(HX_("triggerMap",44,80,e2,e3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Context_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Context_obj,autoStartup),HX_("autoStartup",8e,db,fe,1a)},
	{hx::fsObject /*::mmvc::api::IViewContainer*/ ,(int)offsetof(Context_obj,contextView),HX_("contextView",f4,17,53,2b)},
	{hx::fsObject /*::mmvc::api::ICommandMap*/ ,(int)offsetof(Context_obj,commandMap),HX_("commandMap",11,f2,9c,43)},
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(Context_obj,injector),HX_("injector",f4,31,ff,1e)},
	{hx::fsObject /*::mmvc::api::IMediatorMap*/ ,(int)offsetof(Context_obj,mediatorMap),HX_("mediatorMap",29,1c,2a,f0)},
	{hx::fsObject /*::minject::Reflector*/ ,(int)offsetof(Context_obj,reflector),HX_("reflector",a0,2e,c1,a9)},
	{hx::fsObject /*::mmvc::api::IViewMap*/ ,(int)offsetof(Context_obj,viewMap),HX_("viewMap",37,5d,b9,9c)},
	{hx::fsObject /*::mmvc::api::ITriggerMap*/ ,(int)offsetof(Context_obj,triggerMap),HX_("triggerMap",44,80,e2,e3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Context_obj_sStaticStorageInfo = 0;
#endif

static ::String Context_obj_sMemberFields[] = {
	HX_("autoStartup",8e,db,fe,1a),
	HX_("contextView",f4,17,53,2b),
	HX_("commandMap",11,f2,9c,43),
	HX_("injector",f4,31,ff,1e),
	HX_("mediatorMap",29,1c,2a,f0),
	HX_("reflector",a0,2e,c1,a9),
	HX_("viewMap",37,5d,b9,9c),
	HX_("triggerMap",44,80,e2,e3),
	HX_("startup",3d,37,1b,35),
	HX_("shutdown",96,fc,0b,6b),
	HX_("set_contextView",97,4c,00,e8),
	HX_("get_injector",fd,e5,18,d4),
	HX_("get_reflector",77,02,25,6b),
	HX_("get_commandMap",5a,7a,92,b9),
	HX_("get_mediatorMap",c0,d3,0b,b1),
	HX_("get_viewMap",4e,bd,b3,22),
	HX_("get_triggerMap",8d,08,d8,59),
	HX_("mapInjections",78,52,2b,33),
	HX_("checkAutoStartup",a6,7f,df,cf),
	HX_("createInjector",10,b1,39,71),
	HX_("createChildInjector",14,cf,2e,e9),
	::String(null()) };

hx::Class Context_obj::__mClass;

void Context_obj::__register()
{
	Context_obj _hx_dummy;
	Context_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.impl.Context",c2,f8,68,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mmvc
} // end namespace impl
