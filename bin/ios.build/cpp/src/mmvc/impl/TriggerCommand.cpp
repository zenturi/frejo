// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_ICommand
#include <mmvc/api/ICommand.h>
#endif
#ifndef INCLUDED_mmvc_api_ICommandMap
#include <mmvc/api/ICommandMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediatorMap
#include <mmvc/api/IMediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_api_ITriggerMap
#include <mmvc/api/ITriggerMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_impl_TriggerCommand
#include <mmvc/impl/TriggerCommand.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_498fa83298003776_44_new,"mmvc.impl.TriggerCommand","new",0x13a9a972,"mmvc.impl.TriggerCommand.new","mmvc/impl/TriggerCommand.hx",44,0xd54281de)
HX_LOCAL_STACK_FRAME(_hx_pos_498fa83298003776_34_boot,"mmvc.impl.TriggerCommand","boot",0x18e39ae0,"mmvc.impl.TriggerCommand.boot","mmvc/impl/TriggerCommand.hx",34,0xd54281de)
namespace mmvc{
namespace impl{

void TriggerCommand_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_498fa83298003776_44_new)
            	}

Dynamic TriggerCommand_obj::__CreateEmpty() { return new TriggerCommand_obj; }

void *TriggerCommand_obj::_hx_vtable = 0;

Dynamic TriggerCommand_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TriggerCommand_obj > _hx_result = new TriggerCommand_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TriggerCommand_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x363cb3c0;
}

static ::mmvc::api::ICommand_obj _hx_mmvc_impl_TriggerCommand__hx_mmvc_api_ICommand= {
};

void *TriggerCommand_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4203b52f: return &_hx_mmvc_impl_TriggerCommand__hx_mmvc_api_ICommand;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


hx::ObjectPtr< TriggerCommand_obj > TriggerCommand_obj::__new() {
	hx::ObjectPtr< TriggerCommand_obj > __this = new TriggerCommand_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TriggerCommand_obj > TriggerCommand_obj::__alloc(hx::Ctx *_hx_ctx) {
	TriggerCommand_obj *__this = (TriggerCommand_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TriggerCommand_obj), true, "mmvc.impl.TriggerCommand"));
	*(void **)__this = TriggerCommand_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TriggerCommand_obj::TriggerCommand_obj()
{
}

void TriggerCommand_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TriggerCommand);
	HX_MARK_MEMBER_NAME(contextView,"contextView");
	HX_MARK_MEMBER_NAME(commandMap,"commandMap");
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_MEMBER_NAME(mediatorMap,"mediatorMap");
	HX_MARK_MEMBER_NAME(triggerMap,"triggerMap");
	HX_MARK_END_CLASS();
}

void TriggerCommand_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(contextView,"contextView");
	HX_VISIT_MEMBER_NAME(commandMap,"commandMap");
	HX_VISIT_MEMBER_NAME(injector,"injector");
	HX_VISIT_MEMBER_NAME(mediatorMap,"mediatorMap");
	HX_VISIT_MEMBER_NAME(triggerMap,"triggerMap");
}

hx::Val TriggerCommand_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( injector ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandMap") ) { return hx::Val( commandMap ); }
		if (HX_FIELD_EQ(inName,"triggerMap") ) { return hx::Val( triggerMap ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { return hx::Val( contextView ); }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { return hx::Val( mediatorMap ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TriggerCommand_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandMap") ) { commandMap=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggerMap") ) { triggerMap=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { contextView=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { mediatorMap=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriggerCommand_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("contextView",f4,17,53,2b));
	outFields->push(HX_("commandMap",11,f2,9c,43));
	outFields->push(HX_("injector",f4,31,ff,1e));
	outFields->push(HX_("mediatorMap",29,1c,2a,f0));
	outFields->push(HX_("triggerMap",44,80,e2,e3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TriggerCommand_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::mmvc::api::IViewContainer*/ ,(int)offsetof(TriggerCommand_obj,contextView),HX_("contextView",f4,17,53,2b)},
	{hx::fsObject /*::mmvc::api::ICommandMap*/ ,(int)offsetof(TriggerCommand_obj,commandMap),HX_("commandMap",11,f2,9c,43)},
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(TriggerCommand_obj,injector),HX_("injector",f4,31,ff,1e)},
	{hx::fsObject /*::mmvc::api::IMediatorMap*/ ,(int)offsetof(TriggerCommand_obj,mediatorMap),HX_("mediatorMap",29,1c,2a,f0)},
	{hx::fsObject /*::mmvc::api::ITriggerMap*/ ,(int)offsetof(TriggerCommand_obj,triggerMap),HX_("triggerMap",44,80,e2,e3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TriggerCommand_obj_sStaticStorageInfo = 0;
#endif

static ::String TriggerCommand_obj_sMemberFields[] = {
	HX_("contextView",f4,17,53,2b),
	HX_("commandMap",11,f2,9c,43),
	HX_("injector",f4,31,ff,1e),
	HX_("mediatorMap",29,1c,2a,f0),
	HX_("triggerMap",44,80,e2,e3),
	::String(null()) };

hx::Class TriggerCommand_obj::__mClass;

void TriggerCommand_obj::__register()
{
	TriggerCommand_obj _hx_dummy;
	TriggerCommand_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.impl.TriggerCommand",80,c8,1f,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TriggerCommand_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TriggerCommand_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriggerCommand_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriggerCommand_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TriggerCommand_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_498fa83298003776_34_boot)
HXDLIN(  34)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("triggerMap",44,80,e2,e3), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.ITriggerMap",38,b4,f2,4d)))))
            				->setFixed(1,HX_("mediatorMap",29,1c,2a,f0), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.IMediatorMap",b5,5d,47,54)))))
            				->setFixed(2,HX_("injector",f4,31,ff,1e), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("minject.Injector",c4,a9,3d,3b)))))
            				->setFixed(3,HX_("contextView",f4,17,53,2b), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.IViewContainer",a8,ea,fb,50)))))
            				->setFixed(4,HX_("commandMap",11,f2,9c,43), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.ICommandMap",05,26,ad,ad))))))));
            	}
}

} // end namespace mmvc
} // end namespace impl
