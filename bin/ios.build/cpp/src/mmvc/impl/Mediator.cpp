// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediator
#include <mmvc/api/IMediator.h>
#endif
#ifndef INCLUDED_mmvc_api_IMediatorMap
#include <mmvc/api/IMediatorMap.h>
#endif
#ifndef INCLUDED_mmvc_api_IViewContainer
#include <mmvc/api/IViewContainer.h>
#endif
#ifndef INCLUDED_mmvc_base_MediatorBase
#include <mmvc/base/MediatorBase.h>
#endif
#ifndef INCLUDED_mmvc_impl_Mediator
#include <mmvc/impl/Mediator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1794fb70e283d1aa_43_new,"mmvc.impl.Mediator","new",0xf5533ef2,"mmvc.impl.Mediator.new","mmvc/impl/Mediator.hx",43,0xdb9ca45e)
HX_LOCAL_STACK_FRAME(_hx_pos_1794fb70e283d1aa_33_boot,"mmvc.impl.Mediator","boot",0xab9cd560,"mmvc.impl.Mediator.boot","mmvc/impl/Mediator.hx",33,0xdb9ca45e)
namespace mmvc{
namespace impl{

void Mediator_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1794fb70e283d1aa_43_new)
HXDLIN(  43)		super::__construct();
            	}

Dynamic Mediator_obj::__CreateEmpty() { return new Mediator_obj; }

void *Mediator_obj::_hx_vtable = 0;

Dynamic Mediator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mediator_obj > _hx_result = new Mediator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mediator_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x16419940) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x16419940;
	} else {
		return inClassId==(int)0x446a16c6;
	}
}


hx::ObjectPtr< Mediator_obj > Mediator_obj::__new() {
	hx::ObjectPtr< Mediator_obj > __this = new Mediator_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mediator_obj > Mediator_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mediator_obj *__this = (Mediator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mediator_obj), true, "mmvc.impl.Mediator"));
	*(void **)__this = Mediator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mediator_obj::Mediator_obj()
{
}

void Mediator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mediator);
	HX_MARK_MEMBER_NAME(injector,"injector");
	HX_MARK_MEMBER_NAME(contextView,"contextView");
	HX_MARK_MEMBER_NAME(mediatorMap,"mediatorMap");
	 ::mmvc::base::MediatorBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mediator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(injector,"injector");
	HX_VISIT_MEMBER_NAME(contextView,"contextView");
	HX_VISIT_MEMBER_NAME(mediatorMap,"mediatorMap");
	 ::mmvc::base::MediatorBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mediator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { return hx::Val( injector ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { return hx::Val( contextView ); }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { return hx::Val( mediatorMap ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Mediator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"injector") ) { injector=inValue.Cast<  ::minject::Injector >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contextView") ) { contextView=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediatorMap") ) { mediatorMap=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mediator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("injector",f4,31,ff,1e));
	outFields->push(HX_("contextView",f4,17,53,2b));
	outFields->push(HX_("mediatorMap",29,1c,2a,f0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Mediator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::minject::Injector*/ ,(int)offsetof(Mediator_obj,injector),HX_("injector",f4,31,ff,1e)},
	{hx::fsObject /*::mmvc::api::IViewContainer*/ ,(int)offsetof(Mediator_obj,contextView),HX_("contextView",f4,17,53,2b)},
	{hx::fsObject /*::mmvc::api::IMediatorMap*/ ,(int)offsetof(Mediator_obj,mediatorMap),HX_("mediatorMap",29,1c,2a,f0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mediator_obj_sStaticStorageInfo = 0;
#endif

static ::String Mediator_obj_sMemberFields[] = {
	HX_("injector",f4,31,ff,1e),
	HX_("contextView",f4,17,53,2b),
	HX_("mediatorMap",29,1c,2a,f0),
	::String(null()) };

hx::Class Mediator_obj::__mClass;

void Mediator_obj::__register()
{
	Mediator_obj _hx_dummy;
	Mediator_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("mmvc.impl.Mediator",00,9e,f0,4e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mediator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mediator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mediator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mediator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mediator_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1794fb70e283d1aa_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("mediatorMap",29,1c,2a,f0), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.IMediatorMap",b5,5d,47,54)))))
            				->setFixed(1,HX_("injector",f4,31,ff,1e), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("minject.Injector",c4,a9,3d,3b)))))
            				->setFixed(2,HX_("contextView",f4,17,53,2b), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("inject",91,4a,ea,97),null())
            					->setFixed(1,HX_("type",ba,f2,08,4d),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mmvc.api.IViewContainer",a8,ea,fb,50))))))));
            	}
}

} // end namespace mmvc
} // end namespace impl
