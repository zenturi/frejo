// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_0067bf2d025ab5b6
#define INCLUDED_0067bf2d025ab5b6
#include "YGEnums.h"
#endif
#ifndef INCLUDED_ab47325cc4883df2
#define INCLUDED_ab47325cc4883df2
#include "linc_nanovg.h"
#endif
#ifndef INCLUDED_41ceae67ff73b9ad
#define INCLUDED_41ceae67ff73b9ad
#include "linc_yoga.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_frejo_app_Application
#include <frejo/app/Application.h>
#endif
#ifndef INCLUDED_frejo_core_VG
#include <frejo/core/VG.h>
#endif
#ifndef INCLUDED_frejo_display_Node
#include <frejo/display/Node.h>
#endif
#ifndef INCLUDED_msignal_Signal
#include <msignal/Signal.h>
#endif
#ifndef INCLUDED_msignal_Signal2
#include <msignal/Signal2.h>
#endif
#ifndef INCLUDED_msignal_Slot
#include <msignal/Slot.h>
#endif
#ifndef INCLUDED_msignal_Slot2
#include <msignal/Slot2.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_17_new,"frejo.display.Node","new",0x488ed790,"frejo.display.Node.new","frejo/display/Node.hx",17,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_57_dispatch,"frejo.display.Node","dispatch",0xd0f0b98a,"frejo.display.Node.dispatch","frejo/display/Node.hx",57,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_63_init,"frejo.display.Node","init",0x31267de0,"frejo.display.Node.init","frejo/display/Node.hx",63,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_81_set_position,"frejo.display.Node","set_position",0x04b00af6,"frejo.display.Node.set_position","frejo/display/Node.hx",81,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_87_get_position,"frejo.display.Node","get_position",0xefb6e782,"frejo.display.Node.get_position","frejo/display/Node.hx",87,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_90_set_width,"frejo.display.Node","set_width",0x7a1d8999,"frejo.display.Node.set_width","frejo/display/Node.hx",90,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_98_get_width,"frejo.display.Node","get_width",0x96cc9d8d,"frejo.display.Node.get_width","frejo/display/Node.hx",98,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_101_set_height,"frejo.display.Node","set_height",0x160a54f4,"frejo.display.Node.set_height","frejo/display/Node.hx",101,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_109_get_height,"frejo.display.Node","get_height",0x128cb680,"frejo.display.Node.get_height","frejo/display/Node.hx",109,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_112_set_style,"frejo.display.Node","set_style",0x33d878c4,"frejo.display.Node.set_style","frejo/display/Node.hx",112,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_119_get_style,"frejo.display.Node","get_style",0x50878cb8,"frejo.display.Node.get_style","frejo/display/Node.hx",119,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_130_getLayout,"frejo.display.Node","getLayout",0x5dcfc310,"frejo.display.Node.getLayout","frejo/display/Node.hx",130,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_134_addChild,"frejo.display.Node","addChild",0x71a3ba8b,"frejo.display.Node.addChild","frejo/display/Node.hx",134,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_137_addChildAt,"frejo.display.Node","addChildAt",0xedefec5e,"frejo.display.Node.addChildAt","frejo/display/Node.hx",137,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_157_removeChild,"frejo.display.Node","removeChild",0xe64b3de8,"frejo.display.Node.removeChild","frejo/display/Node.hx",157,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_168_initStyle,"frejo.display.Node","initStyle",0x28704b31,"frejo.display.Node.initStyle","frejo/display/Node.hx",168,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_185_computeLayout,"frejo.display.Node","computeLayout",0x01ccc0b1,"frejo.display.Node.computeLayout","frejo/display/Node.hx",185,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_199_draw,"frejo.display.Node","draw",0x2ddb6ed4,"frejo.display.Node.draw","frejo/display/Node.hx",199,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_214_update,"frejo.display.Node","update",0x95e31cd9,"frejo.display.Node.update","frejo/display/Node.hx",214,0xcf58e51e)
HX_LOCAL_STACK_FRAME(_hx_pos_278ec2878a2b9d2b_216_destroy,"frejo.display.Node","destroy",0x178c8c2a,"frejo.display.Node.destroy","frejo/display/Node.hx",216,0xcf58e51e)
namespace frejo{
namespace display{

void Node_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_17_new)
HXLINE(  55)		this->STYLE_CHANGED = HX_("Style_Changed",66,40,c6,7d);
HXLINE(  54)		this->REMOVED = HX_("Removed",80,47,51,c0);
HXLINE(  53)		this->ADDED = HX_("Added",a0,44,71,af);
HXLINE(  60)		this->init();
            	}

Dynamic Node_obj::__CreateEmpty() { return new Node_obj; }

void *Node_obj::_hx_vtable = 0;

Dynamic Node_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Node_obj > _hx_result = new Node_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Node_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1719c906;
}

void Node_obj::dispatch(::String event, ::frejo::display::Node node){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_57_dispatch)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Node_obj,dispatch,(void))

void Node_obj::init(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_63_init)
HXLINE(  64)		this->app = ::frejo::app::Application_obj::getInstance();
HXLINE(  65)		this->children = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		this->name = ( (::String)(::Type_obj::getClassName(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this))).split(HX_(".",2e,00,00,00))->pop()) );
HXLINE(  67)		this->vg = ::frejo::core::VG_obj::getInstance();
HXLINE(  68)		this->flexConfig = ::linc::yoga::NewConfig();
HXLINE(  69)		this->flexNode = ::YGNodeNewWithConfig(this->flexConfig);
HXLINE(  70)		this->layout = this->flexNode->getLayout();
HXLINE(  71)		this->bgColor =  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("a",61,00,00,00),255)
            			->setFixed(1,HX_("b",62,00,00,00),255)
            			->setFixed(2,HX_("g",67,00,00,00),255)
            			->setFixed(3,HX_("r",72,00,00,00),255));
HXLINE(  77)		this->set_width(( (Float)(this->app->window_width) ));
HXLINE(  78)		this->set_height(( (Float)(this->app->window_height) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,init,(void))

 ::Dynamic Node_obj::set_position( ::Dynamic p){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_81_set_position)
HXLINE(  82)		this->position = p;
HXLINE(  83)		return p;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,set_position,return )

 ::Dynamic Node_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_87_get_position)
HXDLIN(  87)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,get_position,return )

Float Node_obj::set_width(Float w){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_90_set_width)
HXLINE(  91)		this->width = w;
HXLINE(  92)		::YGNodeStyleSetWidth(this->flexNode,w);
HXLINE(  93)		this->initStyle();
HXLINE(  94)		return this->get_width();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,set_width,return )

Float Node_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_98_get_width)
HXDLIN(  98)		return this->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,get_width,return )

Float Node_obj::set_height(Float h){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_101_set_height)
HXLINE( 102)		this->height = h;
HXLINE( 103)		::YGNodeStyleSetHeight(this->flexNode,h);
HXLINE( 104)		this->initStyle();
HXLINE( 105)		return this->get_height();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,set_height,return )

Float Node_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_109_get_height)
HXDLIN( 109)		return this->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,get_height,return )

 YGStyle Node_obj::set_style( YGStyle style){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_112_set_style)
HXLINE( 113)		this->style = style;
HXLINE( 114)		this->initStyle();
HXLINE( 115)		return style;
            	}


static ::Dynamic _hx_wrapNode_obj_set_style( hx::Object *obj,const Dynamic &a0) {
	return (cpp::Struct<  YGStyle >) reinterpret_cast< Node_obj *>(obj)->set_style((cpp::Struct<  YGStyle >) a0);
}
::Dynamic Node_obj::set_style_dyn() {
	return hx::CreateMemberFunction1("set_style",this,_hx_wrapNode_obj_set_style);}
 YGStyle Node_obj::get_style(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_119_get_style)
HXDLIN( 119)		return this->style;
            	}


static ::Dynamic _hx_wrapNode_obj_get_style( hx::Object *obj) {
	return (cpp::Struct<  YGStyle >) reinterpret_cast< Node_obj *>(obj)->get_style();
}
::Dynamic Node_obj::get_style_dyn() {
	return hx::CreateMemberFunction0("get_style",this,_hx_wrapNode_obj_get_style);}
 YGLayout Node_obj::getLayout(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_130_getLayout)
HXDLIN( 130)		return this->layout;
            	}


static ::Dynamic _hx_wrapNode_obj_getLayout( hx::Object *obj) {
	return (cpp::Struct<  YGLayout >) reinterpret_cast< Node_obj *>(obj)->getLayout();
}
::Dynamic Node_obj::getLayout_dyn() {
	return hx::CreateMemberFunction0("getLayout",this,_hx_wrapNode_obj_getLayout);}
void Node_obj::addChild( ::frejo::display::Node child){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_134_addChild)
HXDLIN( 134)		this->addChildAt(child,this->children->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,addChild,(void))

void Node_obj::addChildAt( ::frejo::display::Node child,int index){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_137_addChildAt)
HXLINE( 138)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 139)			if (hx::IsNotEq( this->children->__get(index).StaticCast<  ::frejo::display::Node >(),child )) {
HXLINE( 140)				this->children->remove(child);
HXLINE( 141)				this->children->insert(index,child);
            			}
            		}
            		else {
HXLINE( 144)			if (hx::IsNull( child->parent )) {
HXLINE( 145)				child->parent->removeChild(child);
            			}
HXLINE( 148)			this->children->insert(index,child);
            		}
HXLINE( 150)		child->signal->add(this->dispatch_dyn()).StaticCast<  ::msignal::Slot2 >();
HXLINE( 151)		child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 152)		this->dispatch(this->ADDED,child);
HXLINE( 154)		this->initStyle();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Node_obj,addChildAt,(void))

void Node_obj::removeChild( ::frejo::display::Node child){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_157_removeChild)
HXLINE( 158)		bool _hx_tmp;
HXDLIN( 158)		if (hx::IsNotNull( child )) {
HXLINE( 158)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 158)			_hx_tmp = false;
            		}
HXDLIN( 158)		if (_hx_tmp) {
HXLINE( 159)			this->children->remove(child);
HXLINE( 160)			child->signal->remove(this->dispatch_dyn()).StaticCast<  ::msignal::Slot2 >();
HXLINE( 161)			child->parent = null();
HXLINE( 162)			this->dispatch(this->REMOVED,child);
            		}
HXLINE( 165)		this->initStyle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,removeChild,(void))

void Node_obj::initStyle(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_168_initStyle)
HXLINE( 169)		this->dispatch(this->STYLE_CHANGED,hx::ObjectPtr<OBJ_>(this));
HXLINE( 170)		this->computeLayout();
HXLINE( 173)		Float position = ::YGNodeLayoutGetLeft(this->flexNode);
HXLINE( 172)		 ::Dynamic position1 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),position)
            			->setFixed(1,HX_("y",79,00,00,00),::YGNodeLayoutGetTop(this->flexNode)));
HXLINE( 177)		::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),HX_("position",a9,a0,fa,ca),position1);
HXLINE( 180)		::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),HX_("width",06,b6,62,ca),::YGNodeLayoutGetWidth(this->flexNode));
HXLINE( 181)		::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),HX_("height",e7,07,4c,02),::YGNodeLayoutGetHeight(this->flexNode));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,initStyle,(void))

void Node_obj::computeLayout(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_185_computeLayout)
HXLINE( 186)		if ((this->children->length > 0)) {
HXLINE( 187)			int _g = 0;
HXDLIN( 187)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 187)			while((_g < _g1->length)){
HXLINE( 187)				 ::frejo::display::Node child = _g1->__get(_g).StaticCast<  ::frejo::display::Node >();
HXDLIN( 187)				_g = (_g + 1);
HXLINE( 188)				child->initStyle();
HXLINE( 189)				 YGNodeRef _hx_tmp = this->flexNode;
HXDLIN( 189)				 YGNodeRef child1 = child->flexNode;
HXDLIN( 189)				::YGNodeInsertChild(_hx_tmp,child1,this->children->indexOf(child,null()));
            			}
            		}
HXLINE( 193)		::YGNodeCalculateLayout(this->flexNode,( (Float)(YGUndefined) ),( (Float)(YGUndefined) ),YGDirectionLTR);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,computeLayout,(void))

void Node_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_199_draw)
HXLINE( 200)		this->vg->beginFrame(this->app->window_width,this->app->window_height,this->app->pixelRatio);
HXLINE( 201)		this->vg->save();
HXLINE( 202)		Float dpr = this->app->pixelRatio;
HXLINE( 203)		 ::frejo::core::VG _hx_tmp = this->vg;
HXDLIN( 203)		Float _hx_tmp1 = ( (Float)(this->position->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 203)		Float _hx_tmp2 = ( (Float)(this->position->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 203)		Float _hx_tmp3 = this->get_width();
HXDLIN( 203)		_hx_tmp->rect(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_height());
HXLINE( 204)		 ::frejo::core::VG _hx_tmp4 = this->vg;
HXDLIN( 204)		_hx_tmp4->fillColor(this->vg->rgba(( (unsigned char)(this->bgColor->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) ),( (unsigned char)(this->bgColor->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) ),( (unsigned char)(this->bgColor->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ),( (unsigned char)(this->bgColor->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) )));
HXLINE( 205)		this->vg->fill();
HXLINE( 207)		{
HXLINE( 207)			int _g = 0;
HXDLIN( 207)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 207)			while((_g < _g1->length)){
HXLINE( 207)				 ::frejo::display::Node child = _g1->__get(_g).StaticCast<  ::frejo::display::Node >();
HXDLIN( 207)				_g = (_g + 1);
HXLINE( 208)				child->draw();
            			}
            		}
HXLINE( 211)		this->vg->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,draw,(void))

void Node_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_214_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,update,(void))

void Node_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_278ec2878a2b9d2b_216_destroy)
HXLINE( 217)		::YGNodeFreeRecursive(this->flexNode);
HXLINE( 218)		::YGConfigFree(this->flexConfig);
HXLINE( 220)		{
HXLINE( 220)			int _g = 0;
HXDLIN( 220)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN( 220)			while((_g < _g1->length)){
HXLINE( 220)				 ::frejo::display::Node child = _g1->__get(_g).StaticCast<  ::frejo::display::Node >();
HXDLIN( 220)				_g = (_g + 1);
HXLINE( 221)				this->removeChild(child);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,destroy,(void))


hx::ObjectPtr< Node_obj > Node_obj::__new() {
	hx::ObjectPtr< Node_obj > __this = new Node_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Node_obj > Node_obj::__alloc(hx::Ctx *_hx_ctx) {
	Node_obj *__this = (Node_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Node_obj), true, "frejo.display.Node"));
	*(void **)__this = Node_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Node_obj::Node_obj()
{
}

void Node_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Node);
	HX_MARK_MEMBER_NAME(vg,"vg");
	HX_MARK_MEMBER_NAME(flexNode,"flexNode");
	HX_MARK_MEMBER_NAME(flexConfig,"flexConfig");
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(signal,"signal");
	HX_MARK_MEMBER_NAME(ADDED,"ADDED");
	HX_MARK_MEMBER_NAME(REMOVED,"REMOVED");
	HX_MARK_MEMBER_NAME(STYLE_CHANGED,"STYLE_CHANGED");
	HX_MARK_END_CLASS();
}

void Node_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vg,"vg");
	HX_VISIT_MEMBER_NAME(flexNode,"flexNode");
	HX_VISIT_MEMBER_NAME(flexConfig,"flexConfig");
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(signal,"signal");
	HX_VISIT_MEMBER_NAME(ADDED,"ADDED");
	HX_VISIT_MEMBER_NAME(REMOVED,"REMOVED");
	HX_VISIT_MEMBER_NAME(STYLE_CHANGED,"STYLE_CHANGED");
}

hx::Val Node_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"vg") ) { return hx::Val( vg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return hx::Val( cpp::Struct<  YGStyle >( inCallProp == hx::paccAlways ? get_style() : style ) ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"ADDED") ) { return hx::Val( ADDED ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return hx::Val( cpp::Struct<  YGLayout >( layout ) ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"signal") ) { return hx::Val( signal ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { return hx::Val( bgColor ); }
		if (HX_FIELD_EQ(inName,"REMOVED") ) { return hx::Val( REMOVED ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"dispatch") ) { return hx::Val( dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_style") ) { return hx::Val( set_style_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_style") ) { return hx::Val( get_style_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayout") ) { return hx::Val( getLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"initStyle") ) { return hx::Val( initStyle_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"STYLE_CHANGED") ) { return hx::Val( STYLE_CHANGED ); }
		if (HX_FIELD_EQ(inName,"computeLayout") ) { return hx::Val( computeLayout_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Node_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"vg") ) { vg=inValue.Cast<  ::frejo::core::VG >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::frejo::app::Application >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { if (inCallProp == hx::paccAlways) return hx::Val( cpp::Struct<  YGStyle >( set_style(inValue.Cast< cpp::Struct<  YGStyle >  >()) ) );style=inValue.Cast< cpp::Struct<  YGStyle >  >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) );width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ADDED") ) { ADDED=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast< cpp::Struct<  YGLayout >  >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) );height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::frejo::display::Node >(); return inValue; }
		if (HX_FIELD_EQ(inName,"signal") ) { signal=inValue.Cast<  ::msignal::Signal2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"REMOVED") ) { REMOVED=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue.Cast<  ::Dynamic >()) );position=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"STYLE_CHANGED") ) { STYLE_CHANGED=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Node_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vg",31,67,00,00));
	outFields->push(HX_("flexNode",db,d5,2b,03));
	outFields->push(HX_("flexConfig",db,8a,e1,a6));
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("bgColor",5e,81,83,f7));
	outFields->push(HX_("style",31,a5,1d,84));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("signal",68,2e,86,b4));
	outFields->push(HX_("ADDED",a0,0c,32,9a));
	outFields->push(HX_("REMOVED",80,f3,d3,72));
	outFields->push(HX_("STYLE_CHANGED",66,b4,11,75));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Node_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::frejo::core::VG*/ ,(int)offsetof(Node_obj,vg),HX_("vg",31,67,00,00)},
	{hx::fsObject /*YGNodeRef*/ ,(int)offsetof(Node_obj,flexNode),HX_("flexNode",db,d5,2b,03)},
	{hx::fsObject /*YGConfigRef*/ ,(int)offsetof(Node_obj,flexConfig),HX_("flexConfig",db,8a,e1,a6)},
	{hx::fsObject /*::frejo::app::Application*/ ,(int)offsetof(Node_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Node_obj,bgColor),HX_("bgColor",5e,81,83,f7)},
	{hx::fsObject /*YGStyle*/ ,(int)offsetof(Node_obj,style),HX_("style",31,a5,1d,84)},
	{hx::fsObject /*YGLayout*/ ,(int)offsetof(Node_obj,layout),HX_("layout",aa,ae,b8,58)},
	{hx::fsFloat,(int)offsetof(Node_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsFloat,(int)offsetof(Node_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Node_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Node_obj,children),HX_("children",3f,19,6a,70)},
	{hx::fsObject /*::frejo::display::Node*/ ,(int)offsetof(Node_obj,parent),HX_("parent",2a,05,7e,ed)},
	{hx::fsString,(int)offsetof(Node_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::msignal::Signal2*/ ,(int)offsetof(Node_obj,signal),HX_("signal",68,2e,86,b4)},
	{hx::fsString,(int)offsetof(Node_obj,ADDED),HX_("ADDED",a0,0c,32,9a)},
	{hx::fsString,(int)offsetof(Node_obj,REMOVED),HX_("REMOVED",80,f3,d3,72)},
	{hx::fsString,(int)offsetof(Node_obj,STYLE_CHANGED),HX_("STYLE_CHANGED",66,b4,11,75)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Node_obj_sStaticStorageInfo = 0;
#endif

static ::String Node_obj_sMemberFields[] = {
	HX_("vg",31,67,00,00),
	HX_("app",a1,fc,49,00),
	HX_("bgColor",5e,81,83,f7),
	HX_("style",31,a5,1d,84),
	HX_("layout",aa,ae,b8,58),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("position",a9,a0,fa,ca),
	HX_("children",3f,19,6a,70),
	HX_("parent",2a,05,7e,ed),
	HX_("name",4b,72,ff,48),
	HX_("signal",68,2e,86,b4),
	HX_("ADDED",a0,0c,32,9a),
	HX_("REMOVED",80,f3,d3,72),
	HX_("STYLE_CHANGED",66,b4,11,75),
	HX_("dispatch",ba,ce,63,1e),
	HX_("init",10,3b,bb,45),
	HX_("set_position",26,78,0d,95),
	HX_("get_position",b2,54,14,80),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_height",24,16,51,f6),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_style",94,ed,17,ab),
	HX_("get_style",88,01,c7,c7),
	HX_("getLayout",e0,37,0f,d5),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("removeChild",b8,86,ed,43),
	HX_("initStyle",01,c0,af,9f),
	HX_("computeLayout",81,dd,2e,c3),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

hx::Class Node_obj::__mClass;

void Node_obj::__register()
{
	Node_obj _hx_dummy;
	Node_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("frejo.display.Node",9e,0f,d0,05);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Node_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Node_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Node_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Node_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace frejo
} // end namespace display
