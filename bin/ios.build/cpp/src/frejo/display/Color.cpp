// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_ab47325cc4883df2
#define INCLUDED_ab47325cc4883df2
#include "linc_nanovg.h"
#endif
#ifndef INCLUDED_frejo_core_VG
#include <frejo/core/VG.h>
#endif
#ifndef INCLUDED_frejo_display_Color
#include <frejo/display/Color.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1262bd0d60a22443_13_new,"frejo.display.Color","new",0x6d4424b9,"frejo.display.Color.new","frejo/display/Color.hx",13,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_16_toNVGcolor,"frejo.display.Color","toNVGcolor",0x2cbe6b46,"frejo.display.Color.toNVGcolor","frejo/display/Color.hx",16,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_18_boot,"frejo.display.Color","boot",0x2674fdb9,"frejo.display.Color.boot","frejo/display/Color.hx",18,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_19_boot,"frejo.display.Color","boot",0x2674fdb9,"frejo.display.Color.boot","frejo/display/Color.hx",19,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_21_boot,"frejo.display.Color","boot",0x2674fdb9,"frejo.display.Color.boot","frejo/display/Color.hx",21,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_23_boot,"frejo.display.Color","boot",0x2674fdb9,"frejo.display.Color.boot","frejo/display/Color.hx",23,0x4ae7cfd9)
HX_LOCAL_STACK_FRAME(_hx_pos_1262bd0d60a22443_25_boot,"frejo.display.Color","boot",0x2674fdb9,"frejo.display.Color.boot","frejo/display/Color.hx",25,0x4ae7cfd9)
namespace frejo{
namespace display{

void Color_obj::__construct(int r,int g,int b,int a){
            	HX_STACKFRAME(&_hx_pos_1262bd0d60a22443_13_new)
            	}

Dynamic Color_obj::__CreateEmpty() { return new Color_obj; }

void *Color_obj::_hx_vtable = 0;

Dynamic Color_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Color_obj > _hx_result = new Color_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Color_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78a8e2fb;
}

 NVGcolor Color_obj::toNVGcolor(){
            	HX_STACKFRAME(&_hx_pos_1262bd0d60a22443_16_toNVGcolor)
HXDLIN(  16)		return ::frejo::core::VG_obj::getInstance()->rgba(( (unsigned char)(this->r) ),( (unsigned char)(this->g) ),( (unsigned char)(this->b) ),( (unsigned char)(this->a) ));
            	}


 ::frejo::display::Color Color_obj::PRIMARY;

 ::frejo::display::Color Color_obj::SECONDARY;

 ::frejo::display::Color Color_obj::DANGER;

 ::frejo::display::Color Color_obj::LIGHT;

 ::frejo::display::Color Color_obj::TRANSPARENT;


hx::ObjectPtr< Color_obj > Color_obj::__new(int r,int g,int b,int a) {
	hx::ObjectPtr< Color_obj > __this = new Color_obj();
	__this->__construct(r,g,b,a);
	return __this;
}

hx::ObjectPtr< Color_obj > Color_obj::__alloc(hx::Ctx *_hx_ctx,int r,int g,int b,int a) {
	Color_obj *__this = (Color_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Color_obj), false, "frejo.display.Color"));
	*(void **)__this = Color_obj::_hx_vtable;
	__this->__construct(r,g,b,a);
	return __this;
}

Color_obj::Color_obj()
{
}

hx::Val Color_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Color_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"LIGHT") ) { outValue = ( LIGHT ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"DANGER") ) { outValue = ( DANGER ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"PRIMARY") ) { outValue = ( PRIMARY ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SECONDARY") ) { outValue = ( SECONDARY ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { outValue = ( TRANSPARENT ); return true; }
	}
	return false;
}

hx::Val Color_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Color_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"LIGHT") ) { LIGHT=ioValue.Cast<  ::frejo::display::Color >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"DANGER") ) { DANGER=ioValue.Cast<  ::frejo::display::Color >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"PRIMARY") ) { PRIMARY=ioValue.Cast<  ::frejo::display::Color >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SECONDARY") ) { SECONDARY=ioValue.Cast<  ::frejo::display::Color >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { TRANSPARENT=ioValue.Cast<  ::frejo::display::Color >(); return true; }
	}
	return false;
}

void Color_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("a",61,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Color_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Color_obj,r),HX_("r",72,00,00,00)},
	{hx::fsInt,(int)offsetof(Color_obj,g),HX_("g",67,00,00,00)},
	{hx::fsInt,(int)offsetof(Color_obj,b),HX_("b",62,00,00,00)},
	{hx::fsInt,(int)offsetof(Color_obj,a),HX_("a",61,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Color_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::frejo::display::Color*/ ,(void *) &Color_obj::PRIMARY,HX_("PRIMARY",a2,13,50,03)},
	{hx::fsObject /*::frejo::display::Color*/ ,(void *) &Color_obj::SECONDARY,HX_("SECONDARY",54,bf,92,5d)},
	{hx::fsObject /*::frejo::display::Color*/ ,(void *) &Color_obj::DANGER,HX_("DANGER",e3,fe,14,d1)},
	{hx::fsObject /*::frejo::display::Color*/ ,(void *) &Color_obj::LIGHT,HX_("LIGHT",b6,c8,ea,f2)},
	{hx::fsObject /*::frejo::display::Color*/ ,(void *) &Color_obj::TRANSPARENT,HX_("TRANSPARENT",32,37,f6,f8)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Color_obj_sMemberFields[] = {
	HX_("r",72,00,00,00),
	HX_("g",67,00,00,00),
	HX_("b",62,00,00,00),
	HX_("a",61,00,00,00),
	::String(null()) };

static void Color_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_obj::PRIMARY,"PRIMARY");
	HX_MARK_MEMBER_NAME(Color_obj::SECONDARY,"SECONDARY");
	HX_MARK_MEMBER_NAME(Color_obj::DANGER,"DANGER");
	HX_MARK_MEMBER_NAME(Color_obj::LIGHT,"LIGHT");
	HX_MARK_MEMBER_NAME(Color_obj::TRANSPARENT,"TRANSPARENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_obj::PRIMARY,"PRIMARY");
	HX_VISIT_MEMBER_NAME(Color_obj::SECONDARY,"SECONDARY");
	HX_VISIT_MEMBER_NAME(Color_obj::DANGER,"DANGER");
	HX_VISIT_MEMBER_NAME(Color_obj::LIGHT,"LIGHT");
	HX_VISIT_MEMBER_NAME(Color_obj::TRANSPARENT,"TRANSPARENT");
};

#endif

hx::Class Color_obj::__mClass;

static ::String Color_obj_sStaticFields[] = {
	HX_("PRIMARY",a2,13,50,03),
	HX_("SECONDARY",54,bf,92,5d),
	HX_("DANGER",e3,fe,14,d1),
	HX_("LIGHT",b6,c8,ea,f2),
	HX_("TRANSPARENT",32,37,f6,f8),
	::String(null())
};

void Color_obj::__register()
{
	Color_obj _hx_dummy;
	Color_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("frejo.display.Color",47,54,db,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_obj::__GetStatic;
	__mClass->mSetStaticField = &Color_obj::__SetStatic;
	__mClass->mMarkFunc = Color_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Color_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Color_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Color_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Color_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_1262bd0d60a22443_18_boot)
HXDLIN(  18)		PRIMARY =  ::frejo::display::Color_obj::__alloc( HX_CTX ,72,138,255,255);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1262bd0d60a22443_19_boot)
HXDLIN(  19)		SECONDARY =  ::frejo::display::Color_obj::__alloc( HX_CTX ,50,219,100,255);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1262bd0d60a22443_21_boot)
HXDLIN(  21)		DANGER =  ::frejo::display::Color_obj::__alloc( HX_CTX ,245,61,61,255);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1262bd0d60a22443_23_boot)
HXDLIN(  23)		LIGHT =  ::frejo::display::Color_obj::__alloc( HX_CTX ,244,244,244,255);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1262bd0d60a22443_25_boot)
HXDLIN(  25)		TRANSPARENT =  ::frejo::display::Color_obj::__alloc( HX_CTX ,0,0,0,0);
            	}
}

} // end namespace frejo
} // end namespace display
