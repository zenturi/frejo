// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_ab47325cc4883df2
#define INCLUDED_ab47325cc4883df2
#include "linc_nanovg.h"
#endif
#ifndef INCLUDED_frejo_core_VG
#include <frejo/core/VG.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b09dd08190ad881_25_new,"frejo.core.VG","new",0xe4ef1202,"frejo.core.VG.new","frejo/core/VG.hx",25,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_33_beginFrame,"frejo.core.VG","beginFrame",0x31f79fe2,"frejo.core.VG.beginFrame","frejo/core/VG.hx",33,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_37_endFrame,"frejo.core.VG","endFrame",0x864a9d70,"frejo.core.VG.endFrame","frejo/core/VG.hx",37,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_49_rgba,"frejo.core.VG","rgba",0x6ee6fcd2,"frejo.core.VG.rgba","frejo/core/VG.hx",49,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_89_strokeColor,"frejo.core.VG","strokeColor",0xa31f662d,"frejo.core.VG.strokeColor","frejo/core/VG.hx",89,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_93_strokePaint,"frejo.core.VG","strokePaint",0x1611ac68,"frejo.core.VG.strokePaint","frejo/core/VG.hx",93,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_97_fillColor,"frejo.core.VG","fillColor",0x279abf02,"frejo.core.VG.fillColor","frejo/core/VG.hx",97,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_101_fillPaint,"frejo.core.VG","fillPaint",0x9a8d053d,"frejo.core.VG.fillPaint","frejo/core/VG.hx",101,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_105_miterLimit,"frejo.core.VG","miterLimit",0x0a157394,"frejo.core.VG.miterLimit","frejo/core/VG.hx",105,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_109_strokeWidth,"frejo.core.VG","strokeWidth",0x2325aad0,"frejo.core.VG.strokeWidth","frejo/core/VG.hx",109,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_113_lineCap,"frejo.core.VG","lineCap",0x404a3f20,"frejo.core.VG.lineCap","frejo/core/VG.hx",113,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_117_lineJoin,"frejo.core.VG","lineJoin",0x0558151c,"frejo.core.VG.lineJoin","frejo/core/VG.hx",117,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_121_globalAlpha,"frejo.core.VG","globalAlpha",0x39ddb29d,"frejo.core.VG.globalAlpha","frejo/core/VG.hx",121,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_257_beginPath,"frejo.core.VG","beginPath",0xa1c2eb90,"frejo.core.VG.beginPath","frejo/core/VG.hx",257,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_261_moveTo,"frejo.core.VG","moveTo",0xdce4c28a,"frejo.core.VG.moveTo","frejo/core/VG.hx",261,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_265_lineTo,"frejo.core.VG","lineTo",0xfcd8362d,"frejo.core.VG.lineTo","frejo/core/VG.hx",265,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_269_bezierTo,"frejo.core.VG","bezierTo",0x4ec76298,"frejo.core.VG.bezierTo","frejo/core/VG.hx",269,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_273_arcTo,"frejo.core.VG","arcTo",0xd8ac6e8f,"frejo.core.VG.arcTo","frejo/core/VG.hx",273,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_277_closePath,"frejo.core.VG","closePath",0x22b78c9f,"frejo.core.VG.closePath","frejo/core/VG.hx",277,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_281_pathWinding,"frejo.core.VG","pathWinding",0x05326d97,"frejo.core.VG.pathWinding","frejo/core/VG.hx",281,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_285_arc,"frejo.core.VG","arc",0xe4e53ff4,"frejo.core.VG.arc","frejo/core/VG.hx",285,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_289_rect,"frejo.core.VG","rect",0x6ee57942,"frejo.core.VG.rect","frejo/core/VG.hx",289,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_293_roundedRect,"frejo.core.VG","roundedRect",0x6a60c793,"frejo.core.VG.roundedRect","frejo/core/VG.hx",293,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_297_ellipse,"frejo.core.VG","ellipse",0x2c3ffb80,"frejo.core.VG.ellipse","frejo/core/VG.hx",297,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_301_circle,"frejo.core.VG","circle",0x664561ae,"frejo.core.VG.circle","frejo/core/VG.hx",301,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_305_fill,"frejo.core.VG","fill",0x66f9faa1,"frejo.core.VG.fill","frejo/core/VG.hx",305,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_309_stroke,"frejo.core.VG","stroke",0x216ca356,"frejo.core.VG.stroke","frejo/core/VG.hx",309,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_325_fontSize,"frejo.core.VG","fontSize",0x509b514e,"frejo.core.VG.fontSize","frejo/core/VG.hx",325,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_329_fontBlur,"frejo.core.VG","fontBlur",0x4560f334,"frejo.core.VG.fontBlur","frejo/core/VG.hx",329,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_333_textLetterSpacing,"frejo.core.VG","textLetterSpacing",0xfe922b72,"frejo.core.VG.textLetterSpacing","frejo/core/VG.hx",333,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_337_textLineHeight,"frejo.core.VG","textLineHeight",0xf0e20ba6,"frejo.core.VG.textLineHeight","frejo/core/VG.hx",337,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_341_textAlign,"frejo.core.VG","textAlign",0xc9160dfa,"frejo.core.VG.textAlign","frejo/core/VG.hx",341,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_345_fontFaceId,"frejo.core.VG","fontFaceId",0x4e00c3a5,"frejo.core.VG.fontFaceId","frejo/core/VG.hx",345,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_349_fontFace,"frejo.core.VG","fontFace",0x47fd652a,"frejo.core.VG.fontFace","frejo/core/VG.hx",349,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_353_text,"frejo.core.VG","text",0x7037f8cb,"frejo.core.VG.text","frejo/core/VG.hx",353,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_357_textBox,"frejo.core.VG","textBox",0xbf73ce00,"frejo.core.VG.textBox","frejo/core/VG.hx",357,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_365_textBoxBounds,"frejo.core.VG","textBoxBounds",0x37f44895,"frejo.core.VG.textBoxBounds","frejo/core/VG.hx",365,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_373_textMetrics,"frejo.core.VG","textMetrics",0x485d50b8,"frejo.core.VG.textMetrics","frejo/core/VG.hx",373,0xc25e6b4e)
HX_LOCAL_STACK_FRAME(_hx_pos_9b09dd08190ad881_16_getInstance,"frejo.core.VG","getInstance",0xbfdd95ed,"frejo.core.VG.getInstance","frejo/core/VG.hx",16,0xc25e6b4e)
namespace frejo{
namespace core{

void VG_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_25_new)
HXDLIN(  25)		this->context = nanovg::nvgCreateGL(3);
            	}

Dynamic VG_obj::__CreateEmpty() { return new VG_obj; }

void *VG_obj::_hx_vtable = 0;

Dynamic VG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VG_obj > _hx_result = new VG_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VG_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10a229ae;
}

void VG_obj::beginFrame(int windowWidth,int windowHeight,Float devicePixelRatio){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_33_beginFrame)
HXDLIN(  33)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN(  33)		::nvgBeginFrame(tmp,windowWidth,windowHeight,devicePixelRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VG_obj,beginFrame,(void))

void VG_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_37_endFrame)
HXDLIN(  37)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN(  37)		::nvgEndFrame(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VG_obj,endFrame,(void))

 NVGcolor VG_obj::rgba(unsigned char r,unsigned char g,unsigned char b,unsigned char a){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_49_rgba)
HXDLIN(  49)		return ::nvgRGBA(r,g,b,a);
            	}


void VG_obj::strokeColor( NVGcolor color){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_89_strokeColor)
HXDLIN(  89)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN(  89)		::nvgStrokeColor(tmp,color);
            	}


void VG_obj::strokePaint( NVGpaint paint){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_93_strokePaint)
HXDLIN(  93)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN(  93)		::nvgStrokePaint(tmp,paint);
            	}


void VG_obj::fillColor( NVGcolor color){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_97_fillColor)
HXDLIN(  97)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN(  97)		::nvgFillColor(tmp,color);
            	}


void VG_obj::fillPaint( NVGpaint paint){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_101_fillPaint)
HXDLIN( 101)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 101)		::nvgFillPaint(tmp,paint);
            	}


void VG_obj::miterLimit(Float limit){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_105_miterLimit)
HXDLIN( 105)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 105)		::nvgMiterLimit(tmp,limit);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,miterLimit,(void))

void VG_obj::strokeWidth(Float size){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_109_strokeWidth)
HXDLIN( 109)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 109)		::nvgStrokeWidth(tmp,size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,strokeWidth,(void))

void VG_obj::lineCap(int cap){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_113_lineCap)
HXDLIN( 113)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 113)		::nvgLineCap(tmp,cap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,lineCap,(void))

void VG_obj::lineJoin(int join){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_117_lineJoin)
HXDLIN( 117)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 117)		::nvgLineJoin(tmp,join);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,lineJoin,(void))

void VG_obj::globalAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_121_globalAlpha)
HXDLIN( 121)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 121)		::nvgGlobalAlpha(tmp,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,globalAlpha,(void))

void VG_obj::beginPath(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_257_beginPath)
HXDLIN( 257)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 257)		::nvgBeginPath(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VG_obj,beginPath,(void))

void VG_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_261_moveTo)
HXDLIN( 261)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 261)		::nvgMoveTo(tmp,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VG_obj,moveTo,(void))

void VG_obj::lineTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_265_lineTo)
HXDLIN( 265)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 265)		::nvgLineTo(tmp,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VG_obj,lineTo,(void))

void VG_obj::bezierTo(Float c1x,Float c1y,Float c2x,Float c2y,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_269_bezierTo)
HXDLIN( 269)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 269)		::nvgBezierTo(tmp,c1x,c1y,c2x,c2y,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC6(VG_obj,bezierTo,(void))

void VG_obj::arcTo(Float x1,Float y1,Float x2,Float y2,Float radius){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_273_arcTo)
HXDLIN( 273)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 273)		::nvgArcTo(tmp,x1,y1,x2,y2,radius);
            	}


HX_DEFINE_DYNAMIC_FUNC5(VG_obj,arcTo,(void))

void VG_obj::closePath(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_277_closePath)
HXDLIN( 277)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 277)		::nvgClosePath(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VG_obj,closePath,(void))

void VG_obj::pathWinding(int dir){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_281_pathWinding)
HXDLIN( 281)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 281)		::nvgPathWinding(tmp,dir);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,pathWinding,(void))

void VG_obj::arc(Float cx,Float cy,Float r,Float a0,Float a1,int dir){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_285_arc)
HXDLIN( 285)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 285)		::nvgArc(tmp,cx,cy,r,a0,a1,dir);
            	}


HX_DEFINE_DYNAMIC_FUNC6(VG_obj,arc,(void))

void VG_obj::rect(Float x,Float y,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_289_rect)
HXDLIN( 289)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 289)		::nvgRect(tmp,x,y,w,h);
            	}


HX_DEFINE_DYNAMIC_FUNC4(VG_obj,rect,(void))

void VG_obj::roundedRect(Float x,Float y,Float w,Float h,Float r){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_293_roundedRect)
HXDLIN( 293)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 293)		::nvgRoundedRect(tmp,x,y,w,h,r);
            	}


HX_DEFINE_DYNAMIC_FUNC5(VG_obj,roundedRect,(void))

void VG_obj::ellipse(Float cx,Float cy,Float rx,Float ry){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_297_ellipse)
HXDLIN( 297)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 297)		::nvgEllipse(tmp,cx,cy,rx,ry);
            	}


HX_DEFINE_DYNAMIC_FUNC4(VG_obj,ellipse,(void))

void VG_obj::circle(Float cx,Float cy,Float r){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_301_circle)
HXDLIN( 301)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 301)		::nvgCircle(tmp,cx,cy,r);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VG_obj,circle,(void))

void VG_obj::fill(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_305_fill)
HXDLIN( 305)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 305)		::nvgFill(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VG_obj,fill,(void))

void VG_obj::stroke(){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_309_stroke)
HXDLIN( 309)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 309)		::nvgStroke(tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VG_obj,stroke,(void))

void VG_obj::fontSize(Float size){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_325_fontSize)
HXDLIN( 325)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 325)		::nvgFontSize(tmp,size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,fontSize,(void))

void VG_obj::fontBlur(Float blur){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_329_fontBlur)
HXDLIN( 329)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 329)		::nvgFontBlur(tmp,blur);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,fontBlur,(void))

void VG_obj::textLetterSpacing(Float spacing){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_333_textLetterSpacing)
HXDLIN( 333)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 333)		::nvgTextLetterSpacing(tmp,spacing);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,textLetterSpacing,(void))

void VG_obj::textLineHeight(Float lineHeight){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_337_textLineHeight)
HXDLIN( 337)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 337)		::nvgTextLineHeight(tmp,lineHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,textLineHeight,(void))

void VG_obj::textAlign(int align){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_341_textAlign)
HXDLIN( 341)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 341)		::nvgTextAlign(tmp,align);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,textAlign,(void))

void VG_obj::fontFaceId(int font){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_345_fontFaceId)
HXDLIN( 345)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 345)		::nvgFontFaceId(tmp,font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,fontFaceId,(void))

void VG_obj::fontFace(::String font){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_349_fontFace)
HXDLIN( 349)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 349)		::nvgFontFace(tmp,font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VG_obj,fontFace,(void))

Float VG_obj::text(Float x,Float y,::String string,::String end){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_353_text)
HXDLIN( 353)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 353)		return ::nvgText(tmp,x,y,string,end);
            	}


HX_DEFINE_DYNAMIC_FUNC4(VG_obj,text,return )

void VG_obj::textBox(Float x,Float y,Float breakRowWidth,::String string,::String end){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_357_textBox)
HXDLIN( 357)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 357)		::nvgTextBox(tmp,x,y,breakRowWidth,string,end);
            	}


HX_DEFINE_DYNAMIC_FUNC5(VG_obj,textBox,(void))

void VG_obj::textBoxBounds(Float x,Float y,Float breakRowWidth,::String string,::String end,::cpp::Pointer< float > bounds){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_365_textBoxBounds)
HXDLIN( 365)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 365)		::cpp::Pointer< float > tmp1 = bounds;
HXDLIN( 365)		::nvgTextBoxBounds(tmp,x,y,breakRowWidth,string,end,tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC6(VG_obj,textBoxBounds,(void))

void VG_obj::textMetrics(::cpp::Pointer< float > ascender,::cpp::Pointer< float > descender,::cpp::Pointer< float > lineh){
            	HX_STACKFRAME(&_hx_pos_9b09dd08190ad881_373_textMetrics)
HXDLIN( 373)		::cpp::Pointer<  NVGcontext > tmp = this->context;
HXDLIN( 373)		::cpp::Pointer< float > tmp1 = ascender;
HXDLIN( 373)		::cpp::Pointer< float > tmp2 = descender;
HXDLIN( 373)		::cpp::Pointer< float > tmp3 = lineh;
HXDLIN( 373)		::nvgTextMetrics(tmp,tmp1,tmp2,tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(VG_obj,textMetrics,(void))

 ::frejo::core::VG VG_obj::vg;

 ::frejo::core::VG VG_obj::getInstance(){
            	HX_GC_STACKFRAME(&_hx_pos_9b09dd08190ad881_16_getInstance)
HXLINE(  17)		if (hx::IsNull( ::frejo::core::VG_obj::vg )) {
HXLINE(  18)			::frejo::core::VG_obj::vg =  ::frejo::core::VG_obj::__alloc( HX_CTX );
HXLINE(  19)			return ::frejo::core::VG_obj::vg;
            		}
HXLINE(  21)		return ::frejo::core::VG_obj::vg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(VG_obj,getInstance,return )


hx::ObjectPtr< VG_obj > VG_obj::__new() {
	hx::ObjectPtr< VG_obj > __this = new VG_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VG_obj > VG_obj::__alloc(hx::Ctx *_hx_ctx) {
	VG_obj *__this = (VG_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VG_obj), true, "frejo.core.VG"));
	*(void **)__this = VG_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VG_obj::VG_obj()
{
}

void VG_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VG);
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_END_CLASS();
}

void VG_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(context,"context");
}

hx::Val VG_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"arc") ) { return hx::Val( arc_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn() ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"arcTo") ) { return hx::Val( arcTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"circle") ) { return hx::Val( circle_dyn() ); }
		if (HX_FIELD_EQ(inName,"stroke") ) { return hx::Val( stroke_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return hx::Val( context ); }
		if (HX_FIELD_EQ(inName,"lineCap") ) { return hx::Val( lineCap_dyn() ); }
		if (HX_FIELD_EQ(inName,"ellipse") ) { return hx::Val( ellipse_dyn() ); }
		if (HX_FIELD_EQ(inName,"textBox") ) { return hx::Val( textBox_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineJoin") ) { return hx::Val( lineJoin_dyn() ); }
		if (HX_FIELD_EQ(inName,"bezierTo") ) { return hx::Val( bezierTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return hx::Val( fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontBlur") ) { return hx::Val( fontBlur_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontFace") ) { return hx::Val( fontFace_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginPath") ) { return hx::Val( beginPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"closePath") ) { return hx::Val( closePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"textAlign") ) { return hx::Val( textAlign_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"beginFrame") ) { return hx::Val( beginFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"miterLimit") ) { return hx::Val( miterLimit_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontFaceId") ) { return hx::Val( fontFaceId_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strokeWidth") ) { return hx::Val( strokeWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalAlpha") ) { return hx::Val( globalAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"pathWinding") ) { return hx::Val( pathWinding_dyn() ); }
		if (HX_FIELD_EQ(inName,"roundedRect") ) { return hx::Val( roundedRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"textMetrics") ) { return hx::Val( textMetrics_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textBoxBounds") ) { return hx::Val( textBoxBounds_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textLineHeight") ) { return hx::Val( textLineHeight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"textLetterSpacing") ) { return hx::Val( textLetterSpacing_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"vg") ) { outValue = ( vg ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getInstance") ) { outValue = getInstance_dyn(); return true; }
	}
	return false;
}

hx::Val VG_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast< ::cpp::Pointer<  NVGcontext > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"vg") ) { vg=ioValue.Cast<  ::frejo::core::VG >(); return true; }
	}
	return false;
}

void VG_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("context",ef,95,77,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo VG_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Pointer< NVGcontext >*/ ,(int)offsetof(VG_obj,context),HX_("context",ef,95,77,19)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VG_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::frejo::core::VG*/ ,(void *) &VG_obj::vg,HX_("vg",31,67,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VG_obj_sMemberFields[] = {
	HX_("context",ef,95,77,19),
	HX_("beginFrame",44,89,4c,7c),
	HX_("endFrame",52,0a,81,04),
	HX_("miterLimit",f6,5c,6a,54),
	HX_("strokeWidth",2e,f7,1c,e3),
	HX_("lineCap",7e,84,90,1f),
	HX_("lineJoin",fe,81,8e,83),
	HX_("globalAlpha",fb,fe,d4,f9),
	HX_("beginPath",6e,c4,2b,93),
	HX_("moveTo",ec,d2,ac,cc),
	HX_("lineTo",8f,46,a0,ec),
	HX_("bezierTo",7a,cf,fd,cc),
	HX_("arcTo",6d,00,84,25),
	HX_("closePath",7d,65,20,14),
	HX_("pathWinding",f5,b9,29,c5),
	HX_("arc",52,fe,49,00),
	HX_("rect",24,4d,a7,4b),
	HX_("roundedRect",f1,13,58,2a),
	HX_("ellipse",de,40,86,0b),
	HX_("circle",10,72,0d,56),
	HX_("fill",83,ce,bb,43),
	HX_("stroke",b8,b3,34,11),
	HX_("fontSize",30,be,d1,ce),
	HX_("fontBlur",16,60,97,c3),
	HX_("textLetterSpacing",50,12,ec,35),
	HX_("textLineHeight",08,4e,a4,bf),
	HX_("textAlign",d8,e6,7e,ba),
	HX_("fontFaceId",07,ad,55,98),
	HX_("fontFace",0c,d2,33,c6),
	HX_("text",ad,cc,f9,4c),
	HX_("textBox",5e,13,ba,9e),
	HX_("textBoxBounds",73,e8,9d,5d),
	HX_("textMetrics",16,9d,54,08),
	::String(null()) };

static void VG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VG_obj::vg,"vg");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VG_obj::vg,"vg");
};

#endif

hx::Class VG_obj::__mClass;

static ::String VG_obj_sStaticFields[] = {
	HX_("vg",31,67,00,00),
	HX_("getInstance",4b,e2,d4,7f),
	::String(null())
};

void VG_obj::__register()
{
	VG_obj _hx_dummy;
	VG_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("frejo.core.VG",10,a9,41,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VG_obj::__GetStatic;
	__mClass->mSetStaticField = &VG_obj::__SetStatic;
	__mClass->mMarkFunc = VG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VG_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace frejo
} // end namespace core
