// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_minject_InjecteeSet
#include <minject/InjecteeSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_18d450fbef7d72d5_484_new,"minject.InjecteeSet","new",0x1012ce93,"minject.InjecteeSet.new","minject/Injector.hx",484,0x21627919)
HX_LOCAL_STACK_FRAME(_hx_pos_18d450fbef7d72d5_491_add,"minject.InjecteeSet","add",0x1008f054,"minject.InjecteeSet.add","minject/Injector.hx",491,0x21627919)
HX_LOCAL_STACK_FRAME(_hx_pos_18d450fbef7d72d5_500_contains,"minject.InjecteeSet","contains",0x55d7030c,"minject.InjecteeSet.contains","minject/Injector.hx",500,0x21627919)
HX_LOCAL_STACK_FRAME(_hx_pos_18d450fbef7d72d5_509_remove,"minject.InjecteeSet","remove",0xe5723ff1,"minject.InjecteeSet.remove","minject/Injector.hx",509,0x21627919)
HX_LOCAL_STACK_FRAME(_hx_pos_18d450fbef7d72d5_516_delete,"minject.InjecteeSet","delete",0x4bc263d8,"minject.InjecteeSet.delete","minject/Injector.hx",516,0x21627919)
HX_LOCAL_STACK_FRAME(_hx_pos_18d450fbef7d72d5_526_iterator,"minject.InjecteeSet","iterator",0xbcf5f2db,"minject.InjecteeSet.iterator","minject/Injector.hx",526,0x21627919)
namespace minject{

void InjecteeSet_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_18d450fbef7d72d5_484_new)
HXDLIN( 484)		this->map =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}

Dynamic InjecteeSet_obj::__CreateEmpty() { return new InjecteeSet_obj; }

void *InjecteeSet_obj::_hx_vtable = 0;

Dynamic InjecteeSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InjecteeSet_obj > _hx_result = new InjecteeSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InjecteeSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10e6e293;
}

void InjecteeSet_obj::add( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_18d450fbef7d72d5_491_add)
HXDLIN( 491)		this->map->set(value,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InjecteeSet_obj,add,(void))

bool InjecteeSet_obj::contains( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_18d450fbef7d72d5_500_contains)
HXDLIN( 500)		return this->map->exists(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InjecteeSet_obj,contains,return )

void InjecteeSet_obj::remove( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_18d450fbef7d72d5_509_remove)
HXDLIN( 509)		this->map->remove(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InjecteeSet_obj,remove,(void))

void InjecteeSet_obj::_hx_delete( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_18d450fbef7d72d5_516_delete)
HXDLIN( 516)		this->remove(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InjecteeSet_obj,_hx_delete,(void))

 ::Dynamic InjecteeSet_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_18d450fbef7d72d5_526_iterator)
HXDLIN( 526)		return this->map->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(InjecteeSet_obj,iterator,return )


hx::ObjectPtr< InjecteeSet_obj > InjecteeSet_obj::__new() {
	hx::ObjectPtr< InjecteeSet_obj > __this = new InjecteeSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< InjecteeSet_obj > InjecteeSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	InjecteeSet_obj *__this = (InjecteeSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InjecteeSet_obj), true, "minject.InjecteeSet"));
	*(void **)__this = InjecteeSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

InjecteeSet_obj::InjecteeSet_obj()
{
}

void InjecteeSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InjecteeSet);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_END_CLASS();
}

void InjecteeSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
}

hx::Val InjecteeSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InjecteeSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InjecteeSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("map",9c,0a,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InjecteeSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(InjecteeSet_obj,map),HX_("map",9c,0a,53,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InjecteeSet_obj_sStaticStorageInfo = 0;
#endif

static ::String InjecteeSet_obj_sMemberFields[] = {
	HX_("map",9c,0a,53,00),
	HX_("add",21,f2,49,00),
	HX_("contains",1f,5a,7b,2c),
	HX_("remove",44,9c,88,04),
	HX_("delete",2b,c0,d8,6a),
	HX_("iterator",ee,49,9a,93),
	::String(null()) };

hx::Class InjecteeSet_obj::__mClass;

void InjecteeSet_obj::__register()
{
	InjecteeSet_obj _hx_dummy;
	InjecteeSet_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.InjecteeSet",21,89,25,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InjecteeSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InjecteeSet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InjecteeSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InjecteeSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
