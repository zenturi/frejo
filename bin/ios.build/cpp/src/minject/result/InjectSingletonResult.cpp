// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_result_InjectSingletonResult
#include <minject/result/InjectSingletonResult.h>
#endif
#ifndef INCLUDED_minject_result_InjectionResult
#include <minject/result/InjectionResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4e12a449a0126710_33_new,"minject.result.InjectSingletonResult","new",0xaccb8fe8,"minject.result.InjectSingletonResult.new","minject/result/InjectSingletonResult.hx",33,0xec60b6a8)
HX_LOCAL_STACK_FRAME(_hx_pos_4e12a449a0126710_39_getResponse,"minject.result.InjectSingletonResult","getResponse",0x710ef8bf,"minject.result.InjectSingletonResult.getResponse","minject/result/InjectSingletonResult.hx",39,0xec60b6a8)
HX_LOCAL_STACK_FRAME(_hx_pos_4e12a449a0126710_51_createResponse,"minject.result.InjectSingletonResult","createResponse",0x7dac0b15,"minject.result.InjectSingletonResult.createResponse","minject/result/InjectSingletonResult.hx",51,0xec60b6a8)
HX_LOCAL_STACK_FRAME(_hx_pos_4e12a449a0126710_56_toString,"minject.result.InjectSingletonResult","toString",0x870bc424,"minject.result.InjectSingletonResult.toString","minject/result/InjectSingletonResult.hx",56,0xec60b6a8)
namespace minject{
namespace result{

void InjectSingletonResult_obj::__construct(hx::Class responseType){
            	HX_STACKFRAME(&_hx_pos_4e12a449a0126710_33_new)
HXLINE(  34)		super::__construct();
HXLINE(  35)		this->responseType = responseType;
            	}

Dynamic InjectSingletonResult_obj::__CreateEmpty() { return new InjectSingletonResult_obj; }

void *InjectSingletonResult_obj::_hx_vtable = 0;

Dynamic InjectSingletonResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InjectSingletonResult_obj > _hx_result = new InjectSingletonResult_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InjectSingletonResult_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x491380dc) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x491380dc;
	} else {
		return inClassId==(int)0x70932e79;
	}
}

 ::Dynamic InjectSingletonResult_obj::getResponse( ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_4e12a449a0126710_39_getResponse)
HXLINE(  40)		if (hx::IsNull( this->response )) {
HXLINE(  42)			this->response = this->createResponse(injector);
HXLINE(  43)			injector->injectInto(this->response);
            		}
HXLINE(  46)		return this->response;
            	}


 ::Dynamic InjectSingletonResult_obj::createResponse( ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_4e12a449a0126710_51_createResponse)
HXDLIN(  51)		return injector->construct(this->responseType);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InjectSingletonResult_obj,createResponse,return )

::String InjectSingletonResult_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4e12a449a0126710_56_toString)
HXDLIN(  56)		return (HX_("singleton ",b5,a4,4c,d8) + ::Type_obj::getClassName(this->responseType));
            	}



hx::ObjectPtr< InjectSingletonResult_obj > InjectSingletonResult_obj::__new(hx::Class responseType) {
	hx::ObjectPtr< InjectSingletonResult_obj > __this = new InjectSingletonResult_obj();
	__this->__construct(responseType);
	return __this;
}

hx::ObjectPtr< InjectSingletonResult_obj > InjectSingletonResult_obj::__alloc(hx::Ctx *_hx_ctx,hx::Class responseType) {
	InjectSingletonResult_obj *__this = (InjectSingletonResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InjectSingletonResult_obj), true, "minject.result.InjectSingletonResult"));
	*(void **)__this = InjectSingletonResult_obj::_hx_vtable;
	__this->__construct(responseType);
	return __this;
}

InjectSingletonResult_obj::InjectSingletonResult_obj()
{
}

void InjectSingletonResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InjectSingletonResult);
	HX_MARK_MEMBER_NAME(responseType,"responseType");
	HX_MARK_MEMBER_NAME(response,"response");
	HX_MARK_END_CLASS();
}

void InjectSingletonResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(responseType,"responseType");
	HX_VISIT_MEMBER_NAME(response,"response");
}

hx::Val InjectSingletonResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"response") ) { return hx::Val( response ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getResponse") ) { return hx::Val( getResponse_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseType") ) { return hx::Val( responseType ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createResponse") ) { return hx::Val( createResponse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InjectSingletonResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"response") ) { response=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseType") ) { responseType=inValue.Cast< hx::Class >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InjectSingletonResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("responseType",db,a1,8e,cf));
	outFields->push(HX_("response",81,ae,0c,a2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InjectSingletonResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(InjectSingletonResult_obj,responseType),HX_("responseType",db,a1,8e,cf)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(InjectSingletonResult_obj,response),HX_("response",81,ae,0c,a2)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InjectSingletonResult_obj_sStaticStorageInfo = 0;
#endif

static ::String InjectSingletonResult_obj_sMemberFields[] = {
	HX_("responseType",db,a1,8e,cf),
	HX_("response",81,ae,0c,a2),
	HX_("getResponse",37,71,00,c8),
	HX_("createResponse",9d,2d,47,f4),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class InjectSingletonResult_obj::__mClass;

void InjectSingletonResult_obj::__register()
{
	InjectSingletonResult_obj _hx_dummy;
	InjectSingletonResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.result.InjectSingletonResult",f6,bb,83,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InjectSingletonResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InjectSingletonResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InjectSingletonResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InjectSingletonResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
} // end namespace result
