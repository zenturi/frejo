// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_minject_InjecteeDescription
#include <minject/InjecteeDescription.h>
#endif
#ifndef INCLUDED_minject_point_InjectionPoint
#include <minject/point/InjectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e949ffd9ae7ba99_539_new,"minject.InjecteeDescription","new",0x80f287ed,"minject.InjecteeDescription.new","minject/Injector.hx",539,0x21627919)
namespace minject{

void InjecteeDescription_obj::__construct(::Dynamic ctor,::Array< ::Dynamic> injectionPoints){
            	HX_STACKFRAME(&_hx_pos_6e949ffd9ae7ba99_539_new)
HXLINE( 540)		this->ctor = ctor;
HXLINE( 541)		this->injectionPoints = injectionPoints;
            	}

Dynamic InjecteeDescription_obj::__CreateEmpty() { return new InjecteeDescription_obj; }

void *InjecteeDescription_obj::_hx_vtable = 0;

Dynamic InjecteeDescription_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InjecteeDescription_obj > _hx_result = new InjecteeDescription_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool InjecteeDescription_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d5c45b5;
}


hx::ObjectPtr< InjecteeDescription_obj > InjecteeDescription_obj::__new(::Dynamic ctor,::Array< ::Dynamic> injectionPoints) {
	hx::ObjectPtr< InjecteeDescription_obj > __this = new InjecteeDescription_obj();
	__this->__construct(ctor,injectionPoints);
	return __this;
}

hx::ObjectPtr< InjecteeDescription_obj > InjecteeDescription_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic ctor,::Array< ::Dynamic> injectionPoints) {
	InjecteeDescription_obj *__this = (InjecteeDescription_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InjecteeDescription_obj), true, "minject.InjecteeDescription"));
	*(void **)__this = InjecteeDescription_obj::_hx_vtable;
	__this->__construct(ctor,injectionPoints);
	return __this;
}

InjecteeDescription_obj::InjecteeDescription_obj()
{
}

void InjecteeDescription_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InjecteeDescription);
	HX_MARK_MEMBER_NAME(ctor,"ctor");
	HX_MARK_MEMBER_NAME(injectionPoints,"injectionPoints");
	HX_MARK_END_CLASS();
}

void InjecteeDescription_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ctor,"ctor");
	HX_VISIT_MEMBER_NAME(injectionPoints,"injectionPoints");
}

hx::Val InjecteeDescription_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ctor") ) { return hx::Val( ctor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"injectionPoints") ) { return hx::Val( injectionPoints ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InjecteeDescription_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ctor") ) { ctor=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"injectionPoints") ) { injectionPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InjecteeDescription_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ctor",14,86,c8,41));
	outFields->push(HX_("injectionPoints",5a,75,89,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InjecteeDescription_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::minject::point::InjectionPoint*/ ,(int)offsetof(InjecteeDescription_obj,ctor),HX_("ctor",14,86,c8,41)},
	{hx::fsObject /*Array< ::minject::point::InjectionPoint >*/ ,(int)offsetof(InjecteeDescription_obj,injectionPoints),HX_("injectionPoints",5a,75,89,e7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InjecteeDescription_obj_sStaticStorageInfo = 0;
#endif

static ::String InjecteeDescription_obj_sMemberFields[] = {
	HX_("ctor",14,86,c8,41),
	HX_("injectionPoints",5a,75,89,e7),
	::String(null()) };

hx::Class InjecteeDescription_obj::__mClass;

void InjecteeDescription_obj::__register()
{
	InjecteeDescription_obj _hx_dummy;
	InjecteeDescription_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.InjecteeDescription",7b,0d,e3,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InjecteeDescription_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InjecteeDescription_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InjecteeDescription_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InjecteeDescription_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
