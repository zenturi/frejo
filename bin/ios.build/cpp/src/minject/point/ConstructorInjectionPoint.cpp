// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_point_ConstructorInjectionPoint
#include <minject/point/ConstructorInjectionPoint.h>
#endif
#ifndef INCLUDED_minject_point_InjectionPoint
#include <minject/point/InjectionPoint.h>
#endif
#ifndef INCLUDED_minject_point_MethodInjectionPoint
#include <minject/point/MethodInjectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_702d2d3ebedb65fa_32_new,"minject.point.ConstructorInjectionPoint","new",0x58ff3f97,"minject.point.ConstructorInjectionPoint.new","minject/point/ConstructorInjectionPoint.hx",32,0xeae9b57b)
HX_LOCAL_STACK_FRAME(_hx_pos_702d2d3ebedb65fa_37_applyInjection,"minject.point.ConstructorInjectionPoint","applyInjection",0xf0a3aeb2,"minject.point.ConstructorInjectionPoint.applyInjection","minject/point/ConstructorInjectionPoint.hx",37,0xeae9b57b)
namespace minject{
namespace point{

void ConstructorInjectionPoint_obj::__construct(::Array< ::Dynamic> args){
            	HX_STACKFRAME(&_hx_pos_702d2d3ebedb65fa_32_new)
HXDLIN(  32)		super::__construct(HX_("new",60,d0,53,00),args);
            	}

Dynamic ConstructorInjectionPoint_obj::__CreateEmpty() { return new ConstructorInjectionPoint_obj; }

void *ConstructorInjectionPoint_obj::_hx_vtable = 0;

Dynamic ConstructorInjectionPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConstructorInjectionPoint_obj > _hx_result = new ConstructorInjectionPoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ConstructorInjectionPoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x58ca1b61) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x58ca1b61;
	} else {
		return inClassId==(int)0x6ee876ac;
	}
}

 ::Dynamic ConstructorInjectionPoint_obj::applyInjection( ::Dynamic target, ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_702d2d3ebedb65fa_37_applyInjection)
HXDLIN(  37)		return ::Type_obj::createInstance(target,this->gatherArgs(target,injector));
            	}



hx::ObjectPtr< ConstructorInjectionPoint_obj > ConstructorInjectionPoint_obj::__new(::Array< ::Dynamic> args) {
	hx::ObjectPtr< ConstructorInjectionPoint_obj > __this = new ConstructorInjectionPoint_obj();
	__this->__construct(args);
	return __this;
}

hx::ObjectPtr< ConstructorInjectionPoint_obj > ConstructorInjectionPoint_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> args) {
	ConstructorInjectionPoint_obj *__this = (ConstructorInjectionPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConstructorInjectionPoint_obj), true, "minject.point.ConstructorInjectionPoint"));
	*(void **)__this = ConstructorInjectionPoint_obj::_hx_vtable;
	__this->__construct(args);
	return __this;
}

ConstructorInjectionPoint_obj::ConstructorInjectionPoint_obj()
{
}

hx::Val ConstructorInjectionPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"applyInjection") ) { return hx::Val( applyInjection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ConstructorInjectionPoint_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ConstructorInjectionPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ConstructorInjectionPoint_obj_sMemberFields[] = {
	HX_("applyInjection",89,30,c6,ee),
	::String(null()) };

hx::Class ConstructorInjectionPoint_obj::__mClass;

void ConstructorInjectionPoint_obj::__register()
{
	ConstructorInjectionPoint_obj _hx_dummy;
	ConstructorInjectionPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.point.ConstructorInjectionPoint",25,28,3c,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConstructorInjectionPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConstructorInjectionPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConstructorInjectionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConstructorInjectionPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
} // end namespace point
