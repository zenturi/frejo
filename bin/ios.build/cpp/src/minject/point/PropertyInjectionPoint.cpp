// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_minject_InjectionConfig
#include <minject/InjectionConfig.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_point_InjectionPoint
#include <minject/point/InjectionPoint.h>
#endif
#ifndef INCLUDED_minject_point_PropertyInjectionPoint
#include <minject/point/PropertyInjectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_887d2873bb87744b_34_new,"minject.point.PropertyInjectionPoint","new",0xfc641b4e,"minject.point.PropertyInjectionPoint.new","minject/point/PropertyInjectionPoint.hx",34,0x8fa444e0)
HX_LOCAL_STACK_FRAME(_hx_pos_887d2873bb87744b_41_applyInjection,"minject.point.PropertyInjectionPoint","applyInjection",0xc25e105b,"minject.point.PropertyInjectionPoint.applyInjection","minject/point/PropertyInjectionPoint.hx",41,0x8fa444e0)
namespace minject{
namespace point{

void PropertyInjectionPoint_obj::__construct(::String name,::String type,::String injectionName){
            	HX_STACKFRAME(&_hx_pos_887d2873bb87744b_34_new)
HXLINE(  35)		this->name = name;
HXLINE(  36)		this->type = type;
HXLINE(  37)		this->injectionName = injectionName;
            	}

Dynamic PropertyInjectionPoint_obj::__CreateEmpty() { return new PropertyInjectionPoint_obj; }

void *PropertyInjectionPoint_obj::_hx_vtable = 0;

Dynamic PropertyInjectionPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PropertyInjectionPoint_obj > _hx_result = new PropertyInjectionPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PropertyInjectionPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x73510ba0;
}

static ::minject::point::InjectionPoint_obj _hx_minject_point_PropertyInjectionPoint__hx_minject_point_InjectionPoint= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic, ::minject::Injector))&::minject::point::PropertyInjectionPoint_obj::applyInjection,
};

void *PropertyInjectionPoint_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x7a83626b: return &_hx_minject_point_PropertyInjectionPoint__hx_minject_point_InjectionPoint;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic PropertyInjectionPoint_obj::applyInjection( ::Dynamic target, ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_887d2873bb87744b_41_applyInjection)
HXLINE(  42)		hx::Class injectionConfig = ::Type_obj::resolveClass(this->type);
HXDLIN(  42)		 ::minject::InjectionConfig injectionConfig1 = injector->getMapping(injectionConfig,this->injectionName);
HXLINE(  43)		 ::Dynamic injection = injectionConfig1->getResponse(injector);
HXLINE(  45)		if (hx::IsNull( injection )) {
HXLINE(  46)			::String _hx_tmp = ((HX_("Injector is missing a rule to handle injection into property \"",fa,d4,73,58) + this->name) + HX_("\" ",be,1d,00,00));
HXLINE(  47)			::String _hx_tmp1 = ((HX_("of object \"",aa,6c,75,5f) + ::Std_obj::string(target)) + HX_("\". Target dependency: \"",b6,86,63,71));
HXLINE(  46)			HX_STACK_DO_THROW((_hx_tmp + ((((_hx_tmp1 + this->type) + HX_("\", named \"",a5,07,43,9e)) + this->injectionName) + HX_("\"",22,00,00,00))));
            		}
HXLINE(  49)		::Reflect_obj::setProperty(target,this->name,injection);
HXLINE(  50)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PropertyInjectionPoint_obj,applyInjection,return )


hx::ObjectPtr< PropertyInjectionPoint_obj > PropertyInjectionPoint_obj::__new(::String name,::String type,::String injectionName) {
	hx::ObjectPtr< PropertyInjectionPoint_obj > __this = new PropertyInjectionPoint_obj();
	__this->__construct(name,type,injectionName);
	return __this;
}

hx::ObjectPtr< PropertyInjectionPoint_obj > PropertyInjectionPoint_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String type,::String injectionName) {
	PropertyInjectionPoint_obj *__this = (PropertyInjectionPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PropertyInjectionPoint_obj), true, "minject.point.PropertyInjectionPoint"));
	*(void **)__this = PropertyInjectionPoint_obj::_hx_vtable;
	__this->__construct(name,type,injectionName);
	return __this;
}

PropertyInjectionPoint_obj::PropertyInjectionPoint_obj()
{
}

void PropertyInjectionPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PropertyInjectionPoint);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(injectionName,"injectionName");
	HX_MARK_END_CLASS();
}

void PropertyInjectionPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(injectionName,"injectionName");
}

hx::Val PropertyInjectionPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"injectionName") ) { return hx::Val( injectionName ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"applyInjection") ) { return hx::Val( applyInjection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PropertyInjectionPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"injectionName") ) { injectionName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PropertyInjectionPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("injectionName",c2,c9,bc,8d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PropertyInjectionPoint_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(PropertyInjectionPoint_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(PropertyInjectionPoint_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(PropertyInjectionPoint_obj,injectionName),HX_("injectionName",c2,c9,bc,8d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PropertyInjectionPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String PropertyInjectionPoint_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("injectionName",c2,c9,bc,8d),
	HX_("applyInjection",89,30,c6,ee),
	::String(null()) };

hx::Class PropertyInjectionPoint_obj::__mClass;

void PropertyInjectionPoint_obj::__register()
{
	PropertyInjectionPoint_obj _hx_dummy;
	PropertyInjectionPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.point.PropertyInjectionPoint",5c,1c,0d,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PropertyInjectionPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PropertyInjectionPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PropertyInjectionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PropertyInjectionPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
} // end namespace point
