// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_minject_Injector
#include <minject/Injector.h>
#endif
#ifndef INCLUDED_minject_point_InjectionPoint
#include <minject/point/InjectionPoint.h>
#endif
#ifndef INCLUDED_minject_point_PostConstructInjectionPoint
#include <minject/point/PostConstructInjectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_214a98aa7b062206_33_new,"minject.point.PostConstructInjectionPoint","new",0x96832df4,"minject.point.PostConstructInjectionPoint.new","minject/point/PostConstructInjectionPoint.hx",33,0x2142f63e)
HX_LOCAL_STACK_FRAME(_hx_pos_214a98aa7b062206_39_applyInjection,"minject.point.PostConstructInjectionPoint","applyInjection",0xc6755375,"minject.point.PostConstructInjectionPoint.applyInjection","minject/point/PostConstructInjectionPoint.hx",39,0x2142f63e)
namespace minject{
namespace point{

void PostConstructInjectionPoint_obj::__construct(::String name, ::Dynamic __o_order){
 ::Dynamic order = __o_order.Default(0);
            	HX_STACKFRAME(&_hx_pos_214a98aa7b062206_33_new)
HXLINE(  34)		this->name = name;
HXLINE(  35)		this->order = ( (int)(order) );
            	}

Dynamic PostConstructInjectionPoint_obj::__CreateEmpty() { return new PostConstructInjectionPoint_obj; }

void *PostConstructInjectionPoint_obj::_hx_vtable = 0;

Dynamic PostConstructInjectionPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PostConstructInjectionPoint_obj > _hx_result = new PostConstructInjectionPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PostConstructInjectionPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a569e3e;
}

static ::minject::point::InjectionPoint_obj _hx_minject_point_PostConstructInjectionPoint__hx_minject_point_InjectionPoint= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic, ::minject::Injector))&::minject::point::PostConstructInjectionPoint_obj::applyInjection,
};

void *PostConstructInjectionPoint_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x7a83626b: return &_hx_minject_point_PostConstructInjectionPoint__hx_minject_point_InjectionPoint;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic PostConstructInjectionPoint_obj::applyInjection( ::Dynamic target, ::minject::Injector injector){
            	HX_STACKFRAME(&_hx_pos_214a98aa7b062206_39_applyInjection)
HXLINE(  40)		::Reflect_obj::callMethod(target,::Reflect_obj::field(target,this->name),::cpp::VirtualArray_obj::__new(0));
HXLINE(  41)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostConstructInjectionPoint_obj,applyInjection,return )


hx::ObjectPtr< PostConstructInjectionPoint_obj > PostConstructInjectionPoint_obj::__new(::String name, ::Dynamic __o_order) {
	hx::ObjectPtr< PostConstructInjectionPoint_obj > __this = new PostConstructInjectionPoint_obj();
	__this->__construct(name,__o_order);
	return __this;
}

hx::ObjectPtr< PostConstructInjectionPoint_obj > PostConstructInjectionPoint_obj::__alloc(hx::Ctx *_hx_ctx,::String name, ::Dynamic __o_order) {
	PostConstructInjectionPoint_obj *__this = (PostConstructInjectionPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PostConstructInjectionPoint_obj), true, "minject.point.PostConstructInjectionPoint"));
	*(void **)__this = PostConstructInjectionPoint_obj::_hx_vtable;
	__this->__construct(name,__o_order);
	return __this;
}

PostConstructInjectionPoint_obj::PostConstructInjectionPoint_obj()
{
}

void PostConstructInjectionPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PostConstructInjectionPoint);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(order,"order");
	HX_MARK_END_CLASS();
}

void PostConstructInjectionPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(order,"order");
}

hx::Val PostConstructInjectionPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"order") ) { return hx::Val( order ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"applyInjection") ) { return hx::Val( applyInjection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PostConstructInjectionPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"order") ) { order=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PostConstructInjectionPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("order",8e,f0,20,35));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PostConstructInjectionPoint_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(PostConstructInjectionPoint_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(PostConstructInjectionPoint_obj,order),HX_("order",8e,f0,20,35)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PostConstructInjectionPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String PostConstructInjectionPoint_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("order",8e,f0,20,35),
	HX_("applyInjection",89,30,c6,ee),
	::String(null()) };

hx::Class PostConstructInjectionPoint_obj::__mClass;

void PostConstructInjectionPoint_obj::__register()
{
	PostConstructInjectionPoint_obj _hx_dummy;
	PostConstructInjectionPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("minject.point.PostConstructInjectionPoint",02,64,f8,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PostConstructInjectionPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PostConstructInjectionPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PostConstructInjectionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PostConstructInjectionPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace minject
} // end namespace point
