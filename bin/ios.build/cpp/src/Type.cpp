// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_36_getClass,"Type","getClass",0xc4e49bd6,"Type.getClass","/usr/local/lib/haxe/std/cpp/_std/Type.hx",36,0xb5f2d6e2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_54_getSuperClass,"Type","getSuperClass",0xd9ffa85f,"Type.getSuperClass","/usr/local/lib/haxe/std/cpp/_std/Type.hx",54,0xb5f2d6e2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_57_getClassName,"Type","getClassName",0x8e66dd41,"Type.getClassName","/usr/local/lib/haxe/std/cpp/_std/Type.hx",57,0xb5f2d6e2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_67_resolveClass,"Type","resolveClass",0x23b06bc0,"Type.resolveClass","/usr/local/lib/haxe/std/cpp/_std/Type.hx",67,0xb5f2d6e2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_81_createInstance,"Type","createInstance",0xab84f9c5,"Type.createInstance","/usr/local/lib/haxe/std/cpp/_std/Type.hx",81,0xb5f2d6e2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ebc4c1d0351a436_88_createEmptyInstance,"Type","createEmptyInstance",0xcb752312,"Type.createEmptyInstance","/usr/local/lib/haxe/std/cpp/_std/Type.hx",88,0xb5f2d6e2)

void Type_obj::__construct() { }

Dynamic Type_obj::__CreateEmpty() { return new Type_obj; }

void *Type_obj::_hx_vtable = 0;

Dynamic Type_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Type_obj > _hx_result = new Type_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Type_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37e21eda;
}

hx::Class Type_obj::getClass( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_36_getClass)
HXLINE(  37)		bool _hx_tmp;
HXDLIN(  37)		if (hx::IsNotNull( o )) {
HXLINE(  37)			_hx_tmp = !(::Reflect_obj::isObject(o));
            		}
            		else {
HXLINE(  37)			_hx_tmp = true;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  37)			return null();
            		}
HXLINE(  38)		 ::Dynamic c = o->__GetClass();
HXLINE(  39)		{
HXLINE(  39)			::String _g = ( (::String)(c->toString()) );
HXDLIN(  39)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Class",18,e8,85,db)) ){
HXLINE(  42)				return null();
HXDLIN(  42)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("__Anon",8c,1a,43,da)) ){
HXLINE(  41)				return null();
HXDLIN(  41)				goto _hx_goto_0;
            			}
            			_hx_goto_0:;
            		}
HXLINE(  44)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getClass,return )

hx::Class Type_obj::getSuperClass(hx::Class c){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_54_getSuperClass)
HXDLIN(  54)		return c->GetSuper();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getSuperClass,return )

::String Type_obj::getClassName(hx::Class c){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_57_getClassName)
HXLINE(  58)		if (hx::IsNull( c )) {
HXLINE(  59)			return null();
            		}
HXLINE(  60)		return c->mName;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,getClassName,return )

hx::Class Type_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_67_resolveClass)
HXLINE(  68)		hx::Class result =  ::hx::Class_obj::Resolve(name);
HXLINE(  69)		bool _hx_tmp;
HXDLIN(  69)		if (hx::IsNotNull( result )) {
HXLINE(  69)			_hx_tmp = ( (bool)(result->__IsEnum()) );
            		}
            		else {
HXLINE(  69)			_hx_tmp = false;
            		}
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  70)			return null();
            		}
HXLINE(  71)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,resolveClass,return )

 ::Dynamic Type_obj::createInstance(hx::Class cl,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_81_createInstance)
HXLINE(  82)		if (hx::IsNotNull( cl )) {
HXLINE(  83)			return cl->ConstructArgs(args);
            		}
HXLINE(  84)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Type_obj,createInstance,return )

 ::Dynamic Type_obj::createEmptyInstance(hx::Class cl){
            	HX_STACKFRAME(&_hx_pos_6ebc4c1d0351a436_88_createEmptyInstance)
HXDLIN(  88)		return cl->ConstructEmpty();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,createEmptyInstance,return )


Type_obj::Type_obj()
{
}

bool Type_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getClass") ) { outValue = getClass_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getClassName") ) { outValue = getClassName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getSuperClass") ) { outValue = getSuperClass_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createInstance") ) { outValue = createInstance_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createEmptyInstance") ) { outValue = createEmptyInstance_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Type_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Type_obj_sStaticStorageInfo = 0;
#endif

hx::Class Type_obj::__mClass;

static ::String Type_obj_sStaticFields[] = {
	HX_("getClass",c2,87,2f,a8),
	HX_("getSuperClass",f3,04,7a,04),
	HX_("getClassName",2d,2f,94,eb),
	HX_("resolveClass",ac,bd,dd,80),
	HX_("createInstance",b1,9e,1b,ac),
	HX_("createEmptyInstance",a6,26,85,ce),
	::String(null())
};

void Type_obj::__register()
{
	Type_obj _hx_dummy;
	Type_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Type",da,1e,e2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Type_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Type_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Type_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Type_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Type_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

