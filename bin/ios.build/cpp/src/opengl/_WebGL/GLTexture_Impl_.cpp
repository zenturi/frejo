// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_opengl_GLObject
#include <opengl/GLObject.h>
#endif
#ifndef INCLUDED_opengl__WebGL_GLTexture_Impl_
#include <opengl/_WebGL/GLTexture_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1045__new,"opengl._WebGL.GLTexture_Impl_","_new",0x0e98000e,"opengl._WebGL.GLTexture_Impl_._new","opengl/WebGL.hx",1045,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1046_toInt,"opengl._WebGL.GLTexture_Impl_","toInt",0xce662ae7,"opengl._WebGL.GLTexture_Impl_.toInt","opengl/WebGL.hx",1046,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1047_fromInt,"opengl._WebGL.GLTexture_Impl_","fromInt",0xa1ca1d18,"opengl._WebGL.GLTexture_Impl_.fromInt","opengl/WebGL.hx",1047,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1048_toDynamic,"opengl._WebGL.GLTexture_Impl_","toDynamic",0x315e1977,"opengl._WebGL.GLTexture_Impl_.toDynamic","opengl/WebGL.hx",1048,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1049_fromDynamic,"opengl._WebGL.GLTexture_Impl_","fromDynamic",0x21457828,"opengl._WebGL.GLTexture_Impl_.fromDynamic","opengl/WebGL.hx",1049,0x584405a5)
HX_LOCAL_STACK_FRAME(_hx_pos_3e65b33544586439_1050_toString,"opengl._WebGL.GLTexture_Impl_","toString",0x83f715d9,"opengl._WebGL.GLTexture_Impl_.toString","opengl/WebGL.hx",1050,0x584405a5)
namespace opengl{
namespace _WebGL{

void GLTexture_Impl__obj::__construct() { }

Dynamic GLTexture_Impl__obj::__CreateEmpty() { return new GLTexture_Impl__obj; }

void *GLTexture_Impl__obj::_hx_vtable = 0;

Dynamic GLTexture_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLTexture_Impl__obj > _hx_result = new GLTexture_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLTexture_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f11dea9;
}

 ::opengl::GLObject GLTexture_Impl__obj::_new(int _id){
            	HX_GC_STACKFRAME(&_hx_pos_3e65b33544586439_1045__new)
HXDLIN(1045)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN(1045)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,_new,return )

int GLTexture_Impl__obj::toInt( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_3e65b33544586439_1046_toInt)
HXDLIN(1046)		if (hx::IsNull( this1 )) {
HXDLIN(1046)			return 0;
            		}
            		else {
HXDLIN(1046)			return this1->id;
            		}
HXDLIN(1046)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,toInt,return )

 ::opengl::GLObject GLTexture_Impl__obj::fromInt(int _id){
            	HX_GC_STACKFRAME(&_hx_pos_3e65b33544586439_1047_fromInt)
HXDLIN(1047)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,_id);
HXDLIN(1047)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,fromInt,return )

 ::Dynamic GLTexture_Impl__obj::toDynamic( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_3e65b33544586439_1048_toDynamic)
HXDLIN(1048)		if (hx::IsNull( this1 )) {
HXDLIN(1048)			return 0;
            		}
            		else {
HXDLIN(1048)			return this1->id;
            		}
HXDLIN(1048)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,toDynamic,return )

 ::opengl::GLObject GLTexture_Impl__obj::fromDynamic( ::Dynamic _id){
            	HX_GC_STACKFRAME(&_hx_pos_3e65b33544586439_1049_fromDynamic)
HXDLIN(1049)		 ::opengl::GLObject this1 =  ::opengl::GLObject_obj::__alloc( HX_CTX ,( (int)(_id) ));
HXDLIN(1049)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,fromDynamic,return )

::String GLTexture_Impl__obj::toString( ::opengl::GLObject this1){
            	HX_STACKFRAME(&_hx_pos_3e65b33544586439_1050_toString)
HXDLIN(1050)		int _hx_tmp;
HXDLIN(1050)		if (hx::IsNull( this1 )) {
HXDLIN(1050)			_hx_tmp = 0;
            		}
            		else {
HXDLIN(1050)			_hx_tmp = this1->id;
            		}
HXDLIN(1050)		return ((HX_("GLTexture(",32,1e,d3,33) + _hx_tmp) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLTexture_Impl__obj,toString,return )


GLTexture_Impl__obj::GLTexture_Impl__obj()
{
}

bool GLTexture_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toDynamic") ) { outValue = toDynamic_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromDynamic") ) { outValue = fromDynamic_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *GLTexture_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLTexture_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class GLTexture_Impl__obj::__mClass;

static ::String GLTexture_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("toInt",34,be,11,14),
	HX_("fromInt",a5,dd,fa,57),
	HX_("toDynamic",44,d7,a9,65),
	HX_("fromDynamic",35,03,56,ce),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void GLTexture_Impl__obj::__register()
{
	GLTexture_Impl__obj _hx_dummy;
	GLTexture_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("opengl._WebGL.GLTexture_Impl_",e1,74,fd,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLTexture_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLTexture_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLTexture_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLTexture_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLTexture_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace opengl
} // end namespace _WebGL
