// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_openal_ALCError
#include <openal/ALCError.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_416_desc,"openal.ALCError","desc",0xfc60b8d6,"openal.ALCError.desc","openal/AL.hx",416,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_406_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",406,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_407_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",407,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_408_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",408,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_409_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",409,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_410_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",410,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_411_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",411,0x05c85919)
HX_LOCAL_STACK_FRAME(_hx_pos_197d03df0598c8f1_412_boot,"openal.ALCError","boot",0xfb15deb7,"openal.ALCError.boot","openal/AL.hx",412,0x05c85919)
namespace openal{

void ALCError_obj::__construct() { }

Dynamic ALCError_obj::__CreateEmpty() { return new ALCError_obj; }

void *ALCError_obj::_hx_vtable = 0;

Dynamic ALCError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALCError_obj > _hx_result = new ALCError_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ALCError_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a270311;
}

::String ALCError_obj::NO_ERROR;

::String ALCError_obj::INVALID_DEVICE;

::String ALCError_obj::INVALID_CONTEXT;

::String ALCError_obj::INVALID_ENUM;

::String ALCError_obj::INVALID_VALUE;

::String ALCError_obj::OUT_OF_MEMORY;

::String ALCError_obj::UNKNOWN_ERROR;

::String ALCError_obj::desc(int error){
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_416_desc)
HXDLIN( 416)		switch((int)(error)){
            			case (int)0: {
HXLINE( 422)				return ::openal::ALCError_obj::NO_ERROR;
            			}
            			break;
            			case (int)40961: {
HXLINE( 417)				return ::openal::ALCError_obj::INVALID_DEVICE;
            			}
            			break;
            			case (int)40962: {
HXLINE( 418)				return ::openal::ALCError_obj::INVALID_CONTEXT;
            			}
            			break;
            			case (int)40963: {
HXLINE( 419)				return ::openal::ALCError_obj::INVALID_ENUM;
            			}
            			break;
            			case (int)40964: {
HXLINE( 420)				return ::openal::ALCError_obj::INVALID_VALUE;
            			}
            			break;
            			case (int)40965: {
HXLINE( 421)				return ::openal::ALCError_obj::OUT_OF_MEMORY;
            			}
            			break;
            			default:{
HXLINE( 423)				return ((((HX_("",00,00,00,00) + ::openal::ALCError_obj::UNKNOWN_ERROR) + HX_(" (",08,1c,00,00)) + error) + HX_(")",29,00,00,00));
            			}
            		}
HXLINE( 416)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALCError_obj,desc,return )


ALCError_obj::ALCError_obj()
{
}

bool ALCError_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"desc") ) { outValue = desc_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { outValue = ( NO_ERROR ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { outValue = ( INVALID_ENUM ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { outValue = ( INVALID_VALUE ); return true; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { outValue = ( OUT_OF_MEMORY ); return true; }
		if (HX_FIELD_EQ(inName,"UNKNOWN_ERROR") ) { outValue = ( UNKNOWN_ERROR ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"INVALID_DEVICE") ) { outValue = ( INVALID_DEVICE ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"INVALID_CONTEXT") ) { outValue = ( INVALID_CONTEXT ); return true; }
	}
	return false;
}

bool ALCError_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { NO_ERROR=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { INVALID_ENUM=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { INVALID_VALUE=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { OUT_OF_MEMORY=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"UNKNOWN_ERROR") ) { UNKNOWN_ERROR=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"INVALID_DEVICE") ) { INVALID_DEVICE=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"INVALID_CONTEXT") ) { INVALID_CONTEXT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ALCError_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALCError_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &ALCError_obj::NO_ERROR,HX_("NO_ERROR",ea,b5,7d,2f)},
	{hx::fsString,(void *) &ALCError_obj::INVALID_DEVICE,HX_("INVALID_DEVICE",3e,84,a5,93)},
	{hx::fsString,(void *) &ALCError_obj::INVALID_CONTEXT,HX_("INVALID_CONTEXT",27,a1,3c,df)},
	{hx::fsString,(void *) &ALCError_obj::INVALID_ENUM,HX_("INVALID_ENUM",a9,74,70,13)},
	{hx::fsString,(void *) &ALCError_obj::INVALID_VALUE,HX_("INVALID_VALUE",a9,e8,26,b0)},
	{hx::fsString,(void *) &ALCError_obj::OUT_OF_MEMORY,HX_("OUT_OF_MEMORY",18,f2,97,e1)},
	{hx::fsString,(void *) &ALCError_obj::UNKNOWN_ERROR,HX_("UNKNOWN_ERROR",d3,ad,44,aa)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALCError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALCError_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(ALCError_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_MARK_MEMBER_NAME(ALCError_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_MARK_MEMBER_NAME(ALCError_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALCError_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALCError_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(ALCError_obj::UNKNOWN_ERROR,"UNKNOWN_ERROR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALCError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALCError_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(ALCError_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_VISIT_MEMBER_NAME(ALCError_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_VISIT_MEMBER_NAME(ALCError_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALCError_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALCError_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(ALCError_obj::UNKNOWN_ERROR,"UNKNOWN_ERROR");
};

#endif

hx::Class ALCError_obj::__mClass;

static ::String ALCError_obj_sStaticFields[] = {
	HX_("NO_ERROR",ea,b5,7d,2f),
	HX_("INVALID_DEVICE",3e,84,a5,93),
	HX_("INVALID_CONTEXT",27,a1,3c,df),
	HX_("INVALID_ENUM",a9,74,70,13),
	HX_("INVALID_VALUE",a9,e8,26,b0),
	HX_("OUT_OF_MEMORY",18,f2,97,e1),
	HX_("UNKNOWN_ERROR",d3,ad,44,aa),
	HX_("desc",51,5e,66,42),
	::String(null())
};

void ALCError_obj::__register()
{
	ALCError_obj _hx_dummy;
	ALCError_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openal.ALCError",09,14,a2,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALCError_obj::__GetStatic;
	__mClass->mSetStaticField = &ALCError_obj::__SetStatic;
	__mClass->mMarkFunc = ALCError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALCError_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALCError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALCError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALCError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALCError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALCError_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_406_boot)
HXDLIN( 406)		NO_ERROR = HX_("ALC.NO_ERROR: No Error",6f,5b,50,5c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_407_boot)
HXDLIN( 407)		INVALID_DEVICE = HX_("ALC.INVALID_DEVICE: Invalid device (or no device?)",43,25,bc,4c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_408_boot)
HXDLIN( 408)		INVALID_CONTEXT = HX_("ALC.INVALID_CONTEXT: Invalid context (or no context?)",60,c0,e8,a0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_409_boot)
HXDLIN( 409)		INVALID_ENUM = HX_("ALC.INVALID_ENUM: Invalid enum value",40,33,d5,8b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_410_boot)
HXDLIN( 410)		INVALID_VALUE = HX_("ALC.INVALID_VALUE: Invalid param value",5c,64,5d,f4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_411_boot)
HXDLIN( 411)		OUT_OF_MEMORY = HX_("ALC.OUT_OF_MEMORY: OpenAL has run out of memory",3a,21,ed,0c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_197d03df0598c8f1_412_boot)
HXDLIN( 412)		UNKNOWN_ERROR = HX_("ALC.NO_ERROR: Unknown Error",ec,9f,63,c9);
            	}
}

} // end namespace openal
