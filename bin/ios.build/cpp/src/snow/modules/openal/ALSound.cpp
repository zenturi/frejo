// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_fb3dacc61d0dee8d
#define INCLUDED_fb3dacc61d0dee8d
#include "linc_openal.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_frejo_app_Application
#include <frejo/app/Application.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openal_ALError
#include <openal/ALError.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Audio
#include <snow/modules/interfaces/Audio.h>
#endif
#ifndef INCLUDED_snow_modules_openal_ALSound
#include <snow/modules/openal/ALSound.h>
#endif
#ifndef INCLUDED_snow_modules_openal_Audio
#include <snow/modules/openal/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioInstance
#include <snow/systems/audio/AudioInstance.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_13_new,"snow.modules.openal.ALSound","new",0xc9fa6bef,"snow.modules.openal.ALSound.new","snow/modules/openal/ALSound.hx",13,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_38_init,"snow.modules.openal.ALSound","init",0xeddcbca1,"snow.modules.openal.ALSound.init","snow/modules/openal/ALSound.hx",38,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_77_position,"snow.modules.openal.ALSound","position",0xc58abeba,"snow.modules.openal.ALSound.position","snow/modules/openal/ALSound.hx",77,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_83_position_of,"snow.modules.openal.ALSound","position_of",0xde7a28bc,"snow.modules.openal.ALSound.position_of","snow/modules/openal/ALSound.hx",83,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_87_destroy,"snow.modules.openal.ALSound","destroy",0x2b633c09,"snow.modules.openal.ALSound.destroy","snow/modules/openal/ALSound.hx",87,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_111_tick,"snow.modules.openal.ALSound","tick",0xf51e44ee,"snow.modules.openal.ALSound.tick","snow/modules/openal/ALSound.hx",111,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_120_new_source,"snow.modules.openal.ALSound","new_source",0xe5ba426b,"snow.modules.openal.ALSound.new_source","snow/modules/openal/ALSound.hx",120,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_131_err,"snow.modules.openal.ALSound","err",0xc9f3a2f4,"snow.modules.openal.ALSound.err","snow/modules/openal/ALSound.hx",131,0x9aca6660)
HX_LOCAL_STACK_FRAME(_hx_pos_bd5817ab043a2d9b_134_source_format,"snow.modules.openal.ALSound","source_format",0x2ae5d5aa,"snow.modules.openal.ALSound.source_format","snow/modules/openal/ALSound.hx",134,0x9aca6660)
namespace snow{
namespace modules{
namespace openal{

void ALSound_obj::__construct( ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_13_new)
HXLINE(  25)		this->current_time = ((Float)0.0);
HXLINE(  24)		this->looping = false;
HXLINE(  23)		this->pan = ((Float)0.0);
HXLINE(  29)		this->module = _module;
HXLINE(  30)		this->source = _source;
HXLINE(  31)		this->instance = _instance;
HXLINE(  33)		int _source1 = linc::openal::genSource();
HXDLIN(  33)		alSourcef(_source1,4106,((Float)1.0));
HXDLIN(  33)		alSourcei(_source1,4103,0);
HXDLIN(  33)		alSourcef(_source1,4099,((Float)1.0));
HXDLIN(  33)		alSource3f(_source1,4100,((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  33)		alSource3f(_source1,4102,((Float)0.0),((Float)0.0),((Float)0.0));
HXDLIN(  33)		this->alsource = _source1;
HXLINE(  34)		this->alformat = this->source_format();
            	}

Dynamic ALSound_obj::__CreateEmpty() { return new ALSound_obj; }

void *ALSound_obj::_hx_vtable = 0;

Dynamic ALSound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALSound_obj > _hx_result = new ALSound_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ALSound_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a184597;
}

void ALSound_obj::init(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_38_init)
HXLINE(  40)		int _buffer = this->module->buffers->get_int(this->source->source_id);
HXLINE(  42)		if ((_buffer == 0)) {
HXLINE(  44)			 ::snow::types::AudioData _data = this->source->data;
HXLINE(  46)			_buffer = linc::openal::genBuffer();
HXLINE(  50)			if (hx::IsNotNull( _data->samples )) {
HXLINE(  51)				linc::openal::bufferData(_buffer,this->alformat,_data->rate,_data->samples->buffer,_data->samples->byteOffset,_data->samples->byteLength);
            			}
            			else {
HXLINE(  53)				_buffer = 0;
HXLINE(  54)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  54)				_hx_tmp((HX_("  i / AL sound / ",2f,96,e3,01) + ((HX_(" > new buffer ",5e,9c,40,95) + _data->id) + HX_(" / created with AL.NONE buffer!",eb,26,08,8f))),hx::SourceInfo(HX_("snow/modules/openal/ALSound.hx",60,66,ca,9a),54,HX_("snow.modules.openal.ALSound",7d,48,64,d6),HX_("init",10,3b,bb,45)));
            			}
HXLINE(  57)			{
HXLINE(  57)				 ::snow::modules::openal::Audio _this = this->module;
HXDLIN(  57)				int _err = alGetError();
HXDLIN(  57)				if ((_err != 0)) {
HXLINE(  57)					::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("new buffer",c0,90,f4,72)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN(  57)					::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN(  57)					HX_STACK_DO_THROW(_s);
            				}
            			}
HXLINE(  61)			this->module->buffers->set(this->source->source_id,_buffer);
            		}
HXLINE(  69)		alSourcei(this->alsource,4105,_buffer);
HXLINE(  71)		{
HXLINE(  71)			 ::snow::modules::openal::Audio _this1 = this->module;
HXDLIN(  71)			int _err1 = alGetError();
HXDLIN(  71)			if ((_err1 != 0)) {
HXLINE(  71)				::String _s1 = (((((HX_("",00,00,00,00) + _err1) + HX_(" / ",31,71,18,00)) + HX_("attach buffer",fb,cb,ca,4c)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err1));
HXDLIN(  71)				::haxe::Log_obj::trace(_s1,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN(  71)				HX_STACK_DO_THROW(_s1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,init,(void))

void ALSound_obj::position(Float _time){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_77_position)
HXDLIN(  77)		alSourcef(this->alsource,4132,_time);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ALSound_obj,position,(void))

Float ALSound_obj::position_of(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_83_position_of)
HXDLIN(  83)		return linc::openal::getSourcef(this->alsource,4132);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,position_of,return )

void ALSound_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_87_destroy)
HXLINE(  90)		alGetError();
HXLINE(  92)		if ((linc::openal::getSourcei(this->alsource,4112) == 4114)) {
HXLINE(  93)			alSourceStop(this->alsource);
HXLINE(  94)			{
HXLINE(  94)				 ::snow::modules::openal::Audio _this = this->module;
HXDLIN(  94)				int _err = alGetError();
HXDLIN(  94)				if ((_err != 0)) {
HXLINE(  94)					::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("stop alsource",e4,27,c5,e8)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN(  94)					::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN(  94)					HX_STACK_DO_THROW(_s);
            				}
            			}
            		}
HXLINE(  98)		if ((linc::openal::getSourcei(this->alsource,4105) != 0)) {
HXLINE(  99)			alSourcei(this->alsource,4105,0);
HXLINE( 100)			{
HXLINE( 100)				 ::snow::modules::openal::Audio _this1 = this->module;
HXDLIN( 100)				int _err1 = alGetError();
HXDLIN( 100)				if ((_err1 != 0)) {
HXLINE( 100)					::String _s1 = (((((HX_("",00,00,00,00) + _err1) + HX_(" / ",31,71,18,00)) + HX_("detach buffer",2d,d8,d4,43)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err1));
HXDLIN( 100)					::haxe::Log_obj::trace(_s1,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 100)					HX_STACK_DO_THROW(_s1);
            				}
            			}
            		}
HXLINE( 103)		linc::openal::deleteSource(this->alsource);
HXLINE( 105)		{
HXLINE( 105)			 ::snow::modules::openal::Audio _this2 = this->module;
HXDLIN( 105)			int _err2 = alGetError();
HXDLIN( 105)			if ((_err2 != 0)) {
HXLINE( 105)				::String _s2 = (((((HX_("",00,00,00,00) + _err2) + HX_(" / ",31,71,18,00)) + HX_("delete alsource",9b,8a,1b,68)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err2));
HXDLIN( 105)				::haxe::Log_obj::trace(_s2,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 105)				HX_STACK_DO_THROW(_s2);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,destroy,(void))

void ALSound_obj::tick(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_111_tick)
HXLINE( 113)		this->instance->tick();
HXLINE( 114)		 ::snow::modules::openal::ALSound _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 114)		_hx_tmp->current_time = (_hx_tmp->current_time + this->module->app->host->tick_delta);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,tick,(void))

int ALSound_obj::new_source(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_120_new_source)
HXLINE( 121)		int _source = linc::openal::genSource();
HXLINE( 122)		alSourcef(_source,4106,((Float)1.0));
HXLINE( 123)		alSourcei(_source,4103,0);
HXLINE( 124)		alSourcef(_source,4099,((Float)1.0));
HXLINE( 125)		alSource3f(_source,4100,((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 126)		alSource3f(_source,4102,((Float)0.0),((Float)0.0),((Float)0.0));
HXLINE( 127)		return _source;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,new_source,return )

void ALSound_obj::err(::String reason){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_131_err)
HXDLIN( 131)		{
HXDLIN( 131)			 ::snow::modules::openal::Audio _this = this->module;
HXDLIN( 131)			int _err = alGetError();
HXDLIN( 131)			if ((_err != 0)) {
HXDLIN( 131)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + reason) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 131)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 131)				HX_STACK_DO_THROW(_s);
            			}
            		}
HXDLIN( 131)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ALSound_obj,err,(void))

int ALSound_obj::source_format(){
            	HX_STACKFRAME(&_hx_pos_bd5817ab043a2d9b_134_source_format)
HXLINE( 136)		int _format = 4353;
HXLINE( 138)		if ((this->source->data->channels > 1)) {
HXLINE( 139)			if ((this->source->data->bits_per_sample == 8)) {
HXLINE( 140)				_format = 4354;
            			}
            			else {
HXLINE( 143)				_format = 4355;
            			}
            		}
            		else {
HXLINE( 147)			if ((this->source->data->bits_per_sample == 8)) {
HXLINE( 148)				_format = 4352;
            			}
            			else {
HXLINE( 151)				_format = 4353;
            			}
            		}
HXLINE( 156)		return _format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ALSound_obj,source_format,return )


hx::ObjectPtr< ALSound_obj > ALSound_obj::__new( ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance) {
	hx::ObjectPtr< ALSound_obj > __this = new ALSound_obj();
	__this->__construct(_module,_source,_instance);
	return __this;
}

hx::ObjectPtr< ALSound_obj > ALSound_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::modules::openal::Audio _module, ::snow::systems::audio::AudioSource _source, ::snow::systems::audio::AudioInstance _instance) {
	ALSound_obj *__this = (ALSound_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ALSound_obj), true, "snow.modules.openal.ALSound"));
	*(void **)__this = ALSound_obj::_hx_vtable;
	__this->__construct(_module,_source,_instance);
	return __this;
}

ALSound_obj::ALSound_obj()
{
}

void ALSound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ALSound);
	HX_MARK_MEMBER_NAME(instance,"instance");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_MEMBER_NAME(module,"module");
	HX_MARK_MEMBER_NAME(alsource,"alsource");
	HX_MARK_MEMBER_NAME(alformat,"alformat");
	HX_MARK_MEMBER_NAME(pan,"pan");
	HX_MARK_MEMBER_NAME(looping,"looping");
	HX_MARK_MEMBER_NAME(current_time,"current_time");
	HX_MARK_END_CLASS();
}

void ALSound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(instance,"instance");
	HX_VISIT_MEMBER_NAME(source,"source");
	HX_VISIT_MEMBER_NAME(module,"module");
	HX_VISIT_MEMBER_NAME(alsource,"alsource");
	HX_VISIT_MEMBER_NAME(alformat,"alformat");
	HX_VISIT_MEMBER_NAME(pan,"pan");
	HX_VISIT_MEMBER_NAME(looping,"looping");
	HX_VISIT_MEMBER_NAME(current_time,"current_time");
}

hx::Val ALSound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { return hx::Val( pan ); }
		if (HX_FIELD_EQ(inName,"err") ) { return hx::Val( err_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source ); }
		if (HX_FIELD_EQ(inName,"module") ) { return hx::Val( module ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { return hx::Val( looping ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return hx::Val( instance ); }
		if (HX_FIELD_EQ(inName,"alsource") ) { return hx::Val( alsource ); }
		if (HX_FIELD_EQ(inName,"alformat") ) { return hx::Val( alformat ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"new_source") ) { return hx::Val( new_source_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"position_of") ) { return hx::Val( position_of_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"current_time") ) { return hx::Val( current_time ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"source_format") ) { return hx::Val( source_format_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ALSound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { pan=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::snow::systems::audio::AudioSource >(); return inValue; }
		if (HX_FIELD_EQ(inName,"module") ) { module=inValue.Cast<  ::snow::modules::openal::Audio >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { looping=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=inValue.Cast<  ::snow::systems::audio::AudioInstance >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alsource") ) { alsource=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alformat") ) { alformat=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"current_time") ) { current_time=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ALSound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("instance",95,1f,e1,59));
	outFields->push(HX_("source",db,b0,31,32));
	outFields->push(HX_("module",ac,34,d3,c0));
	outFields->push(HX_("alsource",06,08,5d,69));
	outFields->push(HX_("alformat",62,e6,b9,34));
	outFields->push(HX_("pan",5d,51,55,00));
	outFields->push(HX_("looping",fe,7c,7d,20));
	outFields->push(HX_("current_time",13,5d,ec,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ALSound_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::systems::audio::AudioInstance*/ ,(int)offsetof(ALSound_obj,instance),HX_("instance",95,1f,e1,59)},
	{hx::fsObject /*::snow::systems::audio::AudioSource*/ ,(int)offsetof(ALSound_obj,source),HX_("source",db,b0,31,32)},
	{hx::fsObject /*::snow::modules::openal::Audio*/ ,(int)offsetof(ALSound_obj,module),HX_("module",ac,34,d3,c0)},
	{hx::fsInt,(int)offsetof(ALSound_obj,alsource),HX_("alsource",06,08,5d,69)},
	{hx::fsInt,(int)offsetof(ALSound_obj,alformat),HX_("alformat",62,e6,b9,34)},
	{hx::fsFloat,(int)offsetof(ALSound_obj,pan),HX_("pan",5d,51,55,00)},
	{hx::fsBool,(int)offsetof(ALSound_obj,looping),HX_("looping",fe,7c,7d,20)},
	{hx::fsFloat,(int)offsetof(ALSound_obj,current_time),HX_("current_time",13,5d,ec,b3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ALSound_obj_sStaticStorageInfo = 0;
#endif

static ::String ALSound_obj_sMemberFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("source",db,b0,31,32),
	HX_("module",ac,34,d3,c0),
	HX_("alsource",06,08,5d,69),
	HX_("alformat",62,e6,b9,34),
	HX_("pan",5d,51,55,00),
	HX_("looping",fe,7c,7d,20),
	HX_("current_time",13,5d,ec,b3),
	HX_("init",10,3b,bb,45),
	HX_("position",a9,a0,fa,ca),
	HX_("position_of",2d,e6,66,ff),
	HX_("destroy",fa,2c,86,24),
	HX_("tick",5d,c3,fc,4c),
	HX_("new_source",1a,be,59,10),
	HX_("err",65,07,4d,00),
	HX_("source_format",5b,91,91,ee),
	::String(null()) };

hx::Class ALSound_obj::__mClass;

void ALSound_obj::__register()
{
	ALSound_obj _hx_dummy;
	ALSound_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.modules.openal.ALSound",7d,48,64,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ALSound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ALSound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALSound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALSound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace modules
} // end namespace openal
