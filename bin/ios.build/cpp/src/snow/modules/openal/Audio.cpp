// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_fb3dacc61d0dee8d
#define INCLUDED_fb3dacc61d0dee8d
#include "linc_openal.h"
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openal_ALError
#include <openal/ALError.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_NativeAudioData
#include <snow/core/native/audio/NativeAudioData.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Audio
#include <snow/modules/interfaces/Audio.h>
#endif
#ifndef INCLUDED_snow_modules_openal_ALSound
#include <snow/modules/openal/ALSound.h>
#endif
#ifndef INCLUDED_snow_modules_openal_ALStream
#include <snow/modules/openal/ALStream.h>
#endif
#ifndef INCLUDED_snow_modules_openal_Audio
#include <snow/modules/openal/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_Audio
#include <snow/systems/audio/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioInstance
#include <snow/systems/audio/AudioInstance.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_22_new,"snow.modules.openal.Audio","new",0x5594ed81,"snow.modules.openal.Audio.new","snow/modules/openal/Audio.hx",22,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_61_onevent,"snow.modules.openal.Audio","onevent",0xa1a1b83c,"snow.modules.openal.Audio.onevent","snow/modules/openal/Audio.hx",61,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_95_on_source_destroyed,"snow.modules.openal.Audio","on_source_destroyed",0x88cdadb6,"snow.modules.openal.Audio.on_source_destroyed","snow/modules/openal/Audio.hx",95,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_109_on_instance_destroyed,"snow.modules.openal.Audio","on_instance_destroyed",0x6142ab30,"snow.modules.openal.Audio.on_instance_destroyed","snow/modules/openal/Audio.hx",109,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_125_shutdown,"snow.modules.openal.Audio","shutdown",0xf568a7d5,"snow.modules.openal.Audio.shutdown","snow/modules/openal/Audio.hx",125,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_156_suspend,"snow.modules.openal.Audio","suspend",0x201bf11d,"snow.modules.openal.Audio.suspend","snow/modules/openal/Audio.hx",156,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_173_resume,"snow.modules.openal.Audio","resume",0xf2e3772c,"snow.modules.openal.Audio.resume","snow/modules/openal/Audio.hx",173,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_194_snd_of,"snow.modules.openal.Audio","snd_of",0x7ddf28ec,"snow.modules.openal.Audio.snd_of","snow/modules/openal/Audio.hx",194,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_199_play,"snow.modules.openal.Audio","play",0x8e128db3,"snow.modules.openal.Audio.play","snow/modules/openal/Audio.hx",199,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_234_loop,"snow.modules.openal.Audio","loop",0x8b700623,"snow.modules.openal.Audio.loop","snow/modules/openal/Audio.hx",234,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_252_pause,"snow.modules.openal.Audio","pause",0xbaf33e57,"snow.modules.openal.Audio.pause","snow/modules/openal/Audio.hx",252,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_265_unpause,"snow.modules.openal.Audio","unpause",0xe2b58f9e,"snow.modules.openal.Audio.unpause","snow/modules/openal/Audio.hx",265,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_278_stop,"snow.modules.openal.Audio","stop",0x90144fc1,"snow.modules.openal.Audio.stop","snow/modules/openal/Audio.hx",278,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_292_volume,"snow.modules.openal.Audio","volume",0x49b23759,"snow.modules.openal.Audio.volume","snow/modules/openal/Audio.hx",292,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_306_pan,"snow.modules.openal.Audio","pan",0x55966e7e,"snow.modules.openal.Audio.pan","snow/modules/openal/Audio.hx",306,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_320_pitch,"snow.modules.openal.Audio","pitch",0xc03c2321,"snow.modules.openal.Audio.pitch","snow/modules/openal/Audio.hx",320,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_332_position,"snow.modules.openal.Audio","position",0x55574be8,"snow.modules.openal.Audio.position","snow/modules/openal/Audio.hx",332,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_344_volume_of,"snow.modules.openal.Audio","volume_of",0xe7669d7d,"snow.modules.openal.Audio.volume_of","snow/modules/openal/Audio.hx",344,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_354_pan_of,"snow.modules.openal.Audio","pan_of",0xd533ab78,"snow.modules.openal.Audio.pan_of","snow/modules/openal/Audio.hx",354,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_364_pitch_of,"snow.modules.openal.Audio","pitch_of",0x45d43eb5,"snow.modules.openal.Audio.pitch_of","snow/modules/openal/Audio.hx",364,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_374_position_of,"snow.modules.openal.Audio","position_of",0x87ab8c4e,"snow.modules.openal.Audio.position_of","snow/modules/openal/Audio.hx",374,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_384_state_of,"snow.modules.openal.Audio","state_of",0xe9e40d04,"snow.modules.openal.Audio.state_of","snow/modules/openal/Audio.hx",384,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_399_loop_of,"snow.modules.openal.Audio","loop_of",0x4942a8f3,"snow.modules.openal.Audio.loop_of","snow/modules/openal/Audio.hx",399,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_409_instance_of,"snow.modules.openal.Audio","instance_of",0xb16628e2,"snow.modules.openal.Audio.instance_of","snow/modules/openal/Audio.hx",409,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_423_data_from_load,"snow.modules.openal.Audio","data_from_load",0x59e63f45,"snow.modules.openal.Audio.data_from_load","snow/modules/openal/Audio.hx",423,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_430_data_from_bytes,"snow.modules.openal.Audio","data_from_bytes",0x9439de6c,"snow.modules.openal.Audio.data_from_bytes","snow/modules/openal/Audio.hx",430,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_437_err,"snow.modules.openal.Audio","err",0x558e2486,"snow.modules.openal.Audio.err","snow/modules/openal/Audio.hx",437,0x042b6f4e)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd22ac29bfbf3fd_303_boot,"snow.modules.openal.Audio","boot",0x84d3e3f1,"snow.modules.openal.Audio.boot","snow/modules/openal/Audio.hx",303,0x042b6f4e)
namespace snow{
namespace modules{
namespace openal{

void Audio_obj::__construct( ::snow::Snow _app){
            	HX_GC_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_22_new)
HXLINE(  33)		this->active = false;
HXLINE(  27)		this->handle_seq = 0;
HXLINE(  37)		this->app = _app;
HXLINE(  38)		this->instances =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  39)		this->buffers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  42)		this->device = alcOpenDevice(null());
HXLINE(  44)		if (hx::IsNull( this->device )) {
HXLINE(  45)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  45)			_hx_tmp((HX_("    i / openal / ",b4,63,f5,c0) + HX_("failed / didn't create device!",b7,62,68,d8)),hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),45,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("new",60,d0,53,00)));
HXLINE(  46)			return;
            		}
HXLINE(  51)		::cpp::Pointer<  ALCdevice > tmp = this->device;
HXDLIN(  51)		::cpp::Pointer<  ALCdevice > tmp1 = tmp;
HXDLIN(  51)		this->context = linc::openal::createContext(tmp1,null());
HXLINE(  54)		::cpp::Pointer<  ALCcontext > tmp11 = this->context;
HXDLIN(  54)		::cpp::Pointer<  ALCcontext > tmp2 = tmp11;
HXDLIN(  54)		alcMakeContextCurrent(tmp2);
HXLINE(  57)		this->active = true;
            	}

Dynamic Audio_obj::__CreateEmpty() { return new Audio_obj; }

void *Audio_obj::_hx_vtable = 0;

Dynamic Audio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Audio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e17907d;
}

static ::snow::modules::interfaces::Audio_obj _hx_snow_modules_openal_Audio__hx_snow_modules_interfaces_Audio= {
	( void (hx::Object::*)( ::snow::types::SystemEvent))&::snow::modules::openal::Audio_obj::onevent,
	( void (hx::Object::*)())&::snow::modules::openal::Audio_obj::shutdown,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::Dynamic, ::Dynamic))&::snow::modules::openal::Audio_obj::data_from_load,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::snow::api::buffers::ArrayBufferView, ::Dynamic))&::snow::modules::openal::Audio_obj::data_from_bytes,
	(  ::Dynamic (hx::Object::*)( ::snow::systems::audio::AudioSource,Float,bool))&::snow::modules::openal::Audio_obj::play,
	(  ::Dynamic (hx::Object::*)( ::snow::systems::audio::AudioSource,Float,bool))&::snow::modules::openal::Audio_obj::loop,
	( void (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::pause,
	( void (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::unpause,
	( void (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::stop,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::modules::openal::Audio_obj::volume,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::modules::openal::Audio_obj::pan,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::modules::openal::Audio_obj::pitch,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::modules::openal::Audio_obj::position,
	( Float (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::volume_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::pan_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::pitch_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::position_of,
	( int (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::state_of,
	( bool (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::loop_of,
	(  ::snow::systems::audio::AudioInstance (hx::Object::*)( ::Dynamic))&::snow::modules::openal::Audio_obj::instance_of,
	( void (hx::Object::*)())&::snow::modules::openal::Audio_obj::suspend,
	( void (hx::Object::*)())&::snow::modules::openal::Audio_obj::resume,
};

void *Audio_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x955683b8: return &_hx_snow_modules_openal_Audio__hx_snow_modules_interfaces_Audio;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Audio_obj::onevent( ::snow::types::SystemEvent event){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_61_onevent)
HXLINE(  63)		if (!(this->active)) {
HXLINE(  63)			return;
            		}
HXLINE(  65)		if ((event->type == 2)) {
HXLINE(  66)			this->app->audio->on_Int(1,this->on_instance_destroyed_dyn());
HXLINE(  67)			this->app->audio->on_snow_systems_audio_AudioSource(2,this->on_source_destroyed_dyn());
            		}
HXLINE(  70)		if ((event->type == 3)) {
HXLINE(  71)			if (this->app->audio->active) {
HXLINE(  73)				 ::Dynamic _handle = this->instances->keys();
HXDLIN(  73)				while(( (bool)(_handle->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  73)					 ::Dynamic _handle1 = _handle->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE(  74)					 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle1)) );
HXLINE(  75)					_snd->tick();
HXLINE(  78)					bool _hx_tmp;
HXDLIN(  78)					if (_snd->looping) {
HXLINE(  78)						_hx_tmp = !(_snd->source->data->is_stream);
            					}
            					else {
HXLINE(  78)						_hx_tmp = false;
            					}
HXDLIN(  78)					if (_hx_tmp) {
HXLINE(  79)						Float _snd1 = _snd->current_time;
HXDLIN(  79)						if ((_snd1 >= _snd->source->duration())) {
HXLINE(  80)							_snd->current_time = ((Float)0.0);
HXLINE(  81)							this->app->audio->emit_Int(0,_handle1);
            						}
            					}
HXLINE(  85)					if (_snd->instance->has_ended()) {
HXLINE(  86)						this->app->audio->emit_Int(0,_handle1);
HXLINE(  87)						if (!(_snd->instance->destroyed)) {
HXLINE(  87)							_snd->instance->destroy();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,onevent,(void))

void Audio_obj::on_source_destroyed( ::snow::systems::audio::AudioSource _source){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_95_on_source_destroyed)
HXLINE(  97)		 ::Dynamic _buffer = this->buffers->get(_source->source_id);
HXLINE(  98)		if (hx::IsNotNull( ( (int)(_buffer) ) )) {
HXLINE( 100)			linc::openal::deleteBuffer(( (int)(_buffer) ));
            		}
HXLINE( 104)		bool removed = this->buffers->remove(_source->source_id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,on_source_destroyed,(void))

void Audio_obj::on_instance_destroyed( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_109_on_instance_destroyed)
HXLINE( 113)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 115)		if (hx::IsNotNull( _snd )) {
HXLINE( 117)			_snd->destroy();
HXLINE( 118)			_snd = null();
            		}
HXLINE( 121)		this->instances->remove(( (int)(_handle) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,on_instance_destroyed,(void))

void Audio_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_125_shutdown)
HXLINE( 127)		if (!(this->active)) {
HXLINE( 127)			return;
            		}
HXLINE( 129)		{
HXLINE( 129)			 ::Dynamic _snd = this->instances->iterator();
HXDLIN( 129)			while(( (bool)(_snd->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 129)				 ::snow::modules::openal::ALSound _snd1 = ( ( ::snow::modules::openal::ALSound)(_snd->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 130)				_snd1->instance->destroy();
            			}
            		}
HXLINE( 133)		{
HXLINE( 133)			 ::Dynamic _buffer = this->buffers->iterator();
HXDLIN( 133)			while(( (bool)(_buffer->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 133)				int _buffer1 = ( (int)(_buffer->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 134)				linc::openal::deleteBuffer(_buffer1);
            			}
            		}
HXLINE( 137)		::cpp::Pointer<  ALCcontext > tmp = ( (::cpp::Pointer<  ALCcontext >)(null()) );
HXDLIN( 137)		alcMakeContextCurrent(tmp);
HXLINE( 140)		::cpp::Pointer<  ALCcontext > tmp1 = this->context;
HXDLIN( 140)		alcDestroyContext(tmp1);
HXLINE( 143)		::cpp::Pointer<  ALCdevice > tmp2 = this->device;
HXDLIN( 143)		alcCloseDevice(tmp2);
HXLINE( 146)		this->buffers = null();
HXLINE( 147)		this->instances = null();
HXLINE( 148)		this->device = null();
HXLINE( 149)		this->context = null();
HXLINE( 151)		this->app->audio->off_Int(1,this->on_instance_destroyed_dyn());
HXLINE( 152)		this->app->audio->off_snow_systems_audio_AudioSource(2,this->on_source_destroyed_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,shutdown,(void))

void Audio_obj::suspend(){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_156_suspend)
HXLINE( 158)		if (!(this->active)) {
HXLINE( 158)			return;
            		}
HXLINE( 168)		::cpp::Pointer<  ALCcontext > tmp = this->context;
HXDLIN( 168)		alcSuspendContext(tmp);
HXLINE( 169)		::cpp::Pointer<  ALCcontext > tmp1 = ( (::cpp::Pointer<  ALCcontext >)(null()) );
HXDLIN( 169)		alcMakeContextCurrent(tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,suspend,(void))

void Audio_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_173_resume)
HXLINE( 175)		if (!(this->active)) {
HXLINE( 175)			return;
            		}
HXLINE( 184)		::cpp::Pointer<  ALCcontext > tmp = this->context;
HXDLIN( 184)		alcMakeContextCurrent(tmp);
HXLINE( 185)		::cpp::Pointer<  ALCcontext > tmp1 = this->context;
HXDLIN( 185)		alcProcessContext(tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,resume,(void))

 ::snow::modules::openal::ALSound Audio_obj::snd_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_194_snd_of)
HXDLIN( 194)		return ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,snd_of,return )

 ::Dynamic Audio_obj::play( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused){
            	HX_GC_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_199_play)
HXLINE( 201)		if (hx::IsNull( _source )) {
HXLINE( 201)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_source was null",44,f7,d9,83)));
            		}
HXLINE( 202)		if (hx::IsNull( _source->data )) {
HXLINE( 202)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_source.data was null",a0,cc,ae,f1)));
            		}
HXLINE( 204)		int _handle = this->handle_seq;
HXLINE( 205)		 ::snow::systems::audio::AudioInstance _inst = _source->instance(_handle);
HXLINE( 209)		 ::snow::modules::openal::ALSound _snd;
HXDLIN( 209)		bool _g = _source->data->is_stream;
HXDLIN( 209)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 209)				_snd =  ::snow::modules::openal::ALSound_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),_source,_inst);
            			}
            			break;
            			case (int)1: {
HXLINE( 209)				_snd =  ::snow::modules::openal::ALStream_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),_source,_inst);
            			}
            			break;
            		}
HXLINE( 214)		_snd->init();
HXLINE( 215)		this->instances->set(_handle,_snd);
HXLINE( 217)		alSourcef(_snd->alsource,4106,_volume);
HXLINE( 219)		if (!(_paused)) {
HXLINE( 220)			alSourcePlay(_snd->alsource);
            		}
HXLINE( 224)		{
HXLINE( 224)			int _err = alGetError();
HXDLIN( 224)			if ((_err != 0)) {
HXLINE( 224)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("play",f4,2d,5a,4a)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 224)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 224)				HX_STACK_DO_THROW(_s);
            			}
            		}
HXLINE( 226)		this->handle_seq++;
HXLINE( 228)		return _handle;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,play,return )

 ::Dynamic Audio_obj::loop( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_234_loop)
HXLINE( 236)		 ::Dynamic _handle = this->play(_source,_volume,_paused);
HXLINE( 237)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 238)		_snd->looping = true;
HXLINE( 240)		if (!(_snd->source->data->is_stream)) {
HXLINE( 241)			alSourcei(_snd->alsource,4103,1);
            		}
HXLINE( 246)		{
HXLINE( 246)			int _err = alGetError();
HXDLIN( 246)			if ((_err != 0)) {
HXLINE( 246)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("loop",64,a6,b7,47)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 246)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 246)				HX_STACK_DO_THROW(_s);
            			}
            		}
HXLINE( 248)		return _handle;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,loop,return )

void Audio_obj::pause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_252_pause)
HXLINE( 254)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 255)		if (hx::IsNull( _snd )) {
HXLINE( 255)			return;
            		}
HXLINE( 259)		alSourcePause(_snd->alsource);
HXLINE( 261)		{
HXLINE( 261)			int _err = alGetError();
HXDLIN( 261)			if ((_err != 0)) {
HXLINE( 261)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("pause",f6,d6,57,bd)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 261)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 261)				HX_STACK_DO_THROW(_s);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pause,(void))

void Audio_obj::unpause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_265_unpause)
HXLINE( 267)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 268)		if (hx::IsNull( _snd )) {
HXLINE( 268)			return;
            		}
HXLINE( 272)		alSourcePlay(_snd->alsource);
HXLINE( 274)		{
HXLINE( 274)			int _err = alGetError();
HXDLIN( 274)			if ((_err != 0)) {
HXLINE( 274)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("unpause",fd,cd,e8,b9)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 274)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 274)				HX_STACK_DO_THROW(_s);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,unpause,(void))

void Audio_obj::stop( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_278_stop)
HXLINE( 280)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 281)		if (hx::IsNull( _snd )) {
HXLINE( 281)			return;
            		}
HXLINE( 285)		alSourceStop(_snd->alsource);
HXLINE( 287)		{
HXLINE( 287)			int _err = alGetError();
HXDLIN( 287)			if ((_err != 0)) {
HXLINE( 287)				::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + HX_("stop",02,f0,5b,4c)) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXDLIN( 287)				::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXDLIN( 287)				HX_STACK_DO_THROW(_s);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,stop,(void))

void Audio_obj::volume( ::Dynamic _handle,Float _volume){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_292_volume)
HXLINE( 294)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 295)		if (hx::IsNull( _snd )) {
HXLINE( 295)			return;
            		}
HXLINE( 299)		alSourcef(_snd->alsource,4106,_volume);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,volume,(void))

void Audio_obj::pan( ::Dynamic _handle,Float _pan){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_306_pan)
HXLINE( 308)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 309)		if (hx::IsNull( _snd )) {
HXLINE( 309)			return;
            		}
HXLINE( 313)		_snd->pan = _pan;
HXLINE( 315)		int _snd1 = _snd->alsource;
HXDLIN( 315)		Float _hx_tmp = ::Math_obj::cos(((_pan - 1) * ((Float)1.5707)));
HXDLIN( 315)		alSource3f(_snd1,4100,_hx_tmp,( (Float)(0) ),::Math_obj::sin(((_pan + 1) * ((Float)1.5707))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pan,(void))

void Audio_obj::pitch( ::Dynamic _handle,Float _pitch){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_320_pitch)
HXLINE( 322)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 323)		if (hx::IsNull( _snd )) {
HXLINE( 323)			return;
            		}
HXLINE( 327)		alSourcef(_snd->alsource,4099,_pitch);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pitch,(void))

void Audio_obj::position( ::Dynamic _handle,Float _time){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_332_position)
HXLINE( 334)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 335)		if (hx::IsNull( _snd )) {
HXLINE( 335)			return;
            		}
HXLINE( 339)		_snd->position(_time);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,position,(void))

Float Audio_obj::volume_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_344_volume_of)
HXLINE( 346)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 347)		if (hx::IsNull( _snd )) {
HXLINE( 347)			return ((Float)0.0);
            		}
HXLINE( 349)		return linc::openal::getSourcef(_snd->alsource,4106);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,volume_of,return )

Float Audio_obj::pan_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_354_pan_of)
HXLINE( 356)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 357)		if (hx::IsNull( _snd )) {
HXLINE( 357)			return ((Float)0.0);
            		}
HXLINE( 359)		return _snd->pan;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pan_of,return )

Float Audio_obj::pitch_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_364_pitch_of)
HXLINE( 366)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 367)		if (hx::IsNull( _snd )) {
HXLINE( 367)			return ((Float)0.0);
            		}
HXLINE( 369)		return linc::openal::getSourcef(_snd->alsource,4099);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pitch_of,return )

Float Audio_obj::position_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_374_position_of)
HXLINE( 376)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 377)		if (hx::IsNull( _snd )) {
HXLINE( 377)			return ((Float)0.0);
            		}
HXLINE( 379)		return _snd->position_of();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,position_of,return )

int Audio_obj::state_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_384_state_of)
HXLINE( 386)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 387)		bool _hx_tmp;
HXDLIN( 387)		if (hx::IsNotNull( _snd )) {
HXLINE( 387)			_hx_tmp = !(this->app->audio->active);
            		}
            		else {
HXLINE( 387)			_hx_tmp = true;
            		}
HXDLIN( 387)		if (_hx_tmp) {
HXLINE( 387)			return -1;
            		}
HXLINE( 389)		int _g = linc::openal::getSourcei(_snd->alsource,4112);
HXDLIN( 389)		switch((int)(_g)){
            			case (int)4114: {
HXLINE( 390)				return 1;
            			}
            			break;
            			case (int)4115: {
HXLINE( 391)				return 0;
            			}
            			break;
            			case (int)4113: case (int)4116: {
HXLINE( 392)				return 2;
            			}
            			break;
            			default:{
HXLINE( 393)				return -1;
            			}
            		}
HXLINE( 389)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,state_of,return )

bool Audio_obj::loop_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_399_loop_of)
HXLINE( 401)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 402)		if (hx::IsNull( _snd )) {
HXLINE( 402)			return false;
            		}
HXLINE( 404)		return _snd->looping;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,loop_of,return )

 ::snow::systems::audio::AudioInstance Audio_obj::instance_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_409_instance_of)
HXLINE( 411)		 ::snow::modules::openal::ALSound _snd = ( ( ::snow::modules::openal::ALSound)(this->instances->get(_handle)) );
HXLINE( 412)		if (hx::IsNull( _snd )) {
HXLINE( 412)			return null();
            		}
HXLINE( 414)		return _snd->instance;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,instance_of,return )

 ::snow::api::Promise Audio_obj::data_from_load(::String _path, ::Dynamic __o__is_stream, ::Dynamic _format){
 ::Dynamic _is_stream = __o__is_stream.Default(false);
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_423_data_from_load)
HXDLIN( 423)		return ::snow::core::native::audio::NativeAudioData_obj::data_from_load(this->app,_path,_is_stream,_format);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,data_from_load,return )

 ::snow::api::Promise Audio_obj::data_from_bytes(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_430_data_from_bytes)
HXDLIN( 430)		return ::snow::core::native::audio::NativeAudioData_obj::data_from_bytes(this->app,_id,_bytes,_format);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,data_from_bytes,return )

void Audio_obj::err(::String reason){
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_437_err)
HXLINE( 438)		int _err = alGetError();
HXLINE( 439)		if ((_err != 0)) {
HXLINE( 440)			::String _s = (((((HX_("",00,00,00,00) + _err) + HX_(" / ",31,71,18,00)) + reason) + HX_(": failed with ",5d,20,68,1b)) + ::openal::ALError_obj::desc(_err));
HXLINE( 441)			::haxe::Log_obj::trace(_s,hx::SourceInfo(HX_("snow/modules/openal/Audio.hx",4e,6f,2b,04),441,HX_("snow.modules.openal.Audio",0f,19,56,ac),HX_("err",65,07,4d,00)));
HXLINE( 442)			HX_STACK_DO_THROW(_s);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,err,(void))

Float Audio_obj::half_pi;


hx::ObjectPtr< Audio_obj > Audio_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Audio_obj > __this = new Audio_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Audio_obj > Audio_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Audio_obj *__this = (Audio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Audio_obj), true, "snow.modules.openal.Audio"));
	*(void **)__this = Audio_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Audio_obj::Audio_obj()
{
}

void Audio_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Audio);
	HX_MARK_MEMBER_NAME(device,"device");
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_MEMBER_NAME(handle_seq,"handle_seq");
	HX_MARK_MEMBER_NAME(instances,"instances");
	HX_MARK_MEMBER_NAME(buffers,"buffers");
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_END_CLASS();
}

void Audio_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(device,"device");
	HX_VISIT_MEMBER_NAME(context,"context");
	HX_VISIT_MEMBER_NAME(handle_seq,"handle_seq");
	HX_VISIT_MEMBER_NAME(instances,"instances");
	HX_VISIT_MEMBER_NAME(buffers,"buffers");
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(active,"active");
}

hx::Val Audio_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		if (HX_FIELD_EQ(inName,"pan") ) { return hx::Val( pan_dyn() ); }
		if (HX_FIELD_EQ(inName,"err") ) { return hx::Val( err_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch") ) { return hx::Val( pitch_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { return hx::Val( device ); }
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"snd_of") ) { return hx::Val( snd_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"pan_of") ) { return hx::Val( pan_of_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return hx::Val( context ); }
		if (HX_FIELD_EQ(inName,"buffers") ) { return hx::Val( buffers ); }
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		if (HX_FIELD_EQ(inName,"suspend") ) { return hx::Val( suspend_dyn() ); }
		if (HX_FIELD_EQ(inName,"unpause") ) { return hx::Val( unpause_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop_of") ) { return hx::Val( loop_of_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch_of") ) { return hx::Val( pitch_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"state_of") ) { return hx::Val( state_of_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { return hx::Val( instances ); }
		if (HX_FIELD_EQ(inName,"volume_of") ) { return hx::Val( volume_of_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"handle_seq") ) { return hx::Val( handle_seq ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"position_of") ) { return hx::Val( position_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"instance_of") ) { return hx::Val( instance_of_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"data_from_load") ) { return hx::Val( data_from_load_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"data_from_bytes") ) { return hx::Val( data_from_bytes_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"on_source_destroyed") ) { return hx::Val( on_source_destroyed_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"on_instance_destroyed") ) { return hx::Val( on_instance_destroyed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Audio_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { device=inValue.Cast< ::cpp::Pointer<  ALCdevice > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast< ::cpp::Pointer<  ALCcontext > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffers") ) { buffers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { instances=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"handle_seq") ) { handle_seq=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Audio_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("device",96,dc,77,71));
	outFields->push(HX_("context",ef,95,77,19));
	outFields->push(HX_("handle_seq",48,58,ef,72));
	outFields->push(HX_("instances",3e,83,1a,4b));
	outFields->push(HX_("buffers",73,a3,90,b1));
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("active",c6,41,46,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Audio_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Pointer< ALCdevice >*/ ,(int)offsetof(Audio_obj,device),HX_("device",96,dc,77,71)},
	{hx::fsObject /*::cpp::Pointer< ALCcontext >*/ ,(int)offsetof(Audio_obj,context),HX_("context",ef,95,77,19)},
	{hx::fsInt,(int)offsetof(Audio_obj,handle_seq),HX_("handle_seq",48,58,ef,72)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Audio_obj,instances),HX_("instances",3e,83,1a,4b)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Audio_obj,buffers),HX_("buffers",73,a3,90,b1)},
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Audio_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsBool,(int)offsetof(Audio_obj,active),HX_("active",c6,41,46,16)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Audio_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Audio_obj::half_pi,HX_("half_pi",45,20,51,20)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Audio_obj_sMemberFields[] = {
	HX_("device",96,dc,77,71),
	HX_("context",ef,95,77,19),
	HX_("handle_seq",48,58,ef,72),
	HX_("instances",3e,83,1a,4b),
	HX_("buffers",73,a3,90,b1),
	HX_("app",a1,fc,49,00),
	HX_("active",c6,41,46,16),
	HX_("onevent",9b,f6,d4,78),
	HX_("on_source_destroyed",95,7e,54,61),
	HX_("on_instance_destroyed",cf,b1,c6,85),
	HX_("shutdown",96,fc,0b,6b),
	HX_("suspend",7c,2f,4f,f7),
	HX_("resume",ad,69,84,08),
	HX_("snd_of",6d,1b,80,93),
	HX_("play",f4,2d,5a,4a),
	HX_("loop",64,a6,b7,47),
	HX_("pause",f6,d6,57,bd),
	HX_("unpause",fd,cd,e8,b9),
	HX_("stop",02,f0,5b,4c),
	HX_("volume",da,29,53,5f),
	HX_("pan",5d,51,55,00),
	HX_("pitch",c0,bb,a0,c2),
	HX_("position",a9,a0,fa,ca),
	HX_("volume_of",9c,71,ad,60),
	HX_("pan_of",f9,9d,d4,ea),
	HX_("pitch_of",76,93,77,bb),
	HX_("position_of",2d,e6,66,ff),
	HX_("state_of",c5,61,87,5f),
	HX_("loop_of",52,e7,75,20),
	HX_("instance_of",c1,82,21,29),
	HX_("data_from_load",c6,1a,6f,90),
	HX_("data_from_bytes",cb,13,71,15),
	HX_("err",65,07,4d,00),
	::String(null()) };

static void Audio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Audio_obj::half_pi,"half_pi");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Audio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Audio_obj::half_pi,"half_pi");
};

#endif

hx::Class Audio_obj::__mClass;

static ::String Audio_obj_sStaticFields[] = {
	HX_("half_pi",45,20,51,20),
	::String(null())
};

void Audio_obj::__register()
{
	Audio_obj _hx_dummy;
	Audio_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.modules.openal.Audio",0f,19,56,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Audio_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Audio_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Audio_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Audio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Audio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Audio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Audio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Audio_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2fd22ac29bfbf3fd_303_boot)
HXDLIN( 303)		half_pi = ((Float)1.5707);
            	}
}

} // end namespace snow
} // end namespace modules
} // end namespace openal
