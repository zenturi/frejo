// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8664b18ab865b55e_12_new,"snow.api.buffers.ArrayBufferView","new",0x3a2b1616,"snow.api.buffers.ArrayBufferView.new","snow/api/buffers/ArrayBufferView.hx",12,0xa074815d)
namespace snow{
namespace api{
namespace buffers{

void ArrayBufferView_obj::__construct(int in_type){
            	HX_STACKFRAME(&_hx_pos_8664b18ab865b55e_12_new)
HXLINE(  21)		this->bytesPerElement = 0;
HXLINE(  14)		this->type = 0;
HXLINE(  27)		this->type = in_type;
HXLINE(  28)		int _hx_tmp;
HXDLIN(  28)		switch((int)(this->type)){
            			case (int)1: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)2: {
HXLINE(  28)				_hx_tmp = 2;
            			}
            			break;
            			case (int)3: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)4: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)5: {
HXLINE(  28)				_hx_tmp = 1;
            			}
            			break;
            			case (int)6: {
HXLINE(  28)				_hx_tmp = 2;
            			}
            			break;
            			case (int)7: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)8: {
HXLINE(  28)				_hx_tmp = 4;
            			}
            			break;
            			case (int)9: {
HXLINE(  28)				_hx_tmp = 8;
            			}
            			break;
            			default:{
HXLINE(  28)				_hx_tmp = 1;
            			}
            		}
HXDLIN(  28)		this->bytesPerElement = _hx_tmp;
            	}

Dynamic ArrayBufferView_obj::__CreateEmpty() { return new ArrayBufferView_obj; }

void *ArrayBufferView_obj::_hx_vtable = 0;

Dynamic ArrayBufferView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayBufferView_obj > _hx_result = new ArrayBufferView_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ArrayBufferView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28adf4de;
}


ArrayBufferView_obj::ArrayBufferView_obj()
{
}

void ArrayBufferView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayBufferView);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_MEMBER_NAME(byteLength,"byteLength");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(bytesPerElement,"bytesPerElement");
	HX_MARK_END_CLASS();
}

void ArrayBufferView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
	HX_VISIT_MEMBER_NAME(byteLength,"byteLength");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(bytesPerElement,"bytesPerElement");
}

hx::Val ArrayBufferView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return hx::Val( byteOffset ); }
		if (HX_FIELD_EQ(inName,"byteLength") ) { return hx::Val( byteLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { return hx::Val( bytesPerElement ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayBufferView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byteLength") ) { byteLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { bytesPerElement=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayBufferView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("byteOffset",bb,20,44,38));
	outFields->push(HX_("byteLength",0e,1e,0c,77));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("bytesPerElement",aa,67,89,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayBufferView_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*Array< unsigned char >*/ ,(int)offsetof(ArrayBufferView_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteOffset),HX_("byteOffset",bb,20,44,38)},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteLength),HX_("byteLength",0e,1e,0c,77)},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,bytesPerElement),HX_("bytesPerElement",aa,67,89,18)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayBufferView_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayBufferView_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("buffer",00,bd,94,d0),
	HX_("byteOffset",bb,20,44,38),
	HX_("byteLength",0e,1e,0c,77),
	HX_("length",e6,94,07,9f),
	HX_("bytesPerElement",aa,67,89,18),
	::String(null()) };

hx::Class ArrayBufferView_obj::__mClass;

void ArrayBufferView_obj::__register()
{
	ArrayBufferView_obj _hx_dummy;
	ArrayBufferView_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.api.buffers.ArrayBufferView",24,13,7d,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayBufferView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayBufferView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayBufferView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayBufferView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace api
} // end namespace buffers
