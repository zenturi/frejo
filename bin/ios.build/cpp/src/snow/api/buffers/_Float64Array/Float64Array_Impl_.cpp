// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_api_buffers_TAError
#include <snow/api/buffers/TAError.h>
#endif
#ifndef INCLUDED_snow_api_buffers__Float64Array_Float64Array_Impl_
#include <snow/api/buffers/_Float64Array/Float64Array_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_64__new,"snow.api.buffers._Float64Array.Float64Array_Impl_","_new",0x9f31f206,"snow.api.buffers._Float64Array.Float64Array_Impl_._new","snow/api/buffers/Float64Array.hx",64,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_70_fromArray,"snow.api.buffers._Float64Array.Float64Array_Impl_","fromArray",0x750a850a,"snow.api.buffers._Float64Array.Float64Array_Impl_.fromArray","snow/api/buffers/Float64Array.hx",70,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_74_fromView,"snow.api.buffers._Float64Array.Float64Array_Impl_","fromView",0xa5e99414,"snow.api.buffers._Float64Array.Float64Array_Impl_.fromView","snow/api/buffers/Float64Array.hx",74,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_78_fromBuffer,"snow.api.buffers._Float64Array.Float64Array_Impl_","fromBuffer",0x0cce286f,"snow.api.buffers._Float64Array.Float64Array_Impl_.fromBuffer","snow/api/buffers/Float64Array.hx",78,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_83_subarray,"snow.api.buffers._Float64Array.Float64Array_Impl_","subarray",0x014fe73e,"snow.api.buffers._Float64Array.Float64Array_Impl_.subarray","snow/api/buffers/Float64Array.hx",83,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_86_fromBytes,"snow.api.buffers._Float64Array.Float64Array_Impl_","fromBytes",0x0d131fdc,"snow.api.buffers._Float64Array.Float64Array_Impl_.fromBytes","snow/api/buffers/Float64Array.hx",86,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_93_toBytes,"snow.api.buffers._Float64Array.Float64Array_Impl_","toBytes",0xd94b2d6b,"snow.api.buffers._Float64Array.Float64Array_Impl_.toBytes","snow/api/buffers/Float64Array.hx",93,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_98_get_length,"snow.api.buffers._Float64Array.Float64Array_Impl_","get_length",0x88846b14,"snow.api.buffers._Float64Array.Float64Array_Impl_.get_length","snow/api/buffers/Float64Array.hx",98,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_113_toString,"snow.api.buffers._Float64Array.Float64Array_Impl_","toString",0x323d63d1,"snow.api.buffers._Float64Array.Float64Array_Impl_.toString","snow/api/buffers/Float64Array.hx",113,0xe97ae642)
HX_LOCAL_STACK_FRAME(_hx_pos_532be3b92b0e01bf_60_boot,"snow.api.buffers._Float64Array.Float64Array_Impl_","boot",0xa12e60d7,"snow.api.buffers._Float64Array.Float64Array_Impl_.boot","snow/api/buffers/Float64Array.hx",60,0xe97ae642)
namespace snow{
namespace api{
namespace buffers{
namespace _Float64Array{

void Float64Array_Impl__obj::__construct() { }

Dynamic Float64Array_Impl__obj::__CreateEmpty() { return new Float64Array_Impl__obj; }

void *Float64Array_Impl__obj::_hx_vtable = 0;

Dynamic Float64Array_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Float64Array_Impl__obj > _hx_result = new Float64Array_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Float64Array_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x506266e1;
}

int Float64Array_Impl__obj::BYTES_PER_ELEMENT;

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::_new(int _elements){
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_64__new)
HXLINE(  65)		int _elements1 = _elements;
HXDLIN(  65)		if ((_elements1 < 0)) {
HXLINE(  65)			_elements1 = 0;
            		}
HXDLIN(  65)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,9);
HXDLIN(  65)		int _bytelen = (_elements1 * _view->bytesPerElement);
HXDLIN(  65)		_view->byteOffset = 0;
HXDLIN(  65)		_view->byteLength = _bytelen;
HXDLIN(  65)		::Array< unsigned char > this1 = ::Array_obj< unsigned char >::__new();
HXDLIN(  65)		if ((_bytelen > 0)) {
HXLINE(  65)			this1[(_bytelen - 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  65)		_view->buffer = this1;
HXDLIN(  65)		_view->length = _elements1;
HXLINE(  64)		 ::snow::api::buffers::ArrayBufferView this2 = _view;
HXDLIN(  64)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,_new,return )

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::fromArray(::cpp::VirtualArray _array){
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_70_fromArray)
HXDLIN(  70)		::Array< Float > _array1 = _array;
HXDLIN(  70)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,9);
HXDLIN(  70)		int _length = _array1->length;
HXDLIN(  70)		int _bytelen = (_length * _view->bytesPerElement);
HXDLIN(  70)		_view->byteOffset = 0;
HXDLIN(  70)		_view->length = _length;
HXDLIN(  70)		_view->byteLength = _bytelen;
HXDLIN(  70)		::Array< unsigned char > this1 = ::Array_obj< unsigned char >::__new();
HXDLIN(  70)		if ((_bytelen > 0)) {
HXDLIN(  70)			this1[(_bytelen - 1)] = ( (unsigned char)(0) );
            		}
HXDLIN(  70)		_view->buffer = this1;
HXDLIN(  70)		_view->copyFromArray(_array1,null());
HXDLIN(  70)		return _view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,fromArray,return )

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::fromView( ::snow::api::buffers::ArrayBufferView _view){
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_74_fromView)
HXDLIN(  74)		int _type = 9;
HXDLIN(  74)		int _src_type = _view->type;
HXDLIN(  74)		::Array< unsigned char > _src_data = _view->buffer;
HXDLIN(  74)		int _src_length = _view->length;
HXDLIN(  74)		int _src_byte_offset = _view->byteOffset;
HXDLIN(  74)		 ::snow::api::buffers::ArrayBufferView _view1 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,_type);
HXDLIN(  74)		if ((_src_type == _type)) {
HXDLIN(  74)			int srcLength = _src_data->length;
HXDLIN(  74)			int cloneLength = (srcLength - _src_byte_offset);
HXDLIN(  74)			::Array< unsigned char > this1 = ::Array_obj< unsigned char >::__new();
HXDLIN(  74)			if ((cloneLength > 0)) {
HXDLIN(  74)				this1[(cloneLength - 1)] = ( (unsigned char)(0) );
            			}
HXDLIN(  74)			_view1->buffer = this1;
HXDLIN(  74)			_view1->buffer->blit(0,_src_data,_src_byte_offset,cloneLength);
            		}
            		else {
HXDLIN(  74)			HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            		}
HXDLIN(  74)		_view1->byteLength = (_view1->bytesPerElement * _src_length);
HXDLIN(  74)		_view1->byteOffset = 0;
HXDLIN(  74)		_view1->length = _src_length;
HXDLIN(  74)		return _view1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,fromView,return )

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::fromBuffer(::Array< unsigned char > _buffer,int _byteOffset,int _byteLength){
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_78_fromBuffer)
HXDLIN(  78)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,9);
HXDLIN(  78)		int _bytes_per_elem = _view->bytesPerElement;
HXDLIN(  78)		if ((_byteOffset < 0)) {
HXDLIN(  78)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            		}
HXDLIN(  78)		if ((hx::Mod(_byteOffset,_bytes_per_elem) != 0)) {
HXDLIN(  78)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            		}
HXDLIN(  78)		int _src_bytelen = _buffer->length;
HXDLIN(  78)		int _new_range = (_byteOffset + _byteLength);
HXDLIN(  78)		if ((_new_range > _src_bytelen)) {
HXDLIN(  78)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            		}
HXDLIN(  78)		_view->buffer = _buffer;
HXDLIN(  78)		_view->byteOffset = _byteOffset;
HXDLIN(  78)		_view->byteLength = _byteLength;
HXDLIN(  78)		_view->length = ::Std_obj::_hx_int((( (Float)(_byteLength) ) / ( (Float)(_bytes_per_elem) )));
HXDLIN(  78)		return _view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float64Array_Impl__obj,fromBuffer,return )

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::subarray( ::snow::api::buffers::ArrayBufferView this1,int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_83_subarray)
HXDLIN(  83)		bool _hx_tmp = hx::IsNull( end );
HXDLIN(  83)		int byte_len = ((end - begin) * this1->bytesPerElement);
HXDLIN(  83)		int byte_offset = ((begin * this1->bytesPerElement) + this1->byteOffset);
HXDLIN(  83)		 ::snow::api::buffers::ArrayBufferView view;
HXDLIN(  83)		int _g = this1->type;
HXDLIN(  83)		switch((int)(_g)){
            			case (int)0: {
HXDLIN(  83)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXDLIN(  83)				::Array< unsigned char > _buffer = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,1);
HXDLIN(  83)				int _bytes_per_elem = _view->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen = _buffer->length;
HXDLIN(  83)				int _new_range = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range > _src_bytelen)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view->buffer = _buffer;
HXDLIN(  83)				_view->byteOffset = byte_offset;
HXDLIN(  83)				_view->byteLength = byte_len;
HXDLIN(  83)				_view->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem) )));
HXDLIN(  83)				view = _view;
            			}
            			break;
            			case (int)2: {
HXDLIN(  83)				::Array< unsigned char > _buffer1 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view1 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,2);
HXDLIN(  83)				int _bytes_per_elem1 = _view1->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem1) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen1 = _buffer1->length;
HXDLIN(  83)				int _new_range1 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range1 > _src_bytelen1)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view1->buffer = _buffer1;
HXDLIN(  83)				_view1->byteOffset = byte_offset;
HXDLIN(  83)				_view1->byteLength = byte_len;
HXDLIN(  83)				_view1->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem1) )));
HXDLIN(  83)				view = _view1;
            			}
            			break;
            			case (int)3: {
HXDLIN(  83)				::Array< unsigned char > _buffer2 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view2 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,3);
HXDLIN(  83)				int _bytes_per_elem2 = _view2->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem2) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen2 = _buffer2->length;
HXDLIN(  83)				int _new_range2 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range2 > _src_bytelen2)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view2->buffer = _buffer2;
HXDLIN(  83)				_view2->byteOffset = byte_offset;
HXDLIN(  83)				_view2->byteLength = byte_len;
HXDLIN(  83)				_view2->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem2) )));
HXDLIN(  83)				view = _view2;
            			}
            			break;
            			case (int)4: {
HXDLIN(  83)				::Array< unsigned char > _buffer3 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view3 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,4);
HXDLIN(  83)				int _bytes_per_elem3 = _view3->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem3) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen3 = _buffer3->length;
HXDLIN(  83)				int _new_range3 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range3 > _src_bytelen3)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view3->buffer = _buffer3;
HXDLIN(  83)				_view3->byteOffset = byte_offset;
HXDLIN(  83)				_view3->byteLength = byte_len;
HXDLIN(  83)				_view3->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem3) )));
HXDLIN(  83)				view = _view3;
            			}
            			break;
            			case (int)5: {
HXDLIN(  83)				::Array< unsigned char > _buffer4 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view4 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,5);
HXDLIN(  83)				int _bytes_per_elem4 = _view4->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem4) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen4 = _buffer4->length;
HXDLIN(  83)				int _new_range4 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range4 > _src_bytelen4)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view4->buffer = _buffer4;
HXDLIN(  83)				_view4->byteOffset = byte_offset;
HXDLIN(  83)				_view4->byteLength = byte_len;
HXDLIN(  83)				_view4->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem4) )));
HXDLIN(  83)				view = _view4;
            			}
            			break;
            			case (int)6: {
HXDLIN(  83)				::Array< unsigned char > _buffer5 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view5 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,6);
HXDLIN(  83)				int _bytes_per_elem5 = _view5->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem5) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen5 = _buffer5->length;
HXDLIN(  83)				int _new_range5 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range5 > _src_bytelen5)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view5->buffer = _buffer5;
HXDLIN(  83)				_view5->byteOffset = byte_offset;
HXDLIN(  83)				_view5->byteLength = byte_len;
HXDLIN(  83)				_view5->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem5) )));
HXDLIN(  83)				view = _view5;
            			}
            			break;
            			case (int)7: {
HXDLIN(  83)				::Array< unsigned char > _buffer6 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view6 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,7);
HXDLIN(  83)				int _bytes_per_elem6 = _view6->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem6) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen6 = _buffer6->length;
HXDLIN(  83)				int _new_range6 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range6 > _src_bytelen6)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view6->buffer = _buffer6;
HXDLIN(  83)				_view6->byteOffset = byte_offset;
HXDLIN(  83)				_view6->byteLength = byte_len;
HXDLIN(  83)				_view6->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem6) )));
HXDLIN(  83)				view = _view6;
            			}
            			break;
            			case (int)8: {
HXDLIN(  83)				::Array< unsigned char > _buffer7 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view7 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,8);
HXDLIN(  83)				int _bytes_per_elem7 = _view7->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem7) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen7 = _buffer7->length;
HXDLIN(  83)				int _new_range7 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range7 > _src_bytelen7)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view7->buffer = _buffer7;
HXDLIN(  83)				_view7->byteOffset = byte_offset;
HXDLIN(  83)				_view7->byteLength = byte_len;
HXDLIN(  83)				_view7->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem7) )));
HXDLIN(  83)				view = _view7;
            			}
            			break;
            			case (int)9: {
HXDLIN(  83)				::Array< unsigned char > _buffer8 = this1->buffer;
HXDLIN(  83)				 ::snow::api::buffers::ArrayBufferView _view8 =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,9);
HXDLIN(  83)				int _bytes_per_elem8 = _view8->bytesPerElement;
HXDLIN(  83)				if ((byte_offset < 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            				}
HXDLIN(  83)				if ((hx::Mod(byte_offset,_bytes_per_elem8) != 0)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            				}
HXDLIN(  83)				int _src_bytelen8 = _buffer8->length;
HXDLIN(  83)				int _new_range8 = (byte_offset + byte_len);
HXDLIN(  83)				if ((_new_range8 > _src_bytelen8)) {
HXDLIN(  83)					HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            				}
HXDLIN(  83)				_view8->buffer = _buffer8;
HXDLIN(  83)				_view8->byteOffset = byte_offset;
HXDLIN(  83)				_view8->byteLength = byte_len;
HXDLIN(  83)				_view8->length = ::Std_obj::_hx_int((( (Float)(byte_len) ) / ( (Float)(_bytes_per_elem8) )));
HXDLIN(  83)				view = _view8;
            			}
            			break;
            		}
HXDLIN(  83)		return view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float64Array_Impl__obj,subarray,return )

 ::snow::api::buffers::ArrayBufferView Float64Array_Impl__obj::fromBytes( ::haxe::io::Bytes _bytes, ::Dynamic __o__byteOffset, ::Dynamic _byteLength){
 ::Dynamic _byteOffset = __o__byteOffset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_532be3b92b0e01bf_86_fromBytes)
HXLINE(  87)		if (hx::IsNull( _byteLength )) {
HXLINE(  87)			_byteLength = _bytes->length;
            		}
HXLINE(  88)		::Array< unsigned char > _buffer = _bytes->b;
HXDLIN(  88)		int _byteOffset1 = ( (int)(_byteOffset) );
HXDLIN(  88)		int _byteLength1 = ( (int)(_byteLength) );
HXDLIN(  88)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,9);
HXDLIN(  88)		int _bytes_per_elem = _view->bytesPerElement;
HXDLIN(  88)		if ((_byteOffset1 < 0)) {
HXLINE(  88)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            		}
HXDLIN(  88)		if ((hx::Mod(_byteOffset1,_bytes_per_elem) != 0)) {
HXLINE(  88)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            		}
HXDLIN(  88)		int _src_bytelen = _buffer->length;
HXDLIN(  88)		int _new_range = (_byteOffset1 + _byteLength1);
HXDLIN(  88)		if ((_new_range > _src_bytelen)) {
HXLINE(  88)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            		}
HXDLIN(  88)		_view->buffer = _buffer;
HXDLIN(  88)		_view->byteOffset = _byteOffset1;
HXDLIN(  88)		_view->byteLength = _byteLength1;
HXDLIN(  88)		_view->length = ::Std_obj::_hx_int((( (Float)(_byteLength1) ) / ( (Float)(_bytes_per_elem) )));
HXDLIN(  88)		return _view;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Float64Array_Impl__obj,fromBytes,return )

 ::haxe::io::Bytes Float64Array_Impl__obj::toBytes( ::snow::api::buffers::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_532be3b92b0e01bf_93_toBytes)
HXDLIN(  93)		return ::haxe::io::Bytes_obj::ofData(this1->buffer);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,toBytes,return )

int Float64Array_Impl__obj::get_length( ::snow::api::buffers::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_532be3b92b0e01bf_98_get_length)
HXDLIN(  98)		return this1->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,get_length,return )

::String Float64Array_Impl__obj::toString( ::snow::api::buffers::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_532be3b92b0e01bf_113_toString)
HXDLIN( 113)		if (hx::IsNull( this1 )) {
HXDLIN( 113)			return null();
            		}
            		else {
HXDLIN( 113)			return ((((HX_("Float64Array [byteLength:",32,73,38,ac) + this1->byteLength) + HX_(", length:",a0,04,67,ef)) + this1->length) + HX_("]",5d,00,00,00));
            		}
HXDLIN( 113)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Float64Array_Impl__obj,toString,return )


Float64Array_Impl__obj::Float64Array_Impl__obj()
{
}

bool Float64Array_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toBytes") ) { outValue = toBytes_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromView") ) { outValue = fromView_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subarray") ) { outValue = subarray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBuffer") ) { outValue = fromBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Float64Array_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Float64Array_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Float64Array_Impl__obj::BYTES_PER_ELEMENT,HX_("BYTES_PER_ELEMENT",a6,04,1d,cc)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Float64Array_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Float64Array_Impl__obj::BYTES_PER_ELEMENT,"BYTES_PER_ELEMENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Float64Array_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Float64Array_Impl__obj::BYTES_PER_ELEMENT,"BYTES_PER_ELEMENT");
};

#endif

hx::Class Float64Array_Impl__obj::__mClass;

static ::String Float64Array_Impl__obj_sStaticFields[] = {
	HX_("BYTES_PER_ELEMENT",a6,04,1d,cc),
	HX_("_new",61,15,1f,3f),
	HX_("fromArray",cf,57,18,da),
	HX_("fromView",ef,00,1b,ac),
	HX_("fromBuffer",0a,c2,d8,13),
	HX_("subarray",19,54,81,07),
	HX_("fromBytes",a1,f2,20,72),
	HX_("toBytes",f0,54,1c,8a),
	HX_("get_length",af,04,8f,8f),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void Float64Array_Impl__obj::__register()
{
	Float64Array_Impl__obj _hx_dummy;
	Float64Array_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.api.buffers._Float64Array.Float64Array_Impl_",e9,c5,98,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Float64Array_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Float64Array_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Float64Array_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Float64Array_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Float64Array_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Float64Array_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Float64Array_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Float64Array_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_532be3b92b0e01bf_60_boot)
HXDLIN(  60)		BYTES_PER_ELEMENT = 8;
            	}
}

} // end namespace snow
} // end namespace api
} // end namespace buffers
} // end namespace _Float64Array
