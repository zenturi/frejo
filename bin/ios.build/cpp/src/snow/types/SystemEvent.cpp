// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_snow_types_InputEvent
#include <snow/types/InputEvent.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif
#ifndef INCLUDED_snow_types_WindowEvent
#include <snow/types/WindowEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eb1052a8434164a6_583_new,"snow.types.SystemEvent","new",0x80ff08dd,"snow.types.SystemEvent.new","snow/types/Types.hx",583,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_eb1052a8434164a6_591_toString,"snow.types.SystemEvent","toString",0x62b4b30f,"snow.types.SystemEvent.toString","snow/types/Types.hx",591,0x72b41ce7)
namespace snow{
namespace types{

void SystemEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_eb1052a8434164a6_583_new)
            	}

Dynamic SystemEvent_obj::__CreateEmpty() { return new SystemEvent_obj; }

void *SystemEvent_obj::_hx_vtable = 0;

Dynamic SystemEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemEvent_obj > _hx_result = new SystemEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SystemEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2db1ac75;
}

::String SystemEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_eb1052a8434164a6_591_toString)
HXLINE( 592)		int this1 = this->type;
HXDLIN( 592)		::String _s;
HXDLIN( 592)		switch((int)(this1)){
            			case (int)0: {
HXLINE( 592)				_s = HX_("se_unknown",9d,c3,e5,b5);
            			}
            			break;
            			case (int)1: {
HXLINE( 592)				_s = HX_("se_init",1d,21,fc,08);
            			}
            			break;
            			case (int)2: {
HXLINE( 592)				_s = HX_("se_ready",b6,05,43,fc);
            			}
            			break;
            			case (int)3: {
HXLINE( 592)				_s = HX_("se_tick",6a,a9,3d,10);
            			}
            			break;
            			case (int)4: {
HXLINE( 592)				_s = HX_("se_freeze",a4,cd,f4,70);
            			}
            			break;
            			case (int)5: {
HXLINE( 592)				_s = HX_("se_unfreeze",fd,29,4d,ba);
            			}
            			break;
            			case (int)7: {
HXLINE( 592)				_s = HX_("se_shutdown",23,6d,ed,73);
            			}
            			break;
            			case (int)8: {
HXLINE( 592)				_s = HX_("se_window",3d,d7,5c,14);
            			}
            			break;
            			case (int)9: {
HXLINE( 592)				_s = HX_("se_input",5d,29,a6,d3);
            			}
            			break;
            			case (int)10: {
HXLINE( 592)				_s = HX_("se_quit",dc,25,4b,0e);
            			}
            			break;
            			case (int)11: {
HXLINE( 592)				_s = HX_("se_app_terminating",13,b9,f1,1d);
            			}
            			break;
            			case (int)12: {
HXLINE( 592)				_s = HX_("se_app_lowmemory",8a,22,cd,92);
            			}
            			break;
            			case (int)13: {
HXLINE( 592)				_s = HX_("se_app_willenterbackground",69,64,7f,c1);
            			}
            			break;
            			case (int)14: {
HXLINE( 592)				_s = HX_("se_app_didenterbackground",12,ce,28,14);
            			}
            			break;
            			case (int)15: {
HXLINE( 592)				_s = HX_("se_app_willenterforeground",3e,e9,50,ac);
            			}
            			break;
            			case (int)16: {
HXLINE( 592)				_s = HX_("se_app_didenterforeground",e7,52,fa,fe);
            			}
            			break;
            			default:{
HXLINE( 592)				_s = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 592)		::String _s1 = ((HX_("{ \"SystemEvent\":true, \"type\":\"",76,dc,76,fd) + _s) + HX_("\"",22,00,00,00));
HXLINE( 593)		if (hx::IsNotNull( this->window )) {
HXLINE( 593)			_s1 = (_s1 + (HX_(", \"window\":",f6,ea,66,b1) + ::Std_obj::string(this->window)));
            		}
HXLINE( 594)		if (hx::IsNotNull( this->input )) {
HXLINE( 594)			_s1 = (_s1 + (HX_(", \"input\":",f4,5a,cb,d7) + ::Std_obj::string(this->input)));
            		}
HXLINE( 595)		_s1 = (_s1 + HX_(" }",5d,1c,00,00));
HXLINE( 596)		return _s1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SystemEvent_obj,toString,return )


hx::ObjectPtr< SystemEvent_obj > SystemEvent_obj::__new() {
	hx::ObjectPtr< SystemEvent_obj > __this = new SystemEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SystemEvent_obj > SystemEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	SystemEvent_obj *__this = (SystemEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SystemEvent_obj), true, "snow.types.SystemEvent"));
	*(void **)__this = SystemEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SystemEvent_obj::SystemEvent_obj()
{
}

void SystemEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SystemEvent);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_END_CLASS();
}

void SystemEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(input,"input");
}

hx::Val SystemEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SystemEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::snow::types::InputEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::snow::types::WindowEvent >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SystemEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("input",0a,c4,1d,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SystemEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SystemEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*::snow::types::WindowEvent*/ ,(int)offsetof(SystemEvent_obj,window),HX_("window",f0,93,8c,52)},
	{hx::fsObject /*::snow::types::InputEvent*/ ,(int)offsetof(SystemEvent_obj,input),HX_("input",0a,c4,1d,be)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SystemEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String SystemEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("window",f0,93,8c,52),
	HX_("input",0a,c4,1d,be),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class SystemEvent_obj::__mClass;

void SystemEvent_obj::__register()
{
	SystemEvent_obj _hx_dummy;
	SystemEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.SystemEvent",6b,56,80,10);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SystemEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SystemEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
