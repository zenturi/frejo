// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_MouseEvent
#include <snow/types/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2208c019f7c5149_686_new,"snow.types.MouseEvent","new",0x314dfb67,"snow.types.MouseEvent.new","snow/types/Types.hx",686,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_a2208c019f7c5149_688_set,"snow.types.MouseEvent","set",0x3151c6a9,"snow.types.MouseEvent.set","snow/types/Types.hx",688,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_a2208c019f7c5149_699_toString,"snow.types.MouseEvent","toString",0x62384c45,"snow.types.MouseEvent.toString","snow/types/Types.hx",699,0x72b41ce7)
namespace snow{
namespace types{

void MouseEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a2208c019f7c5149_686_new)
            	}

Dynamic MouseEvent_obj::__CreateEmpty() { return new MouseEvent_obj; }

void *MouseEvent_obj::_hx_vtable = 0;

Dynamic MouseEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MouseEvent_obj > _hx_result = new MouseEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MouseEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a250147;
}

void MouseEvent_obj::set(int _type,int _x,int _y,int _x_rel,int _y_rel,int _button,Float _wheel_x,Float _wheel_y){
            	HX_STACKFRAME(&_hx_pos_a2208c019f7c5149_688_set)
HXLINE( 689)		this->type = _type;
HXLINE( 690)		this->x = _x;
HXLINE( 691)		this->y = _y;
HXLINE( 692)		this->x_rel = _x_rel;
HXLINE( 693)		this->y_rel = _y_rel;
HXLINE( 694)		this->button = _button;
HXLINE( 695)		this->wheel_x = _wheel_x;
HXLINE( 696)		this->wheel_y = _wheel_y;
            	}


HX_DEFINE_DYNAMIC_FUNC8(MouseEvent_obj,set,(void))

::String MouseEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a2208c019f7c5149_699_toString)
HXDLIN( 699)		int this1 = this->type;
HXDLIN( 699)		::String _hx_tmp;
HXDLIN( 699)		switch((int)(this1)){
            			case (int)0: {
HXDLIN( 699)				_hx_tmp = HX_("me_unknown",63,f4,26,34);
            			}
            			break;
            			case (int)1: {
HXDLIN( 699)				_hx_tmp = HX_("me_move",98,00,21,12);
            			}
            			break;
            			case (int)2: {
HXDLIN( 699)				_hx_tmp = HX_("me_down",e9,15,2e,0c);
            			}
            			break;
            			case (int)3: {
HXDLIN( 699)				_hx_tmp = HX_("me_up",22,44,b8,05);
            			}
            			break;
            			case (int)4: {
HXDLIN( 699)				_hx_tmp = HX_("me_wheel",34,ed,13,88);
            			}
            			break;
            			default:{
HXDLIN( 699)				_hx_tmp = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 699)		return ((((((((((((((((HX_("{ \"MouseEvent\":true, \"type\":\"",5a,df,b7,db) + _hx_tmp) + HX_("\", \"x\":",84,a3,34,a1)) + this->x) + HX_(", \"y\":",23,a0,5b,1b)) + this->y) + HX_(", \"button\":",78,bd,cb,8f)) + this->button) + HX_(", \"x_rel\":",bc,93,66,64)) + this->x_rel) + HX_(", \"y_rel\":",7d,0a,fc,8d)) + this->y_rel) + HX_(", \"wheel_x\":",7e,ba,be,75)) + this->wheel_x) + HX_(", \"wheel_y\":",bf,7c,bf,75)) + this->wheel_y) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MouseEvent_obj,toString,return )


MouseEvent_obj::MouseEvent_obj()
{
}

hx::Val MouseEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"x_rel") ) { return hx::Val( x_rel ); }
		if (HX_FIELD_EQ(inName,"y_rel") ) { return hx::Val( y_rel ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return hx::Val( button ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wheel_x") ) { return hx::Val( wheel_x ); }
		if (HX_FIELD_EQ(inName,"wheel_y") ) { return hx::Val( wheel_y ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MouseEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"x_rel") ) { x_rel=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y_rel") ) { y_rel=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wheel_x") ) { wheel_x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wheel_y") ) { wheel_y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MouseEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("x_rel",d2,ba,37,57));
	outFields->push(HX_("y_rel",53,4f,9e,ea));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("wheel_x",94,24,25,54));
	outFields->push(HX_("wheel_y",95,24,25,54));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo MouseEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(MouseEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,x),HX_("x",78,00,00,00)},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,y),HX_("y",79,00,00,00)},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,x_rel),HX_("x_rel",d2,ba,37,57)},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,y_rel),HX_("y_rel",53,4f,9e,ea)},
	{hx::fsInt,(int)offsetof(MouseEvent_obj,button),HX_("button",f2,61,e0,d9)},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,wheel_x),HX_("wheel_x",94,24,25,54)},
	{hx::fsFloat,(int)offsetof(MouseEvent_obj,wheel_y),HX_("wheel_y",95,24,25,54)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MouseEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String MouseEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("x_rel",d2,ba,37,57),
	HX_("y_rel",53,4f,9e,ea),
	HX_("button",f2,61,e0,d9),
	HX_("wheel_x",94,24,25,54),
	HX_("wheel_y",95,24,25,54),
	HX_("set",a2,9b,57,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class MouseEvent_obj::__mClass;

void MouseEvent_obj::__register()
{
	MouseEvent_obj _hx_dummy;
	MouseEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.MouseEvent",f5,bb,ec,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MouseEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MouseEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MouseEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MouseEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
