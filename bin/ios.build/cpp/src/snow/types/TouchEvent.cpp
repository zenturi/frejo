// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_TouchEvent
#include <snow/types/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22e9f99bc46f541a_713_new,"snow.types.TouchEvent","new",0xb703f68d,"snow.types.TouchEvent.new","snow/types/Types.hx",713,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_22e9f99bc46f541a_724_toString,"snow.types.TouchEvent","toString",0xd184275f,"snow.types.TouchEvent.toString","snow/types/Types.hx",724,0x72b41ce7)
namespace snow{
namespace types{

void TouchEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_22e9f99bc46f541a_713_new)
            	}

Dynamic TouchEvent_obj::__CreateEmpty() { return new TouchEvent_obj; }

void *TouchEvent_obj::_hx_vtable = 0;

Dynamic TouchEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchEvent_obj > _hx_result = new TouchEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TouchEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3db07d89;
}

::String TouchEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_22e9f99bc46f541a_724_toString)
HXDLIN( 724)		int this1 = this->type;
HXDLIN( 724)		::String _hx_tmp;
HXDLIN( 724)		switch((int)(this1)){
            			case (int)0: {
HXDLIN( 724)				_hx_tmp = HX_("te_unknown",7c,3b,30,76);
            			}
            			break;
            			case (int)1: {
HXDLIN( 724)				_hx_tmp = HX_("te_move",df,3f,37,35);
            			}
            			break;
            			case (int)2: {
HXDLIN( 724)				_hx_tmp = HX_("te_down",30,55,44,2f);
            			}
            			break;
            			case (int)3: {
HXDLIN( 724)				_hx_tmp = HX_("te_up",a9,53,86,0d);
            			}
            			break;
            			default:{
HXDLIN( 724)				_hx_tmp = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 724)		return ((((((((((((HX_("{ \"TouchEvent\":true, \"type\":\"",80,fb,8c,b2) + _hx_tmp) + HX_("\", \"touch_id\":",7f,8d,ba,8c)) + this->touch_id) + HX_(", \"x\":",e2,dd,5a,1b)) + this->x) + HX_(", \"y\":",23,a0,5b,1b)) + this->y) + HX_(", \"dx\":",9a,30,30,c7)) + this->dx) + HX_(", \"dy\":",db,f2,30,c7)) + this->dy) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchEvent_obj,toString,return )


TouchEvent_obj::TouchEvent_obj()
{
}

hx::Val TouchEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { return hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return hx::Val( dy ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"touch_id") ) { return hx::Val( touch_id ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TouchEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"touch_id") ) { touch_id=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TouchEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("touch_id",9b,7b,1d,00));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("dx",94,57,00,00));
	outFields->push(HX_("dy",95,57,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TouchEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TouchEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsInt,(int)offsetof(TouchEvent_obj,touch_id),HX_("touch_id",9b,7b,1d,00)},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,dx),HX_("dx",94,57,00,00)},
	{hx::fsFloat,(int)offsetof(TouchEvent_obj,dy),HX_("dy",95,57,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TouchEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String TouchEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("touch_id",9b,7b,1d,00),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("dx",94,57,00,00),
	HX_("dy",95,57,00,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class TouchEvent_obj::__mClass;

void TouchEvent_obj::__register()
{
	TouchEvent_obj _hx_dummy;
	TouchEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.TouchEvent",1b,ac,b0,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
