// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_GamepadEvent
#include <snow/types/GamepadEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a466dc0cfb2adbcf_739_new,"snow.types.GamepadEvent","new",0x2f4e916b,"snow.types.GamepadEvent.new","snow/types/Types.hx",739,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_a466dc0cfb2adbcf_774_toString,"snow.types.GamepadEvent","toString",0xc5c567c1,"snow.types.GamepadEvent.toString","snow/types/Types.hx",774,0x72b41ce7)
namespace snow{
namespace types{

void GamepadEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a466dc0cfb2adbcf_739_new)
            	}

Dynamic GamepadEvent_obj::__CreateEmpty() { return new GamepadEvent_obj; }

void *GamepadEvent_obj::_hx_vtable = 0;

Dynamic GamepadEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadEvent_obj > _hx_result = new GamepadEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GamepadEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x658a88e7;
}

::String GamepadEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a466dc0cfb2adbcf_774_toString)
HXDLIN( 774)		int this1 = this->type;
HXDLIN( 774)		::String _hx_tmp;
HXDLIN( 774)		switch((int)(this1)){
            			case (int)0: {
HXDLIN( 774)				_hx_tmp = HX_("ge_unknown",29,25,68,b2);
            			}
            			break;
            			case (int)1: {
HXDLIN( 774)				_hx_tmp = HX_("ge_axis",a2,71,b8,10);
            			}
            			break;
            			case (int)2: {
HXDLIN( 774)				_hx_tmp = HX_("ge_down",63,4d,ad,12);
            			}
            			break;
            			case (int)3: {
HXDLIN( 774)				_hx_tmp = HX_("ge_up",1c,c9,50,91);
            			}
            			break;
            			case (int)4: {
HXDLIN( 774)				_hx_tmp = HX_("ge_device",d7,33,f7,4f);
            			}
            			break;
            			default:{
HXDLIN( 774)				_hx_tmp = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 774)		::String _hx_tmp1 = ((((((((((((HX_("{ \"GamepadEvent\":true, \"type\":\"",9e,3c,47,40) + _hx_tmp) + HX_("\", \"gamepad\":",ed,fe,60,95)) + this->gamepad) + HX_(", \"axis\":",67,7a,18,14)) + this->axis) + HX_(", \"button\":",78,bd,cb,8f)) + this->button) + HX_(", \"value\":",1b,fe,18,74)) + this->value) + HX_(", \"device_id\":\"",d4,82,00,1c)) + this->device_id) + HX_("\", \"device_event\":\"",ad,10,60,82));
HXDLIN( 774)		int this2 = ( (int)(this->device_event) );
HXDLIN( 774)		::String _hx_tmp2;
HXDLIN( 774)		switch((int)(this2)){
            			case (int)0: {
HXDLIN( 774)				_hx_tmp2 = HX_("ge_unknown",29,25,68,b2);
            			}
            			break;
            			case (int)1: {
HXDLIN( 774)				_hx_tmp2 = HX_("ge_device_added",18,4b,91,ee);
            			}
            			break;
            			case (int)2: {
HXDLIN( 774)				_hx_tmp2 = HX_("ge_device_removed",f8,db,59,0c);
            			}
            			break;
            			case (int)3: {
HXDLIN( 774)				_hx_tmp2 = HX_("ge_device_remapped",4e,90,bb,ae);
            			}
            			break;
            			default:{
HXDLIN( 774)				_hx_tmp2 = (HX_("",00,00,00,00) + this2);
            			}
            		}
HXDLIN( 774)		return ((_hx_tmp1 + _hx_tmp2) + HX_("\" }",ff,e8,19,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GamepadEvent_obj,toString,return )


GamepadEvent_obj::GamepadEvent_obj()
{
}

void GamepadEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GamepadEvent);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(gamepad,"gamepad");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(device_id,"device_id");
	HX_MARK_MEMBER_NAME(device_event,"device_event");
	HX_MARK_END_CLASS();
}

void GamepadEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(gamepad,"gamepad");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(device_id,"device_id");
	HX_VISIT_MEMBER_NAME(device_event,"device_event");
}

hx::Val GamepadEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"axis") ) { return hx::Val( axis ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return hx::Val( button ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { return hx::Val( gamepad ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"device_id") ) { return hx::Val( device_id ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"device_event") ) { return hx::Val( device_event ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GamepadEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { gamepad=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"device_id") ) { device_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"device_event") ) { device_event=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GamepadEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("gamepad",a1,e0,85,89));
	outFields->push(HX_("axis",a1,1c,79,40));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("device_id",24,17,48,61));
	outFields->push(HX_("device_event",71,80,04,a6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo GamepadEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(GamepadEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsInt,(int)offsetof(GamepadEvent_obj,gamepad),HX_("gamepad",a1,e0,85,89)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(GamepadEvent_obj,axis),HX_("axis",a1,1c,79,40)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(GamepadEvent_obj,button),HX_("button",f2,61,e0,d9)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(GamepadEvent_obj,value),HX_("value",71,7f,b8,31)},
	{hx::fsString,(int)offsetof(GamepadEvent_obj,device_id),HX_("device_id",24,17,48,61)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(GamepadEvent_obj,device_event),HX_("device_event",71,80,04,a6)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GamepadEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String GamepadEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("gamepad",a1,e0,85,89),
	HX_("axis",a1,1c,79,40),
	HX_("button",f2,61,e0,d9),
	HX_("value",71,7f,b8,31),
	HX_("device_id",24,17,48,61),
	HX_("device_event",71,80,04,a6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class GamepadEvent_obj::__mClass;

void GamepadEvent_obj::__register()
{
	GamepadEvent_obj _hx_dummy;
	GamepadEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.GamepadEvent",f9,ff,e0,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GamepadEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GamepadEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
