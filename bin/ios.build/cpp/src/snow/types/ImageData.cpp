// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_types_ImageData
#include <snow/types/ImageData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d018edaf7228e0b6_159_new,"snow.types.ImageData","new",0xeecb2a57,"snow.types.ImageData.new","snow/types/Types.hx",159,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_d018edaf7228e0b6_196_destroy,"snow.types.ImageData","destroy",0xfc174e71,"snow.types.ImageData.destroy","snow/types/Types.hx",196,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_d018edaf7228e0b6_204_toString,"snow.types.ImageData","toString",0xffdaf755,"snow.types.ImageData.toString","snow/types/Types.hx",204,0x72b41ce7)
namespace snow{
namespace types{

void ImageData_obj::__construct( ::snow::Snow _app, ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_d018edaf7228e0b6_159_new)
HXLINE( 175)		this->bpp_source = 4;
HXLINE( 173)		this->bpp = 4;
HXLINE( 171)		this->height_actual = 0;
HXLINE( 169)		this->width_actual = 0;
HXLINE( 167)		this->height = 0;
HXLINE( 165)		this->width = 0;
HXLINE( 163)		this->id = HX_("ImageData",05,cb,6a,c6);
HXLINE( 181)		this->app = _app;
HXLINE( 183)		if (hx::IsNull( _options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic) )) {
HXLINE( 183)			_options->__SetField(HX_("id",db,5b,00,00),this->id,hx::paccDynamic);
            		}
HXDLIN( 183)		this->id = ( (::String)(_options->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 184)		this->width = ( (int)(_options->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXLINE( 185)		this->height = ( (int)(_options->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 186)		this->width_actual = ( (int)(_options->__Field(HX_("width_actual",e7,12,f5,de),hx::paccDynamic)) );
HXLINE( 187)		this->height_actual = ( (int)(_options->__Field(HX_("height_actual",26,2f,9e,a1),hx::paccDynamic)) );
HXLINE( 188)		this->bpp = ( (int)(_options->__Field(HX_("bpp",e2,be,4a,00),hx::paccDynamic)) );
HXLINE( 189)		this->bpp_source = ( (int)(_options->__Field(HX_("bpp_source",d8,83,da,8c),hx::paccDynamic)) );
HXLINE( 190)		if (hx::IsNull( _options->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic) )) {
HXLINE( 190)			_options->__SetField(HX_("pixels",2d,ef,a9,8c),this->pixels,hx::paccDynamic);
            		}
HXDLIN( 190)		this->pixels = ( ( ::snow::api::buffers::ArrayBufferView)(_options->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) );
HXLINE( 192)		_options = null();
            	}

Dynamic ImageData_obj::__CreateEmpty() { return new ImageData_obj; }

void *ImageData_obj::_hx_vtable = 0;

Dynamic ImageData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageData_obj > _hx_result = new ImageData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ImageData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b9e926f;
}

void ImageData_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d018edaf7228e0b6_196_destroy)
HXLINE( 198)		this->id = null();
HXLINE( 199)		this->pixels->buffer = null();
HXLINE( 200)		this->pixels = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageData_obj,destroy,(void))

::String ImageData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d018edaf7228e0b6_204_toString)
HXDLIN( 204)		return ((((((((((((((HX_("{ \"ImageData\":true, \"id\":",13,91,35,15) + this->id) + HX_(", \"width\":",f0,c3,ad,34)) + this->width) + HX_(", \"height\":",ad,8a,e4,66)) + this->height) + HX_(", \"width_actual\":",2d,6c,e5,85)) + this->width_actual) + HX_(", \"height_actual\":",10,a7,f1,e4)) + this->height_actual) + HX_(", \"bpp\":",4c,93,1e,57)) + this->bpp) + HX_(", \"bpp_source\":",de,d3,df,8f)) + this->bpp_source) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageData_obj,toString,return )


hx::ObjectPtr< ImageData_obj > ImageData_obj::__new( ::snow::Snow _app, ::Dynamic _options) {
	hx::ObjectPtr< ImageData_obj > __this = new ImageData_obj();
	__this->__construct(_app,_options);
	return __this;
}

hx::ObjectPtr< ImageData_obj > ImageData_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app, ::Dynamic _options) {
	ImageData_obj *__this = (ImageData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageData_obj), true, "snow.types.ImageData"));
	*(void **)__this = ImageData_obj::_hx_vtable;
	__this->__construct(_app,_options);
	return __this;
}

ImageData_obj::ImageData_obj()
{
}

void ImageData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageData);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(width_actual,"width_actual");
	HX_MARK_MEMBER_NAME(height_actual,"height_actual");
	HX_MARK_MEMBER_NAME(bpp,"bpp");
	HX_MARK_MEMBER_NAME(bpp_source,"bpp_source");
	HX_MARK_MEMBER_NAME(pixels,"pixels");
	HX_MARK_END_CLASS();
}

void ImageData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(width_actual,"width_actual");
	HX_VISIT_MEMBER_NAME(height_actual,"height_actual");
	HX_VISIT_MEMBER_NAME(bpp,"bpp");
	HX_VISIT_MEMBER_NAME(bpp_source,"bpp_source");
	HX_VISIT_MEMBER_NAME(pixels,"pixels");
}

hx::Val ImageData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		if (HX_FIELD_EQ(inName,"bpp") ) { return hx::Val( bpp ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"pixels") ) { return hx::Val( pixels ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bpp_source") ) { return hx::Val( bpp_source ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"width_actual") ) { return hx::Val( width_actual ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"height_actual") ) { return hx::Val( height_actual ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImageData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpp") ) { bpp=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixels") ) { pixels=inValue.Cast<  ::snow::api::buffers::ArrayBufferView >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bpp_source") ) { bpp_source=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"width_actual") ) { width_actual=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"height_actual") ) { height_actual=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("width_actual",e7,12,f5,de));
	outFields->push(HX_("height_actual",26,2f,9e,a1));
	outFields->push(HX_("bpp",e2,be,4a,00));
	outFields->push(HX_("bpp_source",d8,83,da,8c));
	outFields->push(HX_("pixels",2d,ef,a9,8c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ImageData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(ImageData_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsString,(int)offsetof(ImageData_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsInt,(int)offsetof(ImageData_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(ImageData_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsInt,(int)offsetof(ImageData_obj,width_actual),HX_("width_actual",e7,12,f5,de)},
	{hx::fsInt,(int)offsetof(ImageData_obj,height_actual),HX_("height_actual",26,2f,9e,a1)},
	{hx::fsInt,(int)offsetof(ImageData_obj,bpp),HX_("bpp",e2,be,4a,00)},
	{hx::fsInt,(int)offsetof(ImageData_obj,bpp_source),HX_("bpp_source",d8,83,da,8c)},
	{hx::fsObject /*::snow::api::buffers::ArrayBufferView*/ ,(int)offsetof(ImageData_obj,pixels),HX_("pixels",2d,ef,a9,8c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImageData_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageData_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("id",db,5b,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("width_actual",e7,12,f5,de),
	HX_("height_actual",26,2f,9e,a1),
	HX_("bpp",e2,be,4a,00),
	HX_("bpp_source",d8,83,da,8c),
	HX_("pixels",2d,ef,a9,8c),
	HX_("destroy",fa,2c,86,24),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class ImageData_obj::__mClass;

void ImageData_obj::__register()
{
	ImageData_obj _hx_dummy;
	ImageData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.ImageData",e5,b2,8b,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
