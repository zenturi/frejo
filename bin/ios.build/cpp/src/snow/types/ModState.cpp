// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_097a1ce7af24d9ae_856_new,"snow.types.ModState","new",0x9ab164a1,"snow.types.ModState.new","snow/types/Types.hx",856,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_097a1ce7af24d9ae_894_toString,"snow.types.ModState","toString",0xbb8b30cb,"snow.types.ModState.toString","snow/types/Types.hx",894,0x72b41ce7)
namespace snow{
namespace types{

void ModState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_097a1ce7af24d9ae_856_new)
HXLINE( 892)		this->meta = false;
HXLINE( 890)		this->alt = false;
HXLINE( 888)		this->shift = false;
HXLINE( 886)		this->ctrl = false;
HXLINE( 884)		this->mode = false;
HXLINE( 882)		this->caps = false;
HXLINE( 880)		this->num = false;
HXLINE( 878)		this->rmeta = false;
HXLINE( 876)		this->lmeta = false;
HXLINE( 874)		this->ralt = false;
HXLINE( 872)		this->lalt = false;
HXLINE( 870)		this->rctrl = false;
HXLINE( 868)		this->lctrl = false;
HXLINE( 866)		this->rshift = false;
HXLINE( 864)		this->lshift = false;
HXLINE( 862)		this->none = false;
            	}

Dynamic ModState_obj::__CreateEmpty() { return new ModState_obj; }

void *ModState_obj::_hx_vtable = 0;

Dynamic ModState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ModState_obj > _hx_result = new ModState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ModState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61915fe5;
}

::String ModState_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_097a1ce7af24d9ae_894_toString)
HXLINE( 896)		::String _s = HX_("{ \"ModState\":true ",6e,4f,01,a6);
HXLINE( 898)		if (this->none) {
HXLINE( 898)			return (_s + HX_(", \"none\":true }",e9,d9,b0,85));
            		}
HXLINE( 900)		if (this->lshift) {
HXLINE( 900)			_s = (_s + HX_(", \"lshift\":true",6a,96,a2,64));
            		}
HXLINE( 901)		if (this->rshift) {
HXLINE( 901)			_s = (_s + HX_(", \"rshift\":true",24,28,1f,ef));
            		}
HXLINE( 902)		if (this->lctrl) {
HXLINE( 902)			_s = (_s + HX_(", \"lctrl\":true",0f,3f,34,87));
            		}
HXLINE( 903)		if (this->rctrl) {
HXLINE( 903)			_s = (_s + HX_(", \"rctrl\":true",95,c2,6a,8c));
            		}
HXLINE( 904)		if (this->lalt) {
HXLINE( 904)			_s = (_s + HX_(", \"lalt\":true",d1,65,d6,a2));
            		}
HXLINE( 905)		if (this->ralt) {
HXLINE( 905)			_s = (_s + HX_(", \"ralt\":true",0b,35,95,24));
            		}
HXLINE( 906)		if (this->lmeta) {
HXLINE( 906)			_s = (_s + HX_(", \"lmeta\":true",a9,90,f0,56));
            		}
HXLINE( 907)		if (this->rmeta) {
HXLINE( 907)			_s = (_s + HX_(", \"rmeta\":true",2f,14,27,5c));
            		}
HXLINE( 908)		if (this->num) {
HXLINE( 908)			_s = (_s + HX_(", \"num\":true",fe,92,68,b9));
            		}
HXLINE( 909)		if (this->caps) {
HXLINE( 909)			_s = (_s + HX_(", \"caps\":true",b5,80,6c,9b));
            		}
HXLINE( 910)		if (this->mode) {
HXLINE( 910)			_s = (_s + HX_(", \"mode\":true",77,15,ff,b2));
            		}
HXLINE( 911)		if (this->ctrl) {
HXLINE( 911)			_s = (_s + HX_(", \"ctrl\":true",bf,f0,a5,92));
            		}
HXLINE( 912)		if (this->shift) {
HXLINE( 912)			_s = (_s + HX_(", \"shift\":true",ba,5e,ac,5c));
            		}
HXLINE( 913)		if (this->alt) {
HXLINE( 913)			_s = (_s + HX_(", \"alt\":true",21,7a,76,23));
            		}
HXLINE( 914)		if (this->meta) {
HXLINE( 914)			_s = (_s + HX_(", \"meta\":true",59,42,62,62));
            		}
HXLINE( 916)		_s = (_s + HX_("}",7d,00,00,00));
HXLINE( 918)		return _s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModState_obj,toString,return )


ModState_obj::ModState_obj()
{
}

hx::Val ModState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { return hx::Val( num ); }
		if (HX_FIELD_EQ(inName,"alt") ) { return hx::Val( alt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"none") ) { return hx::Val( none ); }
		if (HX_FIELD_EQ(inName,"lalt") ) { return hx::Val( lalt ); }
		if (HX_FIELD_EQ(inName,"ralt") ) { return hx::Val( ralt ); }
		if (HX_FIELD_EQ(inName,"caps") ) { return hx::Val( caps ); }
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		if (HX_FIELD_EQ(inName,"ctrl") ) { return hx::Val( ctrl ); }
		if (HX_FIELD_EQ(inName,"meta") ) { return hx::Val( meta ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lctrl") ) { return hx::Val( lctrl ); }
		if (HX_FIELD_EQ(inName,"rctrl") ) { return hx::Val( rctrl ); }
		if (HX_FIELD_EQ(inName,"lmeta") ) { return hx::Val( lmeta ); }
		if (HX_FIELD_EQ(inName,"rmeta") ) { return hx::Val( rmeta ); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lshift") ) { return hx::Val( lshift ); }
		if (HX_FIELD_EQ(inName,"rshift") ) { return hx::Val( rshift ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ModState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"num") ) { num=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alt") ) { alt=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"none") ) { none=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lalt") ) { lalt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ralt") ) { ralt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caps") ) { caps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ctrl") ) { ctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meta") ) { meta=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lctrl") ) { lctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rctrl") ) { rctrl=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lmeta") ) { lmeta=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rmeta") ) { rmeta=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shift") ) { shift=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lshift") ) { lshift=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rshift") ) { rshift=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("none",b8,12,0a,49));
	outFields->push(HX_("lshift",96,e4,ad,aa));
	outFields->push(HX_("rshift",d0,0e,d2,10));
	outFields->push(HX_("lctrl",17,2f,0f,71));
	outFields->push(HX_("rctrl",1d,aa,76,e5));
	outFields->push(HX_("lalt",3d,04,ad,47));
	outFields->push(HX_("ralt",f7,4b,a4,4b));
	outFields->push(HX_("lmeta",31,f1,9f,77));
	outFields->push(HX_("rmeta",37,6c,07,ec));
	outFields->push(HX_("num",46,de,53,00));
	outFields->push(HX_("caps",21,1c,ba,41));
	outFields->push(HX_("mode",63,d3,60,48));
	outFields->push(HX_("ctrl",ab,88,c8,41));
	outFields->push(HX_("shift",82,ec,22,7c));
	outFields->push(HX_("alt",29,f9,49,00));
	outFields->push(HX_("meta",c5,4a,59,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ModState_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(ModState_obj,none),HX_("none",b8,12,0a,49)},
	{hx::fsBool,(int)offsetof(ModState_obj,lshift),HX_("lshift",96,e4,ad,aa)},
	{hx::fsBool,(int)offsetof(ModState_obj,rshift),HX_("rshift",d0,0e,d2,10)},
	{hx::fsBool,(int)offsetof(ModState_obj,lctrl),HX_("lctrl",17,2f,0f,71)},
	{hx::fsBool,(int)offsetof(ModState_obj,rctrl),HX_("rctrl",1d,aa,76,e5)},
	{hx::fsBool,(int)offsetof(ModState_obj,lalt),HX_("lalt",3d,04,ad,47)},
	{hx::fsBool,(int)offsetof(ModState_obj,ralt),HX_("ralt",f7,4b,a4,4b)},
	{hx::fsBool,(int)offsetof(ModState_obj,lmeta),HX_("lmeta",31,f1,9f,77)},
	{hx::fsBool,(int)offsetof(ModState_obj,rmeta),HX_("rmeta",37,6c,07,ec)},
	{hx::fsBool,(int)offsetof(ModState_obj,num),HX_("num",46,de,53,00)},
	{hx::fsBool,(int)offsetof(ModState_obj,caps),HX_("caps",21,1c,ba,41)},
	{hx::fsBool,(int)offsetof(ModState_obj,mode),HX_("mode",63,d3,60,48)},
	{hx::fsBool,(int)offsetof(ModState_obj,ctrl),HX_("ctrl",ab,88,c8,41)},
	{hx::fsBool,(int)offsetof(ModState_obj,shift),HX_("shift",82,ec,22,7c)},
	{hx::fsBool,(int)offsetof(ModState_obj,alt),HX_("alt",29,f9,49,00)},
	{hx::fsBool,(int)offsetof(ModState_obj,meta),HX_("meta",c5,4a,59,48)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ModState_obj_sStaticStorageInfo = 0;
#endif

static ::String ModState_obj_sMemberFields[] = {
	HX_("none",b8,12,0a,49),
	HX_("lshift",96,e4,ad,aa),
	HX_("rshift",d0,0e,d2,10),
	HX_("lctrl",17,2f,0f,71),
	HX_("rctrl",1d,aa,76,e5),
	HX_("lalt",3d,04,ad,47),
	HX_("ralt",f7,4b,a4,4b),
	HX_("lmeta",31,f1,9f,77),
	HX_("rmeta",37,6c,07,ec),
	HX_("num",46,de,53,00),
	HX_("caps",21,1c,ba,41),
	HX_("mode",63,d3,60,48),
	HX_("ctrl",ab,88,c8,41),
	HX_("shift",82,ec,22,7c),
	HX_("alt",29,f9,49,00),
	HX_("meta",c5,4a,59,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class ModState_obj::__mClass;

void ModState_obj::__register()
{
	ModState_obj _hx_dummy;
	ModState_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.ModState",2f,80,e0,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ModState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ModState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
