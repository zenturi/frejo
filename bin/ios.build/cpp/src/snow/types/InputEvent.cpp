// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_snow_types_GamepadEvent
#include <snow/types/GamepadEvent.h>
#endif
#ifndef INCLUDED_snow_types_InputEvent
#include <snow/types/InputEvent.h>
#endif
#ifndef INCLUDED_snow_types_KeyEvent
#include <snow/types/KeyEvent.h>
#endif
#ifndef INCLUDED_snow_types_MouseEvent
#include <snow/types/MouseEvent.h>
#endif
#ifndef INCLUDED_snow_types_TextEvent
#include <snow/types/TextEvent.h>
#endif
#ifndef INCLUDED_snow_types_TouchEvent
#include <snow/types/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ea9dcc6afa5a3bc_779_new,"snow.types.InputEvent","new",0xde34e8e2,"snow.types.InputEvent.new","snow/types/Types.hx",779,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_0ea9dcc6afa5a3bc_838_toString,"snow.types.InputEvent","toString",0xf5fba0ea,"snow.types.InputEvent.toString","snow/types/Types.hx",838,0x72b41ce7)
namespace snow{
namespace types{

void InputEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0ea9dcc6afa5a3bc_779_new)
HXLINE( 786)		this->window_id = -1;
HXLINE( 784)		this->timestamp = ((Float)0.0);
            	}

Dynamic InputEvent_obj::__CreateEmpty() { return new InputEvent_obj; }

void *InputEvent_obj::_hx_vtable = 0;

Dynamic InputEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InputEvent_obj > _hx_result = new InputEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InputEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32cb4926;
}

::String InputEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0ea9dcc6afa5a3bc_838_toString)
HXLINE( 839)		int this1 = this->type;
HXDLIN( 839)		::String _s;
HXDLIN( 839)		switch((int)(this1)){
            			case (int)0: {
HXLINE( 839)				_s = HX_("ie_unknown",e7,14,fd,32);
            			}
            			break;
            			case (int)1: {
HXLINE( 839)				_s = HX_("ie_key",7c,48,0e,62);
            			}
            			break;
            			case (int)2: {
HXLINE( 839)				_s = HX_("ie_text",30,0f,64,70);
            			}
            			break;
            			case (int)3: {
HXLINE( 839)				_s = HX_("ie_mouse",42,06,f5,e5);
            			}
            			break;
            			case (int)4: {
HXLINE( 839)				_s = HX_("ie_touch",dc,07,c3,ed);
            			}
            			break;
            			case (int)5: {
HXLINE( 839)				_s = HX_("ie_gamepad",fe,d1,07,db);
            			}
            			break;
            			case (int)6: {
HXLINE( 839)				_s = HX_("ie_joystick",bf,20,23,9c);
            			}
            			break;
            			default:{
HXLINE( 839)				_s = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 839)		::String _s1 = ((HX_("{ \"InputEvent\":true, \"type\":\"",55,99,4a,01) + _s) + HX_("\"",22,00,00,00));
HXLINE( 841)		if (hx::IsNotNull( this->key )) {
HXLINE( 841)			_s1 = (_s1 + (HX_(", \"key\":",49,47,7b,7e) + ::Std_obj::string(this->key)));
            		}
HXLINE( 842)		if (hx::IsNotNull( this->text )) {
HXLINE( 842)			_s1 = (_s1 + (HX_(", \"text\":",73,45,2e,c6) + ::Std_obj::string(this->text)));
            		}
HXLINE( 843)		if (hx::IsNotNull( this->mouse )) {
HXLINE( 843)			_s1 = (_s1 + (HX_(", \"mouse\":",cf,a9,1f,c4) + ::Std_obj::string(this->mouse)));
            		}
HXLINE( 844)		if (hx::IsNotNull( this->touch )) {
HXLINE( 844)			_s1 = (_s1 + (HX_(", \"touch\":",e9,c5,a4,dc) + ::Std_obj::string(this->touch)));
            		}
HXLINE( 845)		if (hx::IsNotNull( this->gamepad )) {
HXLINE( 845)			_s1 = (_s1 + (HX_(", \"gamepad\":",cb,53,d0,51) + ::Std_obj::string(this->gamepad)));
            		}
HXLINE( 847)		_s1 = (_s1 + ((((HX_("\"window\":",ea,7f,dd,81) + this->window_id) + HX_(", \"time\":",d3,dc,77,0c)) + this->timestamp) + HX_(" }",5d,1c,00,00)));
HXLINE( 849)		return _s1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputEvent_obj,toString,return )


hx::ObjectPtr< InputEvent_obj > InputEvent_obj::__new() {
	hx::ObjectPtr< InputEvent_obj > __this = new InputEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< InputEvent_obj > InputEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	InputEvent_obj *__this = (InputEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InputEvent_obj), true, "snow.types.InputEvent"));
	*(void **)__this = InputEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

InputEvent_obj::InputEvent_obj()
{
}

void InputEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InputEvent);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(timestamp,"timestamp");
	HX_MARK_MEMBER_NAME(window_id,"window_id");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(mouse,"mouse");
	HX_MARK_MEMBER_NAME(touch,"touch");
	HX_MARK_MEMBER_NAME(gamepad,"gamepad");
	HX_MARK_END_CLASS();
}

void InputEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(timestamp,"timestamp");
	HX_VISIT_MEMBER_NAME(window_id,"window_id");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(mouse,"mouse");
	HX_VISIT_MEMBER_NAME(touch,"touch");
	HX_VISIT_MEMBER_NAME(gamepad,"gamepad");
}

hx::Val InputEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { return hx::Val( mouse ); }
		if (HX_FIELD_EQ(inName,"touch") ) { return hx::Val( touch ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { return hx::Val( gamepad ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { return hx::Val( timestamp ); }
		if (HX_FIELD_EQ(inName,"window_id") ) { return hx::Val( window_id ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InputEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast<  ::snow::types::KeyEvent >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::snow::types::TextEvent >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mouse") ) { mouse=inValue.Cast<  ::snow::types::MouseEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touch") ) { touch=inValue.Cast<  ::snow::types::TouchEvent >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { gamepad=inValue.Cast<  ::snow::types::GamepadEvent >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timestamp") ) { timestamp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"window_id") ) { window_id=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InputEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("timestamp",d6,d4,ce,a5));
	outFields->push(HX_("window_id",0a,f4,3c,96));
	outFields->push(HX_("key",9f,89,51,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("mouse",25,16,65,0c));
	outFields->push(HX_("touch",bf,17,33,14));
	outFields->push(HX_("gamepad",a1,e0,85,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InputEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(InputEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsFloat,(int)offsetof(InputEvent_obj,timestamp),HX_("timestamp",d6,d4,ce,a5)},
	{hx::fsInt,(int)offsetof(InputEvent_obj,window_id),HX_("window_id",0a,f4,3c,96)},
	{hx::fsObject /*::snow::types::KeyEvent*/ ,(int)offsetof(InputEvent_obj,key),HX_("key",9f,89,51,00)},
	{hx::fsObject /*::snow::types::TextEvent*/ ,(int)offsetof(InputEvent_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsObject /*::snow::types::MouseEvent*/ ,(int)offsetof(InputEvent_obj,mouse),HX_("mouse",25,16,65,0c)},
	{hx::fsObject /*::snow::types::TouchEvent*/ ,(int)offsetof(InputEvent_obj,touch),HX_("touch",bf,17,33,14)},
	{hx::fsObject /*::snow::types::GamepadEvent*/ ,(int)offsetof(InputEvent_obj,gamepad),HX_("gamepad",a1,e0,85,89)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InputEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String InputEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("timestamp",d6,d4,ce,a5),
	HX_("window_id",0a,f4,3c,96),
	HX_("key",9f,89,51,00),
	HX_("text",ad,cc,f9,4c),
	HX_("mouse",25,16,65,0c),
	HX_("touch",bf,17,33,14),
	HX_("gamepad",a1,e0,85,89),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class InputEvent_obj::__mClass;

void InputEvent_obj::__register()
{
	InputEvent_obj _hx_dummy;
	InputEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.InputEvent",f0,8f,5a,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InputEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InputEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
