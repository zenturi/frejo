// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_snow_types_KeyEvent
#include <snow/types/KeyEvent.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_72a40c520091a669_639_new,"snow.types.KeyEvent","new",0xa103b8ad,"snow.types.KeyEvent.new","snow/types/Types.hx",639,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_72a40c520091a669_649_toString,"snow.types.KeyEvent","toString",0x5290b13f,"snow.types.KeyEvent.toString","snow/types/Types.hx",649,0x72b41ce7)
namespace snow{
namespace types{

void KeyEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_72a40c520091a669_639_new)
            	}

Dynamic KeyEvent_obj::__CreateEmpty() { return new KeyEvent_obj; }

void *KeyEvent_obj::_hx_vtable = 0;

Dynamic KeyEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyEvent_obj > _hx_result = new KeyEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5522cb0d;
}

::String KeyEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_72a40c520091a669_649_toString)
HXDLIN( 649)		int this1 = ( (int)(this->type) );
HXDLIN( 649)		::String _hx_tmp;
HXDLIN( 649)		switch((int)(this1)){
            			case (int)0: {
HXDLIN( 649)				_hx_tmp = HX_("ke_unknown",a5,04,92,b3);
            			}
            			break;
            			case (int)1: {
HXDLIN( 649)				_hx_tmp = HX_("ke_down",67,28,03,b9);
            			}
            			break;
            			case (int)2: {
HXDLIN( 649)				_hx_tmp = HX_("ke_up",20,1b,eb,de);
            			}
            			break;
            			default:{
HXDLIN( 649)				_hx_tmp = (HX_("",00,00,00,00) + this1);
            			}
            		}
HXDLIN( 649)		::String _hx_tmp1 = ((((((HX_("{ \"KeyEvent\":true, \"type\":\"",60,6c,66,47) + _hx_tmp) + HX_("\", \"keycode\":",58,15,d1,5a)) + this->keycode) + HX_(", \"scancode\":",30,72,e8,92)) + this->scancode) + HX_(", \"repeat\":",21,df,ee,43));
HXDLIN( 649)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->repeat)) + HX_(", \"mod\":",2c,a3,d4,ab));
HXDLIN( 649)		return ((_hx_tmp2 + ::Std_obj::string(this->mod)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyEvent_obj,toString,return )


hx::ObjectPtr< KeyEvent_obj > KeyEvent_obj::__new() {
	hx::ObjectPtr< KeyEvent_obj > __this = new KeyEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< KeyEvent_obj > KeyEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	KeyEvent_obj *__this = (KeyEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(KeyEvent_obj), true, "snow.types.KeyEvent"));
	*(void **)__this = KeyEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

KeyEvent_obj::KeyEvent_obj()
{
}

void KeyEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyEvent);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(keycode,"keycode");
	HX_MARK_MEMBER_NAME(scancode,"scancode");
	HX_MARK_MEMBER_NAME(repeat,"repeat");
	HX_MARK_MEMBER_NAME(mod,"mod");
	HX_MARK_END_CLASS();
}

void KeyEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(keycode,"keycode");
	HX_VISIT_MEMBER_NAME(scancode,"scancode");
	HX_VISIT_MEMBER_NAME(repeat,"repeat");
	HX_VISIT_MEMBER_NAME(mod,"mod");
}

hx::Val KeyEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mod") ) { return hx::Val( mod ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return hx::Val( repeat ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keycode") ) { return hx::Val( keycode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scancode") ) { return hx::Val( scancode ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val KeyEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mod") ) { mod=inValue.Cast<  ::snow::types::ModState >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { repeat=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keycode") ) { keycode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scancode") ) { scancode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("keycode",4c,f6,c4,b0));
	outFields->push(HX_("scancode",2a,b1,ec,26));
	outFields->push(HX_("repeat",5b,97,7c,06));
	outFields->push(HX_("mod",c2,16,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo KeyEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(KeyEvent_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(KeyEvent_obj,keycode),HX_("keycode",4c,f6,c4,b0)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(KeyEvent_obj,scancode),HX_("scancode",2a,b1,ec,26)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(KeyEvent_obj,repeat),HX_("repeat",5b,97,7c,06)},
	{hx::fsObject /*::snow::types::ModState*/ ,(int)offsetof(KeyEvent_obj,mod),HX_("mod",c2,16,53,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *KeyEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyEvent_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("keycode",4c,f6,c4,b0),
	HX_("scancode",2a,b1,ec,26),
	HX_("repeat",5b,97,7c,06),
	HX_("mod",c2,16,53,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class KeyEvent_obj::__mClass;

void KeyEvent_obj::__register()
{
	KeyEvent_obj _hx_dummy;
	KeyEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types.KeyEvent",3b,de,dc,f6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KeyEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KeyEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace types
