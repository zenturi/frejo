// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_types__Types_GamepadEventType_Impl_
#include <snow/types/_Types/GamepadEventType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1014_toString,"snow.types._Types.GamepadEventType_Impl_","toString",0x42a317b3,"snow.types._Types.GamepadEventType_Impl_.toString","snow/types/Types.hx",1014,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1003_boot,"snow.types._Types.GamepadEventType_Impl_","boot",0x472ffbb9,"snow.types._Types.GamepadEventType_Impl_.boot","snow/types/Types.hx",1003,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1005_boot,"snow.types._Types.GamepadEventType_Impl_","boot",0x472ffbb9,"snow.types._Types.GamepadEventType_Impl_.boot","snow/types/Types.hx",1005,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1007_boot,"snow.types._Types.GamepadEventType_Impl_","boot",0x472ffbb9,"snow.types._Types.GamepadEventType_Impl_.boot","snow/types/Types.hx",1007,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1009_boot,"snow.types._Types.GamepadEventType_Impl_","boot",0x472ffbb9,"snow.types._Types.GamepadEventType_Impl_.boot","snow/types/Types.hx",1009,0x72b41ce7)
HX_LOCAL_STACK_FRAME(_hx_pos_ec9a15cba4df8444_1011_boot,"snow.types._Types.GamepadEventType_Impl_","boot",0x472ffbb9,"snow.types._Types.GamepadEventType_Impl_.boot","snow/types/Types.hx",1011,0x72b41ce7)
namespace snow{
namespace types{
namespace _Types{

void GamepadEventType_Impl__obj::__construct() { }

Dynamic GamepadEventType_Impl__obj::__CreateEmpty() { return new GamepadEventType_Impl__obj; }

void *GamepadEventType_Impl__obj::_hx_vtable = 0;

Dynamic GamepadEventType_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadEventType_Impl__obj > _hx_result = new GamepadEventType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GamepadEventType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c24aedf;
}

int GamepadEventType_Impl__obj::ge_unknown;

int GamepadEventType_Impl__obj::ge_axis;

int GamepadEventType_Impl__obj::ge_down;

int GamepadEventType_Impl__obj::ge_up;

int GamepadEventType_Impl__obj::ge_device;

::String GamepadEventType_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1014_toString)
HXDLIN(1014)		switch((int)(this1)){
            			case (int)0: {
HXLINE(1015)				return HX_("ge_unknown",29,25,68,b2);
            			}
            			break;
            			case (int)1: {
HXLINE(1016)				return HX_("ge_axis",a2,71,b8,10);
            			}
            			break;
            			case (int)2: {
HXLINE(1017)				return HX_("ge_down",63,4d,ad,12);
            			}
            			break;
            			case (int)3: {
HXLINE(1018)				return HX_("ge_up",1c,c9,50,91);
            			}
            			break;
            			case (int)4: {
HXLINE(1019)				return HX_("ge_device",d7,33,f7,4f);
            			}
            			break;
            			default:{
HXLINE(1020)				return (HX_("",00,00,00,00) + this1);
            			}
            		}
HXLINE(1014)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GamepadEventType_Impl__obj,toString,return )


GamepadEventType_Impl__obj::GamepadEventType_Impl__obj()
{
}

bool GamepadEventType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *GamepadEventType_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo GamepadEventType_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &GamepadEventType_Impl__obj::ge_unknown,HX_("ge_unknown",29,25,68,b2)},
	{hx::fsInt,(void *) &GamepadEventType_Impl__obj::ge_axis,HX_("ge_axis",a2,71,b8,10)},
	{hx::fsInt,(void *) &GamepadEventType_Impl__obj::ge_down,HX_("ge_down",63,4d,ad,12)},
	{hx::fsInt,(void *) &GamepadEventType_Impl__obj::ge_up,HX_("ge_up",1c,c9,50,91)},
	{hx::fsInt,(void *) &GamepadEventType_Impl__obj::ge_device,HX_("ge_device",d7,33,f7,4f)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GamepadEventType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GamepadEventType_Impl__obj::ge_unknown,"ge_unknown");
	HX_MARK_MEMBER_NAME(GamepadEventType_Impl__obj::ge_axis,"ge_axis");
	HX_MARK_MEMBER_NAME(GamepadEventType_Impl__obj::ge_down,"ge_down");
	HX_MARK_MEMBER_NAME(GamepadEventType_Impl__obj::ge_up,"ge_up");
	HX_MARK_MEMBER_NAME(GamepadEventType_Impl__obj::ge_device,"ge_device");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GamepadEventType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GamepadEventType_Impl__obj::ge_unknown,"ge_unknown");
	HX_VISIT_MEMBER_NAME(GamepadEventType_Impl__obj::ge_axis,"ge_axis");
	HX_VISIT_MEMBER_NAME(GamepadEventType_Impl__obj::ge_down,"ge_down");
	HX_VISIT_MEMBER_NAME(GamepadEventType_Impl__obj::ge_up,"ge_up");
	HX_VISIT_MEMBER_NAME(GamepadEventType_Impl__obj::ge_device,"ge_device");
};

#endif

hx::Class GamepadEventType_Impl__obj::__mClass;

static ::String GamepadEventType_Impl__obj_sStaticFields[] = {
	HX_("ge_unknown",29,25,68,b2),
	HX_("ge_axis",a2,71,b8,10),
	HX_("ge_down",63,4d,ad,12),
	HX_("ge_up",1c,c9,50,91),
	HX_("ge_device",d7,33,f7,4f),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void GamepadEventType_Impl__obj::__register()
{
	GamepadEventType_Impl__obj _hx_dummy;
	GamepadEventType_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.types._Types.GamepadEventType_Impl_",47,16,01,10);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GamepadEventType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GamepadEventType_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GamepadEventType_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GamepadEventType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GamepadEventType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadEventType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadEventType_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GamepadEventType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1003_boot)
HXDLIN(1003)		ge_unknown = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1005_boot)
HXDLIN(1005)		ge_axis = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1007_boot)
HXDLIN(1007)		ge_down = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1009_boot)
HXDLIN(1009)		ge_up = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec9a15cba4df8444_1011_boot)
HXDLIN(1011)		ge_device = 4;
            	}
}

} // end namespace snow
} // end namespace types
} // end namespace _Types
