// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_frejo_app_Application
#include <frejo/app/Application.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_systems_input_Input
#include <snow/systems/input/Input.h>
#endif
#ifndef INCLUDED_snow_types_GamepadEvent
#include <snow/types/GamepadEvent.h>
#endif
#ifndef INCLUDED_snow_types_InputEvent
#include <snow/types/InputEvent.h>
#endif
#ifndef INCLUDED_snow_types_KeyEvent
#include <snow/types/KeyEvent.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif
#ifndef INCLUDED_snow_types_MouseEvent
#include <snow/types/MouseEvent.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif
#ifndef INCLUDED_snow_types_TextEvent
#include <snow/types/TextEvent.h>
#endif
#ifndef INCLUDED_snow_types_TouchEvent
#include <snow/types/TouchEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f93f5881806d28d4_11_new,"snow.systems.input.Input","new",0x974ccfc3,"snow.systems.input.Input.new","snow/systems/input/Input.hx",11,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_79_shutdown,"snow.systems.input.Input","shutdown",0x276b5653,"snow.systems.input.Input.shutdown","snow/systems/input/Input.hx",79,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_90_keypressed,"snow.systems.input.Input","keypressed",0xf1544de0,"snow.systems.input.Input.keypressed","snow/systems/input/Input.hx",90,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_95_keyreleased,"snow.systems.input.Input","keyreleased",0x3f45e3bf,"snow.systems.input.Input.keyreleased","snow/systems/input/Input.hx",95,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_100_keydown,"snow.systems.input.Input","keydown",0x52fe2a64,"snow.systems.input.Input.keydown","snow/systems/input/Input.hx",100,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_105_scanpressed,"snow.systems.input.Input","scanpressed",0x55aec928,"snow.systems.input.Input.scanpressed","snow/systems/input/Input.hx",105,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_110_scanreleased,"snow.systems.input.Input","scanreleased",0xaa174777,"snow.systems.input.Input.scanreleased","snow/systems/input/Input.hx",110,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_115_scandown,"snow.systems.input.Input","scandown",0xe3f5521c,"snow.systems.input.Input.scandown","snow/systems/input/Input.hx",115,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_122_mousepressed,"snow.systems.input.Input","mousepressed",0xa276775a,"snow.systems.input.Input.mousepressed","snow/systems/input/Input.hx",122,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_127_mousereleased,"snow.systems.input.Input","mousereleased",0x8c080505,"snow.systems.input.Input.mousereleased","snow/systems/input/Input.hx",127,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_132_mousedown,"snow.systems.input.Input","mousedown",0x1af8b0aa,"snow.systems.input.Input.mousedown","snow/systems/input/Input.hx",132,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_138_gamepadpressed,"snow.systems.input.Input","gamepadpressed",0xaed77d9e,"snow.systems.input.Input.gamepadpressed","snow/systems/input/Input.hx",138,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_146_gamepadreleased,"snow.systems.input.Input","gamepadreleased",0x548c7a41,"snow.systems.input.Input.gamepadreleased","snow/systems/input/Input.hx",146,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_154_gamepaddown,"snow.systems.input.Input","gamepaddown",0x41d2d7e6,"snow.systems.input.Input.gamepaddown","snow/systems/input/Input.hx",154,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_162_gamepadaxis,"snow.systems.input.Input","gamepadaxis",0x3fddfc25,"snow.systems.input.Input.gamepadaxis","snow/systems/input/Input.hx",162,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_177_dispatch_key_down_event,"snow.systems.input.Input","dispatch_key_down_event",0x6350b525,"snow.systems.input.Input.dispatch_key_down_event","snow/systems/input/Input.hx",177,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_203_dispatch_key_up_event,"snow.systems.input.Input","dispatch_key_up_event",0x220e19de,"snow.systems.input.Input.dispatch_key_up_event","snow/systems/input/Input.hx",203,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_228_dispatch_text_event,"snow.systems.input.Input","dispatch_text_event",0xa5cbb5d0,"snow.systems.input.Input.dispatch_text_event","snow/systems/input/Input.hx",228,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_240_dispatch_mouse_move_event,"snow.systems.input.Input","dispatch_mouse_move_event",0xa3c0344e,"snow.systems.input.Input.dispatch_mouse_move_event","snow/systems/input/Input.hx",240,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_251_dispatch_mouse_down_event,"snow.systems.input.Input","dispatch_mouse_down_event",0x90959c5f,"snow.systems.input.Input.dispatch_mouse_down_event","snow/systems/input/Input.hx",251,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_267_dispatch_mouse_up_event,"snow.systems.input.Input","dispatch_mouse_up_event",0x1e8cde98,"snow.systems.input.Input.dispatch_mouse_up_event","snow/systems/input/Input.hx",267,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_284_dispatch_mouse_wheel_event,"snow.systems.input.Input","dispatch_mouse_wheel_event",0x60e548d4,"snow.systems.input.Input.dispatch_mouse_wheel_event","snow/systems/input/Input.hx",284,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_295_dispatch_touch_down_event,"snow.systems.input.Input","dispatch_touch_down_event",0x6c1d2d05,"snow.systems.input.Input.dispatch_touch_down_event","snow/systems/input/Input.hx",295,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_311_dispatch_touch_up_event,"snow.systems.input.Input","dispatch_touch_up_event",0xa442d9be,"snow.systems.input.Input.dispatch_touch_up_event","snow/systems/input/Input.hx",311,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_326_dispatch_touch_move_event,"snow.systems.input.Input","dispatch_touch_move_event",0x7f47c4f4,"snow.systems.input.Input.dispatch_touch_move_event","snow/systems/input/Input.hx",326,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_337_dispatch_gamepad_axis_event,"snow.systems.input.Input","dispatch_gamepad_axis_event",0x06ce9ae2,"snow.systems.input.Input.dispatch_gamepad_axis_event","snow/systems/input/Input.hx",337,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_353_dispatch_gamepad_button_down_event,"snow.systems.input.Input","dispatch_gamepad_button_down_event",0xe2ec5a44,"snow.systems.input.Input.dispatch_gamepad_button_down_event","snow/systems/input/Input.hx",353,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_372_dispatch_gamepad_button_up_event,"snow.systems.input.Input","dispatch_gamepad_button_up_event",0x420fe93d,"snow.systems.input.Input.dispatch_gamepad_button_up_event","snow/systems/input/Input.hx",372,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_391_dispatch_gamepad_device_event,"snow.systems.input.Input","dispatch_gamepad_device_event",0xbebe1617,"snow.systems.input.Input.dispatch_gamepad_device_event","snow/systems/input/Input.hx",391,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_406_onevent,"snow.systems.input.Input","onevent",0x1a64e37e,"snow.systems.input.Input.onevent","snow/systems/input/Input.hx",406,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_418__update_mousestate,"snow.systems.input.Input","_update_mousestate",0x351f4840,"snow.systems.input.Input._update_mousestate","snow/systems/input/Input.hx",418,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_443__update_gamepadstate,"snow.systems.input.Input","_update_gamepadstate",0x8faa8144,"snow.systems.input.Input._update_gamepadstate","snow/systems/input/Input.hx",443,0x9abd6a90)
HX_LOCAL_STACK_FRAME(_hx_pos_f93f5881806d28d4_472__update_keystate,"snow.systems.input.Input","_update_keystate",0x728fb586,"snow.systems.input.Input._update_keystate","snow/systems/input/Input.hx",472,0x9abd6a90)
namespace snow{
namespace systems{
namespace input{

void Input_obj::__construct( ::snow::Snow _app){
            	HX_GC_STACKFRAME(&_hx_pos_f93f5881806d28d4_11_new)
HXLINE( 555)		this->touch_count = 0;
HXLINE(  17)		this->gamepad_init_count = 16;
HXLINE(  32)		this->app = _app;
HXLINE(  33)		this->event =  ::snow::types::InputEvent_obj::__alloc( HX_CTX );
HXLINE(  34)		this->key_event =  ::snow::types::KeyEvent_obj::__alloc( HX_CTX );
HXLINE(  35)		this->text_event =  ::snow::types::TextEvent_obj::__alloc( HX_CTX );
HXLINE(  36)		this->mouse_event =  ::snow::types::MouseEvent_obj::__alloc( HX_CTX );
HXLINE(  37)		this->touch_event =  ::snow::types::TouchEvent_obj::__alloc( HX_CTX );
HXLINE(  38)		this->gamepad_event =  ::snow::types::GamepadEvent_obj::__alloc( HX_CTX );
HXLINE(  39)		this->mod_state =  ::snow::types::ModState_obj::__alloc( HX_CTX );
HXLINE(  40)		this->mod_state->none = true;
HXLINE(  44)		this->key_code_pressed =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  45)		this->key_code_down =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  46)		this->key_code_released =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  48)		this->scan_code_pressed =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  49)		this->scan_code_down =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  50)		this->scan_code_released =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  54)		this->mouse_button_pressed =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  55)		this->mouse_button_down =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  56)		this->mouse_button_released =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  60)		this->gamepad_button_pressed =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  61)		this->gamepad_button_down =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->gamepad_button_released =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  63)		this->gamepad_axis_values =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  65)		{
HXLINE(  65)			int _g1 = 0;
HXDLIN(  65)			int _g = this->gamepad_init_count;
HXDLIN(  65)			while((_g1 < _g)){
HXLINE(  65)				_g1 = (_g1 + 1);
HXDLIN(  65)				int i = (_g1 - 1);
HXLINE(  66)				{
HXLINE(  66)					::Dynamic this1 = this->gamepad_button_pressed;
HXDLIN(  66)					( ( ::haxe::ds::IntMap)(this1) )->set(i, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            				}
HXLINE(  67)				{
HXLINE(  67)					::Dynamic this2 = this->gamepad_button_down;
HXDLIN(  67)					( ( ::haxe::ds::IntMap)(this2) )->set(i, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            				}
HXLINE(  68)				{
HXLINE(  68)					::Dynamic this3 = this->gamepad_button_released;
HXDLIN(  68)					( ( ::haxe::ds::IntMap)(this3) )->set(i, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            				}
HXLINE(  69)				{
HXLINE(  69)					::Dynamic this4 = this->gamepad_axis_values;
HXDLIN(  69)					( ( ::haxe::ds::IntMap)(this4) )->set(i, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            				}
            			}
            		}
HXLINE(  74)		this->touches_down =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1c7c8bfd;
}

void Input_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_79_shutdown)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,shutdown,(void))

bool Input_obj::keypressed(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_90_keypressed)
HXDLIN(  90)		return this->key_code_pressed->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keypressed,return )

bool Input_obj::keyreleased(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_95_keyreleased)
HXDLIN(  95)		return this->key_code_released->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyreleased,return )

bool Input_obj::keydown(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_100_keydown)
HXDLIN( 100)		return this->key_code_down->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keydown,return )

bool Input_obj::scanpressed(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_105_scanpressed)
HXDLIN( 105)		return this->scan_code_pressed->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scanpressed,return )

bool Input_obj::scanreleased(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_110_scanreleased)
HXDLIN( 110)		return this->scan_code_released->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scanreleased,return )

bool Input_obj::scandown(int _code){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_115_scandown)
HXDLIN( 115)		return this->scan_code_down->exists(_code);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,scandown,return )

bool Input_obj::mousepressed(int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_122_mousepressed)
HXDLIN( 122)		return this->mouse_button_pressed->exists(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousepressed,return )

bool Input_obj::mousereleased(int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_127_mousereleased)
HXDLIN( 127)		return this->mouse_button_released->exists(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousereleased,return )

bool Input_obj::mousedown(int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_132_mousedown)
HXDLIN( 132)		return this->mouse_button_down->exists(_button);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mousedown,return )

bool Input_obj::gamepadpressed(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_138_gamepadpressed)
HXLINE( 140)		 ::haxe::ds::IntMap _gamepad_state = ( ( ::haxe::ds::IntMap)(this->gamepad_button_pressed->get(_gamepad)) );
HXLINE( 141)		if (hx::IsNotNull( _gamepad_state )) {
HXLINE( 141)			return _gamepad_state->exists(_button);
            		}
            		else {
HXLINE( 141)			return false;
            		}
HXDLIN( 141)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadpressed,return )

bool Input_obj::gamepadreleased(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_146_gamepadreleased)
HXLINE( 148)		 ::haxe::ds::IntMap _gamepad_state = ( ( ::haxe::ds::IntMap)(this->gamepad_button_released->get(_gamepad)) );
HXLINE( 149)		if (hx::IsNotNull( _gamepad_state )) {
HXLINE( 149)			return _gamepad_state->exists(_button);
            		}
            		else {
HXLINE( 149)			return false;
            		}
HXDLIN( 149)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadreleased,return )

bool Input_obj::gamepaddown(int _gamepad,int _button){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_154_gamepaddown)
HXLINE( 156)		 ::haxe::ds::IntMap _gamepad_state = ( ( ::haxe::ds::IntMap)(this->gamepad_button_down->get(_gamepad)) );
HXLINE( 157)		if (hx::IsNotNull( _gamepad_state )) {
HXLINE( 157)			return _gamepad_state->exists(_button);
            		}
            		else {
HXLINE( 157)			return false;
            		}
HXDLIN( 157)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepaddown,return )

Float Input_obj::gamepadaxis(int _gamepad,int _axis){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_162_gamepadaxis)
HXLINE( 164)		 ::haxe::ds::IntMap _gamepad_state = ( ( ::haxe::ds::IntMap)(this->gamepad_axis_values->get(_gamepad)) );
HXLINE( 165)		if (hx::IsNotNull( _gamepad_state )) {
HXLINE( 166)			if (_gamepad_state->exists(_axis)) {
HXLINE( 167)				return ( (Float)(_gamepad_state->get(_axis)) );
            			}
            		}
HXLINE( 171)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Input_obj,gamepadaxis,return )

void Input_obj::dispatch_key_down_event(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_177_dispatch_key_down_event)
HXLINE( 181)		if (!(repeat)) {
HXLINE( 183)			this->key_code_pressed->set(keycode,false);
HXLINE( 185)			this->key_code_down->set(keycode,true);
HXLINE( 187)			this->scan_code_pressed->set(scancode,false);
HXLINE( 189)			this->scan_code_down->set(scancode,true);
            		}
HXLINE( 193)		{
HXLINE( 193)			 ::snow::types::KeyEvent _this = this->key_event;
HXDLIN( 193)			_this->type = 1;
HXDLIN( 193)			_this->keycode = keycode;
HXDLIN( 193)			_this->scancode = scancode;
HXDLIN( 193)			_this->repeat = repeat;
HXDLIN( 193)			_this->mod = mod;
            		}
HXLINE( 194)		{
HXLINE( 194)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 194)			{
HXLINE( 194)				_this1->type = 1;
HXDLIN( 194)				_this1->key = null();
HXDLIN( 194)				_this1->text = null();
HXDLIN( 194)				_this1->mouse = null();
HXDLIN( 194)				_this1->touch = null();
HXDLIN( 194)				_this1->gamepad = null();
HXDLIN( 194)				_this1->window_id = window_id;
HXDLIN( 194)				_this1->timestamp = timestamp;
            			}
HXDLIN( 194)			_this1->key = this->key_event;
            		}
HXLINE( 195)		this->app->dispatch_input_event(this->event);
HXLINE( 198)		this->app->host->onkeydown(keycode,scancode,repeat,mod,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_key_down_event,(void))

void Input_obj::dispatch_key_up_event(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_203_dispatch_key_up_event)
HXLINE( 207)		this->key_code_released->set(keycode,false);
HXLINE( 209)		this->key_code_down->remove(keycode);
HXLINE( 212)		this->scan_code_released->set(scancode,false);
HXLINE( 214)		this->scan_code_down->remove(scancode);
HXLINE( 218)		{
HXLINE( 218)			 ::snow::types::KeyEvent _this = this->key_event;
HXDLIN( 218)			_this->type = 2;
HXDLIN( 218)			_this->keycode = keycode;
HXDLIN( 218)			_this->scancode = scancode;
HXDLIN( 218)			_this->repeat = repeat;
HXDLIN( 218)			_this->mod = mod;
            		}
HXLINE( 219)		{
HXLINE( 219)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 219)			{
HXLINE( 219)				_this1->type = 1;
HXDLIN( 219)				_this1->key = null();
HXDLIN( 219)				_this1->text = null();
HXDLIN( 219)				_this1->mouse = null();
HXDLIN( 219)				_this1->touch = null();
HXDLIN( 219)				_this1->gamepad = null();
HXDLIN( 219)				_this1->window_id = window_id;
HXDLIN( 219)				_this1->timestamp = timestamp;
            			}
HXDLIN( 219)			_this1->key = this->key_event;
            		}
HXLINE( 220)		this->app->dispatch_input_event(this->event);
HXLINE( 223)		this->app->host->onkeyup(keycode,scancode,repeat,mod,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_key_up_event,(void))

void Input_obj::dispatch_text_event(::String text,int start,int length,int type,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_228_dispatch_text_event)
HXLINE( 230)		{
HXLINE( 230)			 ::snow::types::TextEvent _this = this->text_event;
HXDLIN( 230)			_this->type = type;
HXDLIN( 230)			_this->text = text;
HXDLIN( 230)			_this->start = start;
HXDLIN( 230)			_this->length = length;
            		}
HXLINE( 231)		{
HXLINE( 231)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 231)			{
HXLINE( 231)				_this1->type = 2;
HXDLIN( 231)				_this1->key = null();
HXDLIN( 231)				_this1->text = null();
HXDLIN( 231)				_this1->mouse = null();
HXDLIN( 231)				_this1->touch = null();
HXDLIN( 231)				_this1->gamepad = null();
HXDLIN( 231)				_this1->window_id = window_id;
HXDLIN( 231)				_this1->timestamp = timestamp;
            			}
HXDLIN( 231)			_this1->text = this->text_event;
            		}
HXLINE( 232)		this->app->dispatch_input_event(this->event);
HXLINE( 234)		this->app->host->ontextinput(text,start,length,type,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_text_event,(void))

void Input_obj::dispatch_mouse_move_event(int x,int y,int xrel,int yrel,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_240_dispatch_mouse_move_event)
HXLINE( 242)		{
HXLINE( 242)			 ::snow::types::MouseEvent _this = this->mouse_event;
HXDLIN( 242)			_this->type = 1;
HXDLIN( 242)			_this->x = x;
HXDLIN( 242)			_this->y = y;
HXDLIN( 242)			_this->x_rel = xrel;
HXDLIN( 242)			_this->y_rel = yrel;
HXDLIN( 242)			_this->button = 0;
HXDLIN( 242)			_this->wheel_x = ( (Float)(0) );
HXDLIN( 242)			_this->wheel_y = ( (Float)(0) );
            		}
HXLINE( 243)		{
HXLINE( 243)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 243)			{
HXLINE( 243)				_this1->type = 3;
HXDLIN( 243)				_this1->key = null();
HXDLIN( 243)				_this1->text = null();
HXDLIN( 243)				_this1->mouse = null();
HXDLIN( 243)				_this1->touch = null();
HXDLIN( 243)				_this1->gamepad = null();
HXDLIN( 243)				_this1->window_id = window_id;
HXDLIN( 243)				_this1->timestamp = timestamp;
            			}
HXDLIN( 243)			_this1->mouse = this->mouse_event;
            		}
HXLINE( 244)		this->app->dispatch_input_event(this->event);
HXLINE( 246)		this->app->host->onmousemove(x,y,xrel,yrel,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_mouse_move_event,(void))

void Input_obj::dispatch_mouse_down_event(int x,int y,int button,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_251_dispatch_mouse_down_event)
HXLINE( 254)		this->mouse_button_pressed->set(button,false);
HXLINE( 256)		this->mouse_button_down->set(button,true);
HXLINE( 258)		{
HXLINE( 258)			 ::snow::types::MouseEvent _this = this->mouse_event;
HXDLIN( 258)			_this->type = 2;
HXDLIN( 258)			_this->x = x;
HXDLIN( 258)			_this->y = y;
HXDLIN( 258)			_this->x_rel = 0;
HXDLIN( 258)			_this->y_rel = 0;
HXDLIN( 258)			_this->button = button;
HXDLIN( 258)			_this->wheel_x = ( (Float)(0) );
HXDLIN( 258)			_this->wheel_y = ( (Float)(0) );
            		}
HXLINE( 259)		{
HXLINE( 259)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 259)			{
HXLINE( 259)				_this1->type = 3;
HXDLIN( 259)				_this1->key = null();
HXDLIN( 259)				_this1->text = null();
HXDLIN( 259)				_this1->mouse = null();
HXDLIN( 259)				_this1->touch = null();
HXDLIN( 259)				_this1->gamepad = null();
HXDLIN( 259)				_this1->window_id = window_id;
HXDLIN( 259)				_this1->timestamp = timestamp;
            			}
HXDLIN( 259)			_this1->mouse = this->mouse_event;
            		}
HXLINE( 260)		this->app->dispatch_input_event(this->event);
HXLINE( 262)		this->app->host->onmousedown(x,y,button,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,dispatch_mouse_down_event,(void))

void Input_obj::dispatch_mouse_up_event(int x,int y,int button,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_267_dispatch_mouse_up_event)
HXLINE( 270)		this->mouse_button_released->set(button,false);
HXLINE( 272)		this->mouse_button_down->remove(button);
HXLINE( 274)		{
HXLINE( 274)			 ::snow::types::MouseEvent _this = this->mouse_event;
HXDLIN( 274)			_this->type = 3;
HXDLIN( 274)			_this->x = x;
HXDLIN( 274)			_this->y = y;
HXDLIN( 274)			_this->x_rel = 0;
HXDLIN( 274)			_this->y_rel = 0;
HXDLIN( 274)			_this->button = button;
HXDLIN( 274)			_this->wheel_x = ( (Float)(0) );
HXDLIN( 274)			_this->wheel_y = ( (Float)(0) );
            		}
HXLINE( 275)		{
HXLINE( 275)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 275)			{
HXLINE( 275)				_this1->type = 3;
HXDLIN( 275)				_this1->key = null();
HXDLIN( 275)				_this1->text = null();
HXDLIN( 275)				_this1->mouse = null();
HXDLIN( 275)				_this1->touch = null();
HXDLIN( 275)				_this1->gamepad = null();
HXDLIN( 275)				_this1->window_id = window_id;
HXDLIN( 275)				_this1->timestamp = timestamp;
            			}
HXDLIN( 275)			_this1->mouse = this->mouse_event;
            		}
HXLINE( 276)		this->app->dispatch_input_event(this->event);
HXLINE( 279)		this->app->host->onmouseup(x,y,button,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Input_obj,dispatch_mouse_up_event,(void))

void Input_obj::dispatch_mouse_wheel_event(Float x,Float y,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_284_dispatch_mouse_wheel_event)
HXLINE( 286)		{
HXLINE( 286)			 ::snow::types::MouseEvent _this = this->mouse_event;
HXDLIN( 286)			_this->type = 4;
HXDLIN( 286)			_this->x = 0;
HXDLIN( 286)			_this->y = 0;
HXDLIN( 286)			_this->x_rel = 0;
HXDLIN( 286)			_this->y_rel = 0;
HXDLIN( 286)			_this->button = 0;
HXDLIN( 286)			_this->wheel_x = x;
HXDLIN( 286)			_this->wheel_y = y;
            		}
HXLINE( 287)		{
HXLINE( 287)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 287)			{
HXLINE( 287)				_this1->type = 3;
HXDLIN( 287)				_this1->key = null();
HXDLIN( 287)				_this1->text = null();
HXDLIN( 287)				_this1->mouse = null();
HXDLIN( 287)				_this1->touch = null();
HXDLIN( 287)				_this1->gamepad = null();
HXDLIN( 287)				_this1->window_id = window_id;
HXDLIN( 287)				_this1->timestamp = timestamp;
            			}
HXDLIN( 287)			_this1->mouse = this->mouse_event;
            		}
HXLINE( 288)		this->app->dispatch_input_event(this->event);
HXLINE( 290)		this->app->host->onmousewheel(x,y,timestamp,window_id);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,dispatch_mouse_wheel_event,(void))

void Input_obj::dispatch_touch_down_event(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_295_dispatch_touch_down_event)
HXLINE( 297)		if (!(this->touches_down->exists(touch_id))) {
HXLINE( 298)			this->touch_count++;
HXLINE( 299)			this->touches_down->set(touch_id,true);
            		}
HXLINE( 302)		{
HXLINE( 302)			 ::snow::types::TouchEvent _this = this->touch_event;
HXDLIN( 302)			_this->type = 2;
HXDLIN( 302)			_this->touch_id = touch_id;
HXDLIN( 302)			_this->x = x;
HXDLIN( 302)			_this->y = y;
HXDLIN( 302)			_this->dx = dx;
HXDLIN( 302)			_this->dy = dy;
            		}
HXLINE( 303)		{
HXLINE( 303)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 303)			{
HXLINE( 303)				_this1->type = 4;
HXDLIN( 303)				_this1->key = null();
HXDLIN( 303)				_this1->text = null();
HXDLIN( 303)				_this1->mouse = null();
HXDLIN( 303)				_this1->touch = null();
HXDLIN( 303)				_this1->gamepad = null();
HXDLIN( 303)				_this1->window_id = 0;
HXDLIN( 303)				_this1->timestamp = timestamp;
            			}
HXDLIN( 303)			_this1->touch = this->touch_event;
            		}
HXLINE( 304)		this->app->dispatch_input_event(this->event);
HXLINE( 306)		this->app->host->ontouchdown(x,y,dx,dy,touch_id,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_touch_down_event,(void))

void Input_obj::dispatch_touch_up_event(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_311_dispatch_touch_up_event)
HXLINE( 313)		{
HXLINE( 313)			 ::snow::types::TouchEvent _this = this->touch_event;
HXDLIN( 313)			_this->type = 3;
HXDLIN( 313)			_this->touch_id = touch_id;
HXDLIN( 313)			_this->x = x;
HXDLIN( 313)			_this->y = y;
HXDLIN( 313)			_this->dx = dx;
HXDLIN( 313)			_this->dy = dy;
            		}
HXLINE( 314)		{
HXLINE( 314)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 314)			{
HXLINE( 314)				_this1->type = 4;
HXDLIN( 314)				_this1->key = null();
HXDLIN( 314)				_this1->text = null();
HXDLIN( 314)				_this1->mouse = null();
HXDLIN( 314)				_this1->touch = null();
HXDLIN( 314)				_this1->gamepad = null();
HXDLIN( 314)				_this1->window_id = 0;
HXDLIN( 314)				_this1->timestamp = timestamp;
            			}
HXDLIN( 314)			_this1->touch = this->touch_event;
            		}
HXLINE( 315)		this->app->dispatch_input_event(this->event);
HXLINE( 317)		this->app->host->ontouchup(x,y,dx,dy,touch_id,timestamp);
HXLINE( 319)		if (this->touches_down->remove(touch_id)) {
HXLINE( 320)			this->touch_count--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_touch_up_event,(void))

void Input_obj::dispatch_touch_move_event(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_326_dispatch_touch_move_event)
HXLINE( 328)		{
HXLINE( 328)			 ::snow::types::TouchEvent _this = this->touch_event;
HXDLIN( 328)			_this->type = 1;
HXDLIN( 328)			_this->touch_id = touch_id;
HXDLIN( 328)			_this->x = x;
HXDLIN( 328)			_this->y = y;
HXDLIN( 328)			_this->dx = dx;
HXDLIN( 328)			_this->dy = dy;
            		}
HXLINE( 329)		{
HXLINE( 329)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 329)			{
HXLINE( 329)				_this1->type = 4;
HXDLIN( 329)				_this1->key = null();
HXDLIN( 329)				_this1->text = null();
HXDLIN( 329)				_this1->mouse = null();
HXDLIN( 329)				_this1->touch = null();
HXDLIN( 329)				_this1->gamepad = null();
HXDLIN( 329)				_this1->window_id = 0;
HXDLIN( 329)				_this1->timestamp = timestamp;
            			}
HXDLIN( 329)			_this1->touch = this->touch_event;
            		}
HXLINE( 330)		this->app->dispatch_input_event(this->event);
HXLINE( 332)		this->app->host->ontouchmove(x,y,dx,dy,touch_id,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Input_obj,dispatch_touch_move_event,(void))

void Input_obj::dispatch_gamepad_axis_event(int gamepad,int axis,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_337_dispatch_gamepad_axis_event)
HXLINE( 339)		if (!(this->gamepad_axis_values->exists(gamepad))) {
HXLINE( 339)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("gamepad_axis_values.exists(gamepad)",e8,5d,72,49) + ((HX_(" ( ",18,6b,18,00) + ((HX_("gamepad with id ",2a,6c,0a,11) + gamepad) + HX_(" not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?",b4,c1,81,a4))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 342)		( ( ::haxe::ds::IntMap)(this->gamepad_axis_values->get(gamepad)) )->set(axis,value);
HXLINE( 344)		{
HXLINE( 344)			 ::snow::types::GamepadEvent _this = this->gamepad_event;
HXDLIN( 344)			_this->button = null();
HXDLIN( 344)			_this->device_id = null();
HXDLIN( 344)			_this->device_event = null();
HXDLIN( 344)			_this->axis = axis;
HXDLIN( 344)			_this->value = value;
HXDLIN( 344)			_this->type = 1;
HXDLIN( 344)			_this->gamepad = gamepad;
            		}
HXLINE( 345)		{
HXLINE( 345)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 345)			{
HXLINE( 345)				_this1->type = 5;
HXDLIN( 345)				_this1->key = null();
HXDLIN( 345)				_this1->text = null();
HXDLIN( 345)				_this1->mouse = null();
HXDLIN( 345)				_this1->touch = null();
HXDLIN( 345)				_this1->gamepad = null();
HXDLIN( 345)				_this1->window_id = 0;
HXDLIN( 345)				_this1->timestamp = timestamp;
            			}
HXDLIN( 345)			_this1->gamepad = this->gamepad_event;
            		}
HXLINE( 346)		this->app->dispatch_input_event(this->event);
HXLINE( 348)		this->app->host->ongamepadaxis(gamepad,axis,value,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,dispatch_gamepad_axis_event,(void))

void Input_obj::dispatch_gamepad_button_down_event(int gamepad,int button,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_353_dispatch_gamepad_button_down_event)
HXLINE( 355)		if (!(this->gamepad_button_pressed->exists(gamepad))) {
HXLINE( 355)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("gamepad_button_pressed.exists(gamepad)",f9,a9,bc,27) + ((HX_(" ( ",18,6b,18,00) + ((HX_("gamepad with id ",2a,6c,0a,11) + gamepad) + HX_(" not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?",b4,c1,81,a4))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 356)		if (!(this->gamepad_button_down->exists(gamepad))) {
HXLINE( 356)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("gamepad_button_down.exists(gamepad)",f7,d1,d9,6e) + ((HX_(" ( ",18,6b,18,00) + ((HX_("gamepad with id ",2a,6c,0a,11) + gamepad) + HX_(" not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?",b4,c1,81,a4))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 359)		( ( ::haxe::ds::IntMap)(this->gamepad_button_pressed->get(gamepad)) )->set(button,false);
HXLINE( 361)		( ( ::haxe::ds::IntMap)(this->gamepad_button_down->get(gamepad)) )->set(button,true);
HXLINE( 363)		{
HXLINE( 363)			 ::snow::types::GamepadEvent _this = this->gamepad_event;
HXDLIN( 363)			_this->axis = null();
HXDLIN( 363)			_this->device_id = null();
HXDLIN( 363)			_this->device_event = null();
HXDLIN( 363)			_this->type = 2;
HXDLIN( 363)			_this->value = value;
HXDLIN( 363)			_this->button = button;
HXDLIN( 363)			_this->gamepad = gamepad;
            		}
HXLINE( 364)		{
HXLINE( 364)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 364)			{
HXLINE( 364)				_this1->type = 5;
HXDLIN( 364)				_this1->key = null();
HXDLIN( 364)				_this1->text = null();
HXDLIN( 364)				_this1->mouse = null();
HXDLIN( 364)				_this1->touch = null();
HXDLIN( 364)				_this1->gamepad = null();
HXDLIN( 364)				_this1->window_id = 0;
HXDLIN( 364)				_this1->timestamp = timestamp;
            			}
HXDLIN( 364)			_this1->gamepad = this->gamepad_event;
            		}
HXLINE( 365)		this->app->dispatch_input_event(this->event);
HXLINE( 367)		this->app->host->ongamepaddown(gamepad,button,value,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,dispatch_gamepad_button_down_event,(void))

void Input_obj::dispatch_gamepad_button_up_event(int gamepad,int button,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_372_dispatch_gamepad_button_up_event)
HXLINE( 374)		if (!(this->gamepad_button_released->exists(gamepad))) {
HXLINE( 374)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("gamepad_button_released.exists(gamepad)",d2,1b,24,2b) + ((HX_(" ( ",18,6b,18,00) + ((HX_("gamepad with id ",2a,6c,0a,11) + gamepad) + HX_(" not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?",b4,c1,81,a4))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 375)		if (!(this->gamepad_button_down->exists(gamepad))) {
HXLINE( 375)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::assertion((HX_("gamepad_button_down.exists(gamepad)",f7,d1,d9,6e) + ((HX_(" ( ",18,6b,18,00) + ((HX_("gamepad with id ",2a,6c,0a,11) + gamepad) + HX_(" not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?",b4,c1,81,a4))) + HX_(" )",09,1c,00,00)))));
            		}
HXLINE( 378)		( ( ::haxe::ds::IntMap)(this->gamepad_button_released->get(gamepad)) )->set(button,false);
HXLINE( 380)		( ( ::haxe::ds::IntMap)(this->gamepad_button_down->get(gamepad)) )->remove(button);
HXLINE( 382)		{
HXLINE( 382)			 ::snow::types::GamepadEvent _this = this->gamepad_event;
HXDLIN( 382)			_this->axis = null();
HXDLIN( 382)			_this->device_id = null();
HXDLIN( 382)			_this->device_event = null();
HXDLIN( 382)			_this->type = 3;
HXDLIN( 382)			_this->value = value;
HXDLIN( 382)			_this->button = button;
HXDLIN( 382)			_this->gamepad = gamepad;
            		}
HXLINE( 383)		{
HXLINE( 383)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 383)			{
HXLINE( 383)				_this1->type = 5;
HXDLIN( 383)				_this1->key = null();
HXDLIN( 383)				_this1->text = null();
HXDLIN( 383)				_this1->mouse = null();
HXDLIN( 383)				_this1->touch = null();
HXDLIN( 383)				_this1->gamepad = null();
HXDLIN( 383)				_this1->window_id = 0;
HXDLIN( 383)				_this1->timestamp = timestamp;
            			}
HXDLIN( 383)			_this1->gamepad = this->gamepad_event;
            		}
HXLINE( 384)		this->app->dispatch_input_event(this->event);
HXLINE( 386)		this->app->host->ongamepadup(gamepad,button,value,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,dispatch_gamepad_button_up_event,(void))

void Input_obj::dispatch_gamepad_device_event(int gamepad,::String id,int type,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_391_dispatch_gamepad_device_event)
HXLINE( 393)		{
HXLINE( 393)			 ::snow::types::GamepadEvent _this = this->gamepad_event;
HXDLIN( 393)			_this->axis = null();
HXDLIN( 393)			_this->value = null();
HXDLIN( 393)			_this->button = null();
HXDLIN( 393)			_this->device_id = id;
HXDLIN( 393)			_this->device_event = type;
HXDLIN( 393)			_this->gamepad = gamepad;
HXDLIN( 393)			_this->type = 4;
            		}
HXLINE( 394)		{
HXLINE( 394)			 ::snow::types::InputEvent _this1 = this->event;
HXDLIN( 394)			{
HXLINE( 394)				_this1->type = 5;
HXDLIN( 394)				_this1->key = null();
HXDLIN( 394)				_this1->text = null();
HXDLIN( 394)				_this1->mouse = null();
HXDLIN( 394)				_this1->touch = null();
HXDLIN( 394)				_this1->gamepad = null();
HXDLIN( 394)				_this1->window_id = 0;
HXDLIN( 394)				_this1->timestamp = timestamp;
            			}
HXDLIN( 394)			_this1->gamepad = this->gamepad_event;
            		}
HXLINE( 395)		this->app->dispatch_input_event(this->event);
HXLINE( 397)		this->app->host->ongamepaddevice(gamepad,id,type,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,dispatch_gamepad_device_event,(void))

void Input_obj::onevent( ::snow::types::SystemEvent _event){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_406_onevent)
HXDLIN( 406)		if ((_event->type == 3)) {
HXLINE( 407)			this->_update_keystate();
HXLINE( 408)			this->_update_gamepadstate();
HXLINE( 409)			this->_update_mousestate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onevent,(void))

void Input_obj::_update_mousestate(){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_418__update_mousestate)
HXLINE( 420)		{
HXLINE( 420)			 ::Dynamic _code = this->mouse_button_pressed->keys();
HXDLIN( 420)			while(( (bool)(_code->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 420)				int _code1 = ( (int)(_code->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 422)				if (this->mouse_button_pressed->get_bool(_code1)) {
HXLINE( 423)					this->mouse_button_pressed->remove(_code1);
            				}
            				else {
HXLINE( 425)					this->mouse_button_pressed->set(_code1,true);
            				}
            			}
            		}
HXLINE( 430)		{
HXLINE( 430)			 ::Dynamic _code2 = this->mouse_button_released->keys();
HXDLIN( 430)			while(( (bool)(_code2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 430)				int _code3 = ( (int)(_code2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 432)				if (this->mouse_button_released->get_bool(_code3)) {
HXLINE( 433)					this->mouse_button_released->remove(_code3);
            				}
            				else {
HXLINE( 435)					this->mouse_button_released->set(_code3,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,_update_mousestate,(void))

void Input_obj::_update_gamepadstate(){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_443__update_gamepadstate)
HXLINE( 445)		{
HXLINE( 445)			 ::Dynamic _gamepad_pressed = this->gamepad_button_pressed->iterator();
HXDLIN( 445)			while(( (bool)(_gamepad_pressed->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 445)				 ::haxe::ds::IntMap _gamepad_pressed1 = ( ( ::haxe::ds::IntMap)(_gamepad_pressed->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 446)				{
HXLINE( 446)					 ::Dynamic _button = _gamepad_pressed1->keys();
HXDLIN( 446)					while(( (bool)(_button->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 446)						int _button1 = ( (int)(_button->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 448)						if (( (bool)(_gamepad_pressed1->get(_button1)) )) {
HXLINE( 449)							_gamepad_pressed1->remove(_button1);
            						}
            						else {
HXLINE( 451)							_gamepad_pressed1->set(_button1,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 457)		{
HXLINE( 457)			 ::Dynamic _gamepad_released = this->gamepad_button_released->iterator();
HXDLIN( 457)			while(( (bool)(_gamepad_released->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 457)				 ::haxe::ds::IntMap _gamepad_released1 = ( ( ::haxe::ds::IntMap)(_gamepad_released->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 458)				{
HXLINE( 458)					 ::Dynamic _button2 = _gamepad_released1->keys();
HXDLIN( 458)					while(( (bool)(_button2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 458)						int _button3 = ( (int)(_button2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 460)						if (( (bool)(_gamepad_released1->get(_button3)) )) {
HXLINE( 461)							_gamepad_released1->remove(_button3);
            						}
            						else {
HXLINE( 463)							_gamepad_released1->set(_button3,true);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,_update_gamepadstate,(void))

void Input_obj::_update_keystate(){
            	HX_STACKFRAME(&_hx_pos_f93f5881806d28d4_472__update_keystate)
HXLINE( 477)		{
HXLINE( 477)			 ::Dynamic _code = this->key_code_pressed->keys();
HXDLIN( 477)			while(( (bool)(_code->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 477)				int _code1 = ( (int)(_code->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 479)				if (this->key_code_pressed->get_bool(_code1)) {
HXLINE( 480)					this->key_code_pressed->remove(_code1);
            				}
            				else {
HXLINE( 482)					this->key_code_pressed->set(_code1,true);
            				}
            			}
            		}
HXLINE( 490)		{
HXLINE( 490)			 ::Dynamic _code2 = this->key_code_released->keys();
HXDLIN( 490)			while(( (bool)(_code2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 490)				int _code3 = ( (int)(_code2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 492)				if (this->key_code_released->get_bool(_code3)) {
HXLINE( 493)					this->key_code_released->remove(_code3);
            				}
            				else {
HXLINE( 495)					this->key_code_released->set(_code3,true);
            				}
            			}
            		}
HXLINE( 505)		{
HXLINE( 505)			 ::Dynamic _code4 = this->scan_code_pressed->keys();
HXDLIN( 505)			while(( (bool)(_code4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 505)				int _code5 = ( (int)(_code4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 507)				if (this->scan_code_pressed->get_bool(_code5)) {
HXLINE( 508)					this->scan_code_pressed->remove(_code5);
            				}
            				else {
HXLINE( 510)					this->scan_code_pressed->set(_code5,true);
            				}
            			}
            		}
HXLINE( 518)		{
HXLINE( 518)			 ::Dynamic _code6 = this->scan_code_released->keys();
HXDLIN( 518)			while(( (bool)(_code6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 518)				int _code7 = ( (int)(_code6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 520)				if (this->scan_code_released->get_bool(_code7)) {
HXLINE( 521)					this->scan_code_released->remove(_code7);
            				}
            				else {
HXLINE( 523)					this->scan_code_released->set(_code7,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,_update_keystate,(void))


hx::ObjectPtr< Input_obj > Input_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Input_obj > __this = new Input_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Input_obj > Input_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), true, "snow.systems.input.Input"));
	*(void **)__this = Input_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Input_obj::Input_obj()
{
}

void Input_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Input);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(gamepad_init_count,"gamepad_init_count");
	HX_MARK_MEMBER_NAME(event,"event");
	HX_MARK_MEMBER_NAME(key_event,"key_event");
	HX_MARK_MEMBER_NAME(text_event,"text_event");
	HX_MARK_MEMBER_NAME(mouse_event,"mouse_event");
	HX_MARK_MEMBER_NAME(touch_event,"touch_event");
	HX_MARK_MEMBER_NAME(gamepad_event,"gamepad_event");
	HX_MARK_MEMBER_NAME(mod_state,"mod_state");
	HX_MARK_MEMBER_NAME(key_code_down,"key_code_down");
	HX_MARK_MEMBER_NAME(key_code_pressed,"key_code_pressed");
	HX_MARK_MEMBER_NAME(key_code_released,"key_code_released");
	HX_MARK_MEMBER_NAME(scan_code_down,"scan_code_down");
	HX_MARK_MEMBER_NAME(scan_code_pressed,"scan_code_pressed");
	HX_MARK_MEMBER_NAME(scan_code_released,"scan_code_released");
	HX_MARK_MEMBER_NAME(mouse_button_down,"mouse_button_down");
	HX_MARK_MEMBER_NAME(mouse_button_pressed,"mouse_button_pressed");
	HX_MARK_MEMBER_NAME(mouse_button_released,"mouse_button_released");
	HX_MARK_MEMBER_NAME(gamepad_button_down,"gamepad_button_down");
	HX_MARK_MEMBER_NAME(gamepad_button_pressed,"gamepad_button_pressed");
	HX_MARK_MEMBER_NAME(gamepad_button_released,"gamepad_button_released");
	HX_MARK_MEMBER_NAME(gamepad_axis_values,"gamepad_axis_values");
	HX_MARK_MEMBER_NAME(touch_count,"touch_count");
	HX_MARK_MEMBER_NAME(touches_down,"touches_down");
	HX_MARK_END_CLASS();
}

void Input_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(gamepad_init_count,"gamepad_init_count");
	HX_VISIT_MEMBER_NAME(event,"event");
	HX_VISIT_MEMBER_NAME(key_event,"key_event");
	HX_VISIT_MEMBER_NAME(text_event,"text_event");
	HX_VISIT_MEMBER_NAME(mouse_event,"mouse_event");
	HX_VISIT_MEMBER_NAME(touch_event,"touch_event");
	HX_VISIT_MEMBER_NAME(gamepad_event,"gamepad_event");
	HX_VISIT_MEMBER_NAME(mod_state,"mod_state");
	HX_VISIT_MEMBER_NAME(key_code_down,"key_code_down");
	HX_VISIT_MEMBER_NAME(key_code_pressed,"key_code_pressed");
	HX_VISIT_MEMBER_NAME(key_code_released,"key_code_released");
	HX_VISIT_MEMBER_NAME(scan_code_down,"scan_code_down");
	HX_VISIT_MEMBER_NAME(scan_code_pressed,"scan_code_pressed");
	HX_VISIT_MEMBER_NAME(scan_code_released,"scan_code_released");
	HX_VISIT_MEMBER_NAME(mouse_button_down,"mouse_button_down");
	HX_VISIT_MEMBER_NAME(mouse_button_pressed,"mouse_button_pressed");
	HX_VISIT_MEMBER_NAME(mouse_button_released,"mouse_button_released");
	HX_VISIT_MEMBER_NAME(gamepad_button_down,"gamepad_button_down");
	HX_VISIT_MEMBER_NAME(gamepad_button_pressed,"gamepad_button_pressed");
	HX_VISIT_MEMBER_NAME(gamepad_button_released,"gamepad_button_released");
	HX_VISIT_MEMBER_NAME(gamepad_axis_values,"gamepad_axis_values");
	HX_VISIT_MEMBER_NAME(touch_count,"touch_count");
	HX_VISIT_MEMBER_NAME(touches_down,"touches_down");
}

hx::Val Input_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { return hx::Val( event ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keydown") ) { return hx::Val( keydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"scandown") ) { return hx::Val( scandown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"key_event") ) { return hx::Val( key_event ); }
		if (HX_FIELD_EQ(inName,"mod_state") ) { return hx::Val( mod_state ); }
		if (HX_FIELD_EQ(inName,"mousedown") ) { return hx::Val( mousedown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_event") ) { return hx::Val( text_event ); }
		if (HX_FIELD_EQ(inName,"keypressed") ) { return hx::Val( keypressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouse_event") ) { return hx::Val( mouse_event ); }
		if (HX_FIELD_EQ(inName,"touch_event") ) { return hx::Val( touch_event ); }
		if (HX_FIELD_EQ(inName,"keyreleased") ) { return hx::Val( keyreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"scanpressed") ) { return hx::Val( scanpressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepaddown") ) { return hx::Val( gamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepadaxis") ) { return hx::Val( gamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"touch_count") ) { return hx::Val( touch_count ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scanreleased") ) { return hx::Val( scanreleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"mousepressed") ) { return hx::Val( mousepressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"touches_down") ) { return hx::Val( touches_down ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepad_event") ) { return hx::Val( gamepad_event ); }
		if (HX_FIELD_EQ(inName,"mousereleased") ) { return hx::Val( mousereleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"key_code_down") ) { return hx::Val( key_code_down ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"gamepadpressed") ) { return hx::Val( gamepadpressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"scan_code_down") ) { return hx::Val( scan_code_down ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"gamepadreleased") ) { return hx::Val( gamepadreleased_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_update_keystate") ) { return hx::Val( _update_keystate_dyn() ); }
		if (HX_FIELD_EQ(inName,"key_code_pressed") ) { return hx::Val( key_code_pressed ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"key_code_released") ) { return hx::Val( key_code_released ); }
		if (HX_FIELD_EQ(inName,"scan_code_pressed") ) { return hx::Val( scan_code_pressed ); }
		if (HX_FIELD_EQ(inName,"mouse_button_down") ) { return hx::Val( mouse_button_down ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepad_init_count") ) { return hx::Val( gamepad_init_count ); }
		if (HX_FIELD_EQ(inName,"_update_mousestate") ) { return hx::Val( _update_mousestate_dyn() ); }
		if (HX_FIELD_EQ(inName,"scan_code_released") ) { return hx::Val( scan_code_released ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"dispatch_text_event") ) { return hx::Val( dispatch_text_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepad_button_down") ) { return hx::Val( gamepad_button_down ); }
		if (HX_FIELD_EQ(inName,"gamepad_axis_values") ) { return hx::Val( gamepad_axis_values ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_update_gamepadstate") ) { return hx::Val( _update_gamepadstate_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouse_button_pressed") ) { return hx::Val( mouse_button_pressed ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"dispatch_key_up_event") ) { return hx::Val( dispatch_key_up_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouse_button_released") ) { return hx::Val( mouse_button_released ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gamepad_button_pressed") ) { return hx::Val( gamepad_button_pressed ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"dispatch_key_down_event") ) { return hx::Val( dispatch_key_down_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch_mouse_up_event") ) { return hx::Val( dispatch_mouse_up_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch_touch_up_event") ) { return hx::Val( dispatch_touch_up_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"gamepad_button_released") ) { return hx::Val( gamepad_button_released ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"dispatch_mouse_move_event") ) { return hx::Val( dispatch_mouse_move_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch_mouse_down_event") ) { return hx::Val( dispatch_mouse_down_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch_touch_down_event") ) { return hx::Val( dispatch_touch_down_event_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatch_touch_move_event") ) { return hx::Val( dispatch_touch_move_event_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"dispatch_mouse_wheel_event") ) { return hx::Val( dispatch_mouse_wheel_event_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"dispatch_gamepad_axis_event") ) { return hx::Val( dispatch_gamepad_axis_event_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"dispatch_gamepad_device_event") ) { return hx::Val( dispatch_gamepad_device_event_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"dispatch_gamepad_button_up_event") ) { return hx::Val( dispatch_gamepad_button_up_event_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"dispatch_gamepad_button_down_event") ) { return hx::Val( dispatch_gamepad_button_down_event_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Input_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { event=inValue.Cast<  ::snow::types::InputEvent >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"key_event") ) { key_event=inValue.Cast<  ::snow::types::KeyEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mod_state") ) { mod_state=inValue.Cast<  ::snow::types::ModState >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"text_event") ) { text_event=inValue.Cast<  ::snow::types::TextEvent >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouse_event") ) { mouse_event=inValue.Cast<  ::snow::types::MouseEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touch_event") ) { touch_event=inValue.Cast<  ::snow::types::TouchEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touch_count") ) { touch_count=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touches_down") ) { touches_down=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepad_event") ) { gamepad_event=inValue.Cast<  ::snow::types::GamepadEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"key_code_down") ) { key_code_down=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"scan_code_down") ) { scan_code_down=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"key_code_pressed") ) { key_code_pressed=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"key_code_released") ) { key_code_released=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scan_code_pressed") ) { scan_code_pressed=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouse_button_down") ) { mouse_button_down=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepad_init_count") ) { gamepad_init_count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scan_code_released") ) { scan_code_released=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"gamepad_button_down") ) { gamepad_button_down=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamepad_axis_values") ) { gamepad_axis_values=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"mouse_button_pressed") ) { mouse_button_pressed=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"mouse_button_released") ) { mouse_button_released=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gamepad_button_pressed") ) { gamepad_button_pressed=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"gamepad_button_released") ) { gamepad_button_released=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Input_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("gamepad_init_count",3e,51,6f,cc));
	outFields->push(HX_("event",1a,c8,c4,75));
	outFields->push(HX_("key_event",3a,1a,1f,d5));
	outFields->push(HX_("text_event",c8,1b,08,74));
	outFields->push(HX_("mouse_event",40,cf,9f,32));
	outFields->push(HX_("touch_event",5a,00,4e,a2));
	outFields->push(HX_("gamepad_event",bc,9e,d9,5b));
	outFields->push(HX_("mod_state",94,51,fe,5b));
	outFields->push(HX_("key_code_down",14,e2,e5,52));
	outFields->push(HX_("key_code_pressed",30,84,2e,06));
	outFields->push(HX_("key_code_released",6f,33,5b,69));
	outFields->push(HX_("scan_code_down",72,17,32,08));
	outFields->push(HX_("scan_code_pressed",92,7d,d3,ee));
	outFields->push(HX_("scan_code_released",cd,6f,10,11));
	outFields->push(HX_("mouse_button_down",b5,4c,86,45));
	outFields->push(HX_("mouse_button_pressed",2f,b4,97,f2));
	outFields->push(HX_("mouse_button_released",90,02,fc,58));
	outFields->push(HX_("gamepad_button_down",31,e1,ea,9e));
	outFields->push(HX_("gamepad_button_pressed",33,15,3e,b5));
	outFields->push(HX_("gamepad_button_released",0c,85,ea,e7));
	outFields->push(HX_("gamepad_axis_values",22,bb,f8,da));
	outFields->push(HX_("touch_count",0f,7d,ec,76));
	outFields->push(HX_("touches_down",34,5b,92,b5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Input_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Input_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsInt,(int)offsetof(Input_obj,gamepad_init_count),HX_("gamepad_init_count",3e,51,6f,cc)},
	{hx::fsObject /*::snow::types::InputEvent*/ ,(int)offsetof(Input_obj,event),HX_("event",1a,c8,c4,75)},
	{hx::fsObject /*::snow::types::KeyEvent*/ ,(int)offsetof(Input_obj,key_event),HX_("key_event",3a,1a,1f,d5)},
	{hx::fsObject /*::snow::types::TextEvent*/ ,(int)offsetof(Input_obj,text_event),HX_("text_event",c8,1b,08,74)},
	{hx::fsObject /*::snow::types::MouseEvent*/ ,(int)offsetof(Input_obj,mouse_event),HX_("mouse_event",40,cf,9f,32)},
	{hx::fsObject /*::snow::types::TouchEvent*/ ,(int)offsetof(Input_obj,touch_event),HX_("touch_event",5a,00,4e,a2)},
	{hx::fsObject /*::snow::types::GamepadEvent*/ ,(int)offsetof(Input_obj,gamepad_event),HX_("gamepad_event",bc,9e,d9,5b)},
	{hx::fsObject /*::snow::types::ModState*/ ,(int)offsetof(Input_obj,mod_state),HX_("mod_state",94,51,fe,5b)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,key_code_down),HX_("key_code_down",14,e2,e5,52)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,key_code_pressed),HX_("key_code_pressed",30,84,2e,06)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,key_code_released),HX_("key_code_released",6f,33,5b,69)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,scan_code_down),HX_("scan_code_down",72,17,32,08)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,scan_code_pressed),HX_("scan_code_pressed",92,7d,d3,ee)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,scan_code_released),HX_("scan_code_released",cd,6f,10,11)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,mouse_button_down),HX_("mouse_button_down",b5,4c,86,45)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,mouse_button_pressed),HX_("mouse_button_pressed",2f,b4,97,f2)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,mouse_button_released),HX_("mouse_button_released",90,02,fc,58)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,gamepad_button_down),HX_("gamepad_button_down",31,e1,ea,9e)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,gamepad_button_pressed),HX_("gamepad_button_pressed",33,15,3e,b5)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,gamepad_button_released),HX_("gamepad_button_released",0c,85,ea,e7)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,gamepad_axis_values),HX_("gamepad_axis_values",22,bb,f8,da)},
	{hx::fsInt,(int)offsetof(Input_obj,touch_count),HX_("touch_count",0f,7d,ec,76)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Input_obj,touches_down),HX_("touches_down",34,5b,92,b5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Input_obj_sStaticStorageInfo = 0;
#endif

static ::String Input_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("gamepad_init_count",3e,51,6f,cc),
	HX_("event",1a,c8,c4,75),
	HX_("key_event",3a,1a,1f,d5),
	HX_("text_event",c8,1b,08,74),
	HX_("mouse_event",40,cf,9f,32),
	HX_("touch_event",5a,00,4e,a2),
	HX_("gamepad_event",bc,9e,d9,5b),
	HX_("mod_state",94,51,fe,5b),
	HX_("shutdown",96,fc,0b,6b),
	HX_("keypressed",e3,4a,1d,db),
	HX_("keyreleased",5c,49,5a,e5),
	HX_("keydown",81,3d,6e,b1),
	HX_("scanpressed",c5,2e,c3,fb),
	HX_("scanreleased",3a,cb,db,55),
	HX_("scandown",5f,f8,95,27),
	HX_("mousepressed",1d,fb,3a,4e),
	HX_("mousereleased",e2,cb,36,2c),
	HX_("mousedown",07,85,e9,03),
	HX_("gamepadpressed",21,b8,96,37),
	HX_("gamepadreleased",5e,72,20,73),
	HX_("gamepaddown",83,3d,e7,e7),
	HX_("gamepadaxis",c2,61,f2,e5),
	HX_("dispatch_key_down_event",42,92,f5,8f),
	HX_("dispatch_key_up_event",bb,85,da,71),
	HX_("dispatch_text_event",6d,80,5a,1c),
	HX_("dispatch_mouse_move_event",ab,52,2c,e9),
	HX_("dispatch_mouse_down_event",bc,ba,01,d6),
	HX_("dispatch_mouse_up_event",b5,bb,31,4b),
	HX_("dispatch_mouse_wheel_event",d7,bb,13,da),
	HX_("dispatch_touch_down_event",62,4b,89,b1),
	HX_("dispatch_touch_up_event",db,b6,e7,d0),
	HX_("dispatch_touch_move_event",51,e3,b3,c4),
	HX_("dispatch_gamepad_axis_event",7f,ca,44,96),
	HX_("dispatch_gamepad_button_down_event",47,08,1a,25),
	HX_("dispatch_gamepad_button_up_event",80,00,d7,72),
	HX_("dispatch_gamepad_device_event",f4,26,d5,bb),
	HX_("onevent",9b,f6,d4,78),
	HX_("_update_mousestate",43,80,81,34),
	HX_("_update_gamepadstate",07,00,0d,d6),
	HX_("_update_keystate",c9,d6,74,15),
	HX_("key_code_down",14,e2,e5,52),
	HX_("key_code_pressed",30,84,2e,06),
	HX_("key_code_released",6f,33,5b,69),
	HX_("scan_code_down",72,17,32,08),
	HX_("scan_code_pressed",92,7d,d3,ee),
	HX_("scan_code_released",cd,6f,10,11),
	HX_("mouse_button_down",b5,4c,86,45),
	HX_("mouse_button_pressed",2f,b4,97,f2),
	HX_("mouse_button_released",90,02,fc,58),
	HX_("gamepad_button_down",31,e1,ea,9e),
	HX_("gamepad_button_pressed",33,15,3e,b5),
	HX_("gamepad_button_released",0c,85,ea,e7),
	HX_("gamepad_axis_values",22,bb,f8,da),
	HX_("touch_count",0f,7d,ec,76),
	HX_("touches_down",34,5b,92,b5),
	::String(null()) };

hx::Class Input_obj::__mClass;

void Input_obj::__register()
{
	Input_obj _hx_dummy;
	Input_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.input.Input",51,32,9b,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Input_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace input
