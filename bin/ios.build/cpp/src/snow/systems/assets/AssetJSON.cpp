// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetJSON
#include <snow/systems/assets/AssetJSON.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ea2408c8d76b7a9e_457_processor,"snow.systems.assets.AssetJSON","processor",0x82db8886,"snow.systems.assets.AssetJSON.processor","snow/systems/assets/Asset.hx",457,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_ea2408c8d76b7a9e_453_processor,"snow.systems.assets.AssetJSON","processor",0x82db8886,"snow.systems.assets.AssetJSON.processor","snow/systems/assets/Asset.hx",453,0x7a5509c3)
namespace snow{
namespace systems{
namespace assets{

void AssetJSON_obj::__construct() { }

Dynamic AssetJSON_obj::__CreateEmpty() { return new AssetJSON_obj; }

void *AssetJSON_obj::_hx_vtable = 0;

Dynamic AssetJSON_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetJSON_obj > _hx_result = new AssetJSON_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetJSON_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1c62f674) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1c62f674;
	} else {
		return inClassId==(int)0x3efde4b0;
	}
}

 ::snow::api::Promise AssetJSON_obj::processor( ::snow::Snow _app,::String _id, ::snow::api::buffers::ArrayBufferView _data){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_data1) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_GC_STACKFRAME(&_hx_pos_ea2408c8d76b7a9e_457_processor)
HXLINE( 459)			 ::Dynamic _data_json = null();
HXLINE( 461)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 462)				_data_json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::ofData(_data1->__get(0).StaticCast<  ::snow::api::buffers::ArrayBufferView >()->buffer)->toString())->doParse();
HXLINE( 463)				_data1[0] = null();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 465)					_data1[0] = null();
HXLINE( 466)					return reject(::snow::types::Error_obj::parse(e));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 469)			return resolve(_data_json);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_ea2408c8d76b7a9e_453_processor)
HXDLIN( 453)		::Array< ::Dynamic> _data1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,_data);
HXLINE( 455)		if (hx::IsNull( _data1->__get(0).StaticCast<  ::snow::api::buffers::ArrayBufferView >() )) {
HXLINE( 455)			return ::snow::api::Promise_obj::reject(::snow::types::Error_obj::error(HX_("AssetJSON: data was null",36,36,57,6d)));
            		}
HXLINE( 457)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_data1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssetJSON_obj,processor,return )


AssetJSON_obj::AssetJSON_obj()
{
}

bool AssetJSON_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"processor") ) { outValue = processor_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *AssetJSON_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *AssetJSON_obj_sStaticStorageInfo = 0;
#endif

hx::Class AssetJSON_obj::__mClass;

static ::String AssetJSON_obj_sStaticFields[] = {
	HX_("processor",52,bd,0b,d3),
	::String(null())
};

void AssetJSON_obj::__register()
{
	AssetJSON_obj _hx_dummy;
	AssetJSON_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.assets.AssetJSON",a2,e2,3f,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetJSON_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetJSON_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AssetJSON_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetJSON_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetJSON_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace assets
