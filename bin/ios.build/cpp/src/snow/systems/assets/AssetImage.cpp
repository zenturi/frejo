// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_native_assets_Assets
#include <snow/core/native/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Assets
#include <snow/modules/interfaces/Assets.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Asset
#include <snow/systems/assets/Asset.h>
#endif
#ifndef INCLUDED_snow_systems_assets_AssetImage
#include <snow/systems/assets/AssetImage.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_Error
#include <snow/types/Error.h>
#endif
#ifndef INCLUDED_snow_types_ImageData
#include <snow/types/ImageData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d4840e13f1e6add8_54_new,"snow.systems.assets.AssetImage","new",0x408e16f3,"snow.systems.assets.AssetImage.new","snow/systems/assets/Asset.hx",54,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_73_reload,"snow.systems.assets.AssetImage","reload",0xc9ff2aa6,"snow.systems.assets.AssetImage.reload","snow/systems/assets/Asset.hx",73,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_68_reload,"snow.systems.assets.AssetImage","reload",0xc9ff2aa6,"snow.systems.assets.AssetImage.reload","snow/systems/assets/Asset.hx",68,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_64_reload,"snow.systems.assets.AssetImage","reload",0xc9ff2aa6,"snow.systems.assets.AssetImage.reload","snow/systems/assets/Asset.hx",64,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_83_destroy,"snow.systems.assets.AssetImage","destroy",0xba42b90d,"snow.systems.assets.AssetImage.destroy","snow/systems/assets/Asset.hx",83,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_99_reload_from_bytes,"snow.systems.assets.AssetImage","reload_from_bytes",0xad36d8cf,"snow.systems.assets.AssetImage.reload_from_bytes","snow/systems/assets/Asset.hx",99,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_95_reload_from_bytes,"snow.systems.assets.AssetImage","reload_from_bytes",0xad36d8cf,"snow.systems.assets.AssetImage.reload_from_bytes","snow/systems/assets/Asset.hx",95,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_91_reload_from_bytes,"snow.systems.assets.AssetImage","reload_from_bytes",0xad36d8cf,"snow.systems.assets.AssetImage.reload_from_bytes","snow/systems/assets/Asset.hx",91,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_109_reload_from_pixels,"snow.systems.assets.AssetImage","reload_from_pixels",0x48017649,"snow.systems.assets.AssetImage.reload_from_pixels","snow/systems/assets/Asset.hx",109,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_170_set_image,"snow.systems.assets.AssetImage","set_image",0xcb695e91,"snow.systems.assets.AssetImage.set_image","snow/systems/assets/Asset.hx",170,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_119_load,"snow.systems.assets.AssetImage","load",0x3a7b1433,"snow.systems.assets.AssetImage.load","snow/systems/assets/Asset.hx",119,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_128_load_from_bytes,"snow.systems.assets.AssetImage","load_from_bytes",0x59d0f062,"snow.systems.assets.AssetImage.load_from_bytes","snow/systems/assets/Asset.hx",128,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_138_load_from_pixels,"snow.systems.assets.AssetImage","load_from_pixels",0xa23bff56,"snow.systems.assets.AssetImage.load_from_pixels","snow/systems/assets/Asset.hx",138,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_154_provider,"snow.systems.assets.AssetImage","provider",0x9277f5be,"snow.systems.assets.AssetImage.provider","snow/systems/assets/Asset.hx",154,0x7a5509c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d4840e13f1e6add8_159_processor,"snow.systems.assets.AssetImage","processor",0xba11b425,"snow.systems.assets.AssetImage.processor","snow/systems/assets/Asset.hx",159,0x7a5509c3)
namespace snow{
namespace systems{
namespace assets{

void AssetImage_obj::__construct( ::snow::systems::assets::Assets _system,::String _id, ::snow::types::ImageData _image){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_54_new)
HXLINE(  56)		super::__construct(_system,_id,4);
HXLINE(  57)		this->set_image(_image);
            	}

Dynamic AssetImage_obj::__CreateEmpty() { return new AssetImage_obj; }

void *AssetImage_obj::_hx_vtable = 0;

Dynamic AssetImage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetImage_obj > _hx_result = new AssetImage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AssetImage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x380b656f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x380b656f;
	} else {
		return inClassId==(int)0x3efde4b0;
	}
}

 ::snow::api::Promise AssetImage_obj::reload(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::snow::systems::assets::AssetImage,_gthis) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::snow::systems::assets::AssetImage,_gthis, ::Dynamic,resolve) HXARGC(1)
            			void _hx_run( ::snow::types::ImageData _image){
            				HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_73_reload)
HXLINE(  74)				_gthis->set_image(_image);
HXLINE(  75)				resolve(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_68_reload)
HXLINE(  70)			 ::snow::systems::io::IO _gthis1 = _gthis->_hx_system->app->io;
HXDLIN(  70)			 ::snow::api::Promise _load = _gthis1->data_flow(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,_gthis->_hx_system->root)->init(1,_gthis->id)),null(),::snow::systems::assets::AssetImage_obj::provider_dyn());
HXLINE(  72)			_load->then( ::Dynamic(new _hx_Closure_0(_gthis,resolve)),null())->error(reject);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_d4840e13f1e6add8_64_reload)
HXDLIN(  64)		 ::snow::systems::assets::AssetImage _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  66)		this->loaded = false;
HXLINE(  68)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetImage_obj,reload,return )

void AssetImage_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_83_destroy)
HXLINE(  85)		this->image->destroy();
HXLINE(  86)		this->set_image(null());
            	}


 ::snow::api::Promise AssetImage_obj::reload_from_bytes( ::snow::api::buffers::ArrayBufferView _bytes){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::snow::systems::assets::AssetImage,_gthis, ::snow::api::buffers::ArrayBufferView,_bytes) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::snow::systems::assets::AssetImage,_gthis, ::Dynamic,resolve) HXARGC(1)
            			void _hx_run( ::snow::types::ImageData _image){
            				HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_99_reload_from_bytes)
HXLINE( 100)				_gthis->set_image(_image);
HXLINE( 101)				resolve(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_95_reload_from_bytes)
HXLINE(  97)			 ::snow::api::Promise _load = _gthis->_hx_system->module->image_info_from_bytes(_gthis->id,_bytes,null());
HXLINE(  99)			_load->then( ::Dynamic(new _hx_Closure_0(_gthis,resolve)),null())->error(reject);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_d4840e13f1e6add8_91_reload_from_bytes)
HXDLIN(  91)		 ::snow::systems::assets::AssetImage _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  93)		this->loaded = false;
HXLINE(  95)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis,_bytes)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetImage_obj,reload_from_bytes,return )

void AssetImage_obj::reload_from_pixels(int _width,int _height, ::snow::api::buffers::ArrayBufferView _pixels){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_109_reload_from_pixels)
HXLINE( 111)		this->loaded = false;
HXLINE( 113)		this->set_image(this->_hx_system->module->image_info_from_pixels(this->id,_width,_height,_pixels,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetImage_obj,reload_from_pixels,(void))

 ::snow::types::ImageData AssetImage_obj::set_image( ::snow::types::ImageData _image){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_170_set_image)
HXLINE( 172)		this->loaded = hx::IsNotNull( _image );
HXLINE( 173)		return (this->image = _image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetImage_obj,set_image,return )

 ::snow::api::Promise AssetImage_obj::load( ::snow::systems::assets::Assets _system,::String _id){
            	HX_GC_STACKFRAME(&_hx_pos_d4840e13f1e6add8_119_load)
HXLINE( 121)		if (hx::IsNull( _id )) {
HXLINE( 121)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 122)		if (hx::IsNull( _system )) {
HXLINE( 122)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_system was null",b0,ae,ad,1a)));
            		}
HXLINE( 124)		return  ::snow::systems::assets::AssetImage_obj::__alloc( HX_CTX ,_system,_id,null())->reload();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetImage_obj,load,return )

 ::snow::api::Promise AssetImage_obj::load_from_bytes( ::snow::systems::assets::Assets _system,::String _id, ::snow::api::buffers::ArrayBufferView _bytes){
            	HX_GC_STACKFRAME(&_hx_pos_d4840e13f1e6add8_128_load_from_bytes)
HXLINE( 130)		if (hx::IsNull( _id )) {
HXLINE( 130)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 131)		if (hx::IsNull( _bytes )) {
HXLINE( 131)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_bytes was null",d2,33,d5,32)));
            		}
HXLINE( 132)		if (hx::IsNull( _system )) {
HXLINE( 132)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_system was null",b0,ae,ad,1a)));
            		}
HXLINE( 134)		return  ::snow::systems::assets::AssetImage_obj::__alloc( HX_CTX ,_system,_id,null())->reload_from_bytes(_bytes);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssetImage_obj,load_from_bytes,return )

 ::snow::systems::assets::AssetImage AssetImage_obj::load_from_pixels( ::snow::systems::assets::Assets _system,::String _id,int _width,int _height, ::snow::api::buffers::ArrayBufferView _pixels){
            	HX_GC_STACKFRAME(&_hx_pos_d4840e13f1e6add8_138_load_from_pixels)
HXLINE( 140)		if (hx::IsNull( _id )) {
HXLINE( 140)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_id was null",c4,57,88,c5)));
            		}
HXLINE( 141)		if (hx::IsNull( _pixels )) {
HXLINE( 141)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_pixels was null",b2,5e,44,bb)));
            		}
HXLINE( 142)		if (hx::IsNull( _system )) {
HXLINE( 142)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_system was null",b0,ae,ad,1a)));
            		}
HXLINE( 144)		 ::snow::types::ImageData info = _system->module->image_info_from_pixels(_id,_width,_height,_pixels,null());
HXLINE( 146)		return  ::snow::systems::assets::AssetImage_obj::__alloc( HX_CTX ,_system,_id,info);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(AssetImage_obj,load_from_pixels,return )

 ::snow::api::Promise AssetImage_obj::provider( ::snow::Snow _app,::String _path){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_154_provider)
HXDLIN( 154)		return _app->assets->module->image_info_from_load(_path,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AssetImage_obj,provider,return )

 ::snow::api::Promise AssetImage_obj::processor( ::snow::Snow _app,::String _id, ::snow::api::buffers::ArrayBufferView _data){
            	HX_STACKFRAME(&_hx_pos_d4840e13f1e6add8_159_processor)
HXLINE( 161)		if (hx::IsNull( _data )) {
HXLINE( 161)			return ::snow::api::Promise_obj::reject(::snow::types::Error_obj::error(HX_("AssetImage processor: data was null",71,8b,7d,f6)));
            		}
HXLINE( 163)		return _app->assets->module->image_info_from_bytes(_id,_data,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(AssetImage_obj,processor,return )


hx::ObjectPtr< AssetImage_obj > AssetImage_obj::__new( ::snow::systems::assets::Assets _system,::String _id, ::snow::types::ImageData _image) {
	hx::ObjectPtr< AssetImage_obj > __this = new AssetImage_obj();
	__this->__construct(_system,_id,_image);
	return __this;
}

hx::ObjectPtr< AssetImage_obj > AssetImage_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::systems::assets::Assets _system,::String _id, ::snow::types::ImageData _image) {
	AssetImage_obj *__this = (AssetImage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssetImage_obj), true, "snow.systems.assets.AssetImage"));
	*(void **)__this = AssetImage_obj::_hx_vtable;
	__this->__construct(_system,_id,_image);
	return __this;
}

AssetImage_obj::AssetImage_obj()
{
}

void AssetImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetImage);
	HX_MARK_MEMBER_NAME(image,"image");
	 ::snow::systems::assets::Asset_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AssetImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(image,"image");
	 ::snow::systems::assets::Asset_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AssetImage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_image") ) { return hx::Val( set_image_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"reload_from_bytes") ) { return hx::Val( reload_from_bytes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"reload_from_pixels") ) { return hx::Val( reload_from_pixels_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssetImage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"provider") ) { outValue = provider_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"processor") ) { outValue = processor_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"load_from_bytes") ) { outValue = load_from_bytes_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"load_from_pixels") ) { outValue = load_from_pixels_dyn(); return true; }
	}
	return false;
}

hx::Val AssetImage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_image(inValue.Cast<  ::snow::types::ImageData >()) );image=inValue.Cast<  ::snow::types::ImageData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("image",5b,1f,69,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AssetImage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::types::ImageData*/ ,(int)offsetof(AssetImage_obj,image),HX_("image",5b,1f,69,bd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetImage_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetImage_obj_sMemberFields[] = {
	HX_("image",5b,1f,69,bd),
	HX_("reload",59,53,df,03),
	HX_("destroy",fa,2c,86,24),
	HX_("reload_from_bytes",fc,56,51,e1),
	HX_("reload_from_pixels",7c,5f,15,ab),
	HX_("set_image",be,67,63,e4),
	::String(null()) };

hx::Class AssetImage_obj::__mClass;

static ::String AssetImage_obj_sStaticFields[] = {
	HX_("load",26,9a,b7,47),
	HX_("load_from_bytes",4f,99,bd,fa),
	HX_("load_from_pixels",c9,25,63,d0),
	HX_("provider",31,f1,39,23),
	HX_("processor",52,bd,0b,d3),
	::String(null())
};

void AssetImage_obj::__register()
{
	AssetImage_obj _hx_dummy;
	AssetImage_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.assets.AssetImage",81,21,7d,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetImage_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetImage_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetImage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetImage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetImage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace assets
