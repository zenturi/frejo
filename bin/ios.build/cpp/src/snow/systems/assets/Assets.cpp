// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_native_assets_Assets
#include <snow/core/native/assets/Assets.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Assets
#include <snow/modules/interfaces/Assets.h>
#endif
#ifndef INCLUDED_snow_systems_assets_Assets
#include <snow/systems/assets/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fd7c96419395c5c0_13_new,"snow.systems.assets.Assets","new",0xa4b6e92b,"snow.systems.assets.Assets.new","snow/systems/assets/Assets.hx",13,0xbd832986)
HX_LOCAL_STACK_FRAME(_hx_pos_fd7c96419395c5c0_43_shutdown,"snow.systems.assets.Assets","shutdown",0xbae423eb,"snow.systems.assets.Assets.shutdown","snow/systems/assets/Assets.hx",43,0xbd832986)
namespace snow{
namespace systems{
namespace assets{

void Assets_obj::__construct( ::snow::Snow _app){
            	HX_GC_STACKFRAME(&_hx_pos_fd7c96419395c5c0_13_new)
HXLINE(  17)		this->root = HX_("",00,00,00,00);
HXLINE(  32)		this->root = HX_("assets/",4c,2a,dc,36);
HXLINE(  35)		this->app = _app;
HXLINE(  36)		this->module =  ::snow::core::native::assets::Assets_obj::__alloc( HX_CTX ,this->app);
            	}

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1fcd47fb;
}

void Assets_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_fd7c96419395c5c0_43_shutdown)
HXDLIN(  43)		this->module->shutdown();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,shutdown,(void))


hx::ObjectPtr< Assets_obj > Assets_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Assets_obj > __this = new Assets_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Assets_obj > Assets_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Assets_obj *__this = (Assets_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Assets_obj), true, "snow.systems.assets.Assets"));
	*(void **)__this = Assets_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Assets_obj::Assets_obj()
{
}

void Assets_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Assets);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(module,"module");
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_END_CLASS();
}

void Assets_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(module,"module");
	HX_VISIT_MEMBER_NAME(app,"app");
}

hx::Val Assets_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { return hx::Val( module ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Assets_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { module=inValue.Cast<  ::snow::core::native::assets::Assets >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Assets_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("module",ac,34,d3,c0));
	outFields->push(HX_("app",a1,fc,49,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Assets_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Assets_obj,root),HX_("root",22,ee,ae,4b)},
	{hx::fsObject /*::snow::core::native::assets::Assets*/ ,(int)offsetof(Assets_obj,module),HX_("module",ac,34,d3,c0)},
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Assets_obj,app),HX_("app",a1,fc,49,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Assets_obj_sStaticStorageInfo = 0;
#endif

static ::String Assets_obj_sMemberFields[] = {
	HX_("root",22,ee,ae,4b),
	HX_("module",ac,34,d3,c0),
	HX_("app",a1,fc,49,00),
	HX_("shutdown",96,fc,0b,6b),
	::String(null()) };

hx::Class Assets_obj::__mClass;

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.assets.Assets",b9,77,d2,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Assets_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace assets
