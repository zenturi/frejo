// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_systems_audio_Audio
#include <snow/systems/audio/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioInstance
#include <snow/systems/audio/AudioInstance.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad66cd40eb68e048_8_new,"snow.systems.audio.AudioSource","new",0x40843996,"snow.systems.audio.AudioSource.new","snow/systems/audio/AudioSource.hx",8,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_42_instance,"snow.systems.audio.AudioSource","instance",0x7bd9929f,"snow.systems.audio.AudioSource.instance","snow/systems/audio/AudioSource.hx",42,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_55_bytes_to_seconds,"snow.systems.audio.AudioSource","bytes_to_seconds",0x78a40c19,"snow.systems.audio.AudioSource.bytes_to_seconds","snow/systems/audio/AudioSource.hx",55,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_65_seconds_to_bytes,"snow.systems.audio.AudioSource","seconds_to_bytes",0x3f4e0971,"snow.systems.audio.AudioSource.seconds_to_bytes","snow/systems/audio/AudioSource.hx",65,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_77_duration,"snow.systems.audio.AudioSource","duration",0x3686825e,"snow.systems.audio.AudioSource.duration","snow/systems/audio/AudioSource.hx",77,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_81_destroy,"snow.systems.audio.AudioSource","destroy",0x67426930,"snow.systems.audio.AudioSource.destroy","snow/systems/audio/AudioSource.hx",81,0x74a7e05d)
HX_LOCAL_STACK_FRAME(_hx_pos_ad66cd40eb68e048_114_instance_killed,"snow.systems.audio.AudioSource","instance_killed",0xe0207c5d,"snow.systems.audio.AudioSource.instance_killed","snow/systems/audio/AudioSource.hx",114,0x74a7e05d)
namespace snow{
namespace systems{
namespace audio{

void AudioSource_obj::__construct( ::snow::Snow _app, ::snow::types::AudioData _data){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_8_new)
HXLINE(  21)		this->destroyed = false;
HXLINE(  19)		this->stream_buffer_count = 2;
HXLINE(  16)		this->stream_buffer_length = 176400;
HXLINE(  31)		this->app = _app;
HXLINE(  32)		this->data = _data;
HXLINE(  33)		this->source_id = this->app->make_uniqueid(null());
HXLINE(  37)		this->instances = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic AudioSource_obj::__CreateEmpty() { return new AudioSource_obj; }

void *AudioSource_obj::_hx_vtable = 0;

Dynamic AudioSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioSource_obj > _hx_result = new AudioSource_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AudioSource_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x040ade38;
}

 ::snow::systems::audio::AudioInstance AudioSource_obj::instance( ::Dynamic _handle){
            	HX_GC_STACKFRAME(&_hx_pos_ad66cd40eb68e048_42_instance)
HXLINE(  44)		 ::snow::systems::audio::AudioInstance _instance =  ::snow::systems::audio::AudioInstance_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),_handle);
HXLINE(  46)		if ((this->instances->indexOf(_instance,null()) == -1)) {
HXLINE(  47)			this->instances->push(_instance);
            		}
HXLINE(  50)		return _instance;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,instance,return )

Float AudioSource_obj::bytes_to_seconds(int _bytes){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_55_bytes_to_seconds)
HXLINE(  57)		int _word;
HXDLIN(  57)		if ((this->data->bits_per_sample == 16)) {
HXLINE(  57)			_word = 2;
            		}
            		else {
HXLINE(  57)			_word = 1;
            		}
HXLINE(  58)		int _sample_frames = ((this->data->rate * this->data->channels) * _word);
HXLINE(  60)		return (( (Float)(_bytes) ) / ( (Float)(_sample_frames) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,bytes_to_seconds,return )

int AudioSource_obj::seconds_to_bytes(Float _seconds){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_65_seconds_to_bytes)
HXLINE(  67)		int _word;
HXDLIN(  67)		if ((this->data->bits_per_sample == 16)) {
HXLINE(  67)			_word = 2;
            		}
            		else {
HXLINE(  67)			_word = 1;
            		}
HXLINE(  68)		int _sample_frames = ((this->data->rate * this->data->channels) * _word);
HXLINE(  70)		return ::Std_obj::_hx_int((_seconds * _sample_frames));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,seconds_to_bytes,return )

Float AudioSource_obj::duration(){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_77_duration)
HXDLIN(  77)		return this->bytes_to_seconds(this->data->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,duration,return )

void AudioSource_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_81_destroy)
HXLINE(  83)		if (this->destroyed) {
HXLINE(  84)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  84)			_hx_tmp((HX_("i / audiosource / ",08,f6,89,12) + HX_("destroying already destroyed source!",1f,cb,87,83)),hx::SourceInfo(HX_("snow/systems/audio/AudioSource.hx",5d,e0,a7,74),84,HX_("snow.systems.audio.AudioSource",a4,76,9e,c4),HX_("destroy",fa,2c,86,24)));
HXLINE(  85)			return;
            		}
HXLINE(  88)		this->destroyed = true;
HXLINE(  90)		int c = this->instances->length;
HXLINE(  91)		int i = 0;
HXLINE(  95)		while((i < c)){
HXLINE(  96)			 ::snow::systems::audio::AudioInstance _instance = this->instances->pop().StaticCast<  ::snow::systems::audio::AudioInstance >();
HXLINE(  97)			_instance->destroy();
HXLINE(  98)			_instance = null();
HXLINE(  99)			i = (i + 1);
            		}
HXLINE( 102)		this->app->audio->emit_snow_systems_audio_AudioSource(2,hx::ObjectPtr<OBJ_>(this));
HXLINE( 104)		this->data->destroy();
HXLINE( 105)		this->data = null();
HXLINE( 106)		this->instances = null();
HXLINE( 107)		this->app = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,destroy,(void))

void AudioSource_obj::instance_killed( ::snow::systems::audio::AudioInstance _instance){
            	HX_STACKFRAME(&_hx_pos_ad66cd40eb68e048_114_instance_killed)
HXDLIN( 114)		this->instances->remove(_instance);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,instance_killed,(void))


hx::ObjectPtr< AudioSource_obj > AudioSource_obj::__new( ::snow::Snow _app, ::snow::types::AudioData _data) {
	hx::ObjectPtr< AudioSource_obj > __this = new AudioSource_obj();
	__this->__construct(_app,_data);
	return __this;
}

hx::ObjectPtr< AudioSource_obj > AudioSource_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app, ::snow::types::AudioData _data) {
	AudioSource_obj *__this = (AudioSource_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AudioSource_obj), true, "snow.systems.audio.AudioSource"));
	*(void **)__this = AudioSource_obj::_hx_vtable;
	__this->__construct(_app,_data);
	return __this;
}

AudioSource_obj::AudioSource_obj()
{
}

void AudioSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioSource);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(stream_buffer_length,"stream_buffer_length");
	HX_MARK_MEMBER_NAME(stream_buffer_count,"stream_buffer_count");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(source_id,"source_id");
	HX_MARK_MEMBER_NAME(instances,"instances");
	HX_MARK_END_CLASS();
}

void AudioSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(stream_buffer_length,"stream_buffer_length");
	HX_VISIT_MEMBER_NAME(stream_buffer_count,"stream_buffer_count");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(source_id,"source_id");
	HX_VISIT_MEMBER_NAME(instances,"instances");
}

hx::Val AudioSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return hx::Val( instance_dyn() ); }
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed ); }
		if (HX_FIELD_EQ(inName,"source_id") ) { return hx::Val( source_id ); }
		if (HX_FIELD_EQ(inName,"instances") ) { return hx::Val( instances ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"instance_killed") ) { return hx::Val( instance_killed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bytes_to_seconds") ) { return hx::Val( bytes_to_seconds_dyn() ); }
		if (HX_FIELD_EQ(inName,"seconds_to_bytes") ) { return hx::Val( seconds_to_bytes_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stream_buffer_count") ) { return hx::Val( stream_buffer_count ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stream_buffer_length") ) { return hx::Val( stream_buffer_length ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AudioSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::snow::types::AudioData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source_id") ) { source_id=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instances") ) { instances=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"stream_buffer_count") ) { stream_buffer_count=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"stream_buffer_length") ) { stream_buffer_length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("stream_buffer_length",46,6e,35,c0));
	outFields->push(HX_("stream_buffer_count",6f,b7,d9,d0));
	outFields->push(HX_("destroyed",d9,37,27,f4));
	outFields->push(HX_("source_id",ff,7b,06,69));
	outFields->push(HX_("instances",3e,83,1a,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AudioSource_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(AudioSource_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsObject /*::snow::types::AudioData*/ ,(int)offsetof(AudioSource_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsInt,(int)offsetof(AudioSource_obj,stream_buffer_length),HX_("stream_buffer_length",46,6e,35,c0)},
	{hx::fsInt,(int)offsetof(AudioSource_obj,stream_buffer_count),HX_("stream_buffer_count",6f,b7,d9,d0)},
	{hx::fsBool,(int)offsetof(AudioSource_obj,destroyed),HX_("destroyed",d9,37,27,f4)},
	{hx::fsString,(int)offsetof(AudioSource_obj,source_id),HX_("source_id",ff,7b,06,69)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AudioSource_obj,instances),HX_("instances",3e,83,1a,4b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioSource_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioSource_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("data",2a,56,63,42),
	HX_("stream_buffer_length",46,6e,35,c0),
	HX_("stream_buffer_count",6f,b7,d9,d0),
	HX_("destroyed",d9,37,27,f4),
	HX_("source_id",ff,7b,06,69),
	HX_("instances",3e,83,1a,4b),
	HX_("instance",95,1f,e1,59),
	HX_("bytes_to_seconds",0f,7f,12,ef),
	HX_("seconds_to_bytes",67,7c,bc,b5),
	HX_("duration",54,0f,8e,14),
	HX_("destroy",fa,2c,86,24),
	HX_("instance_killed",27,1a,dc,6d),
	::String(null()) };

hx::Class AudioSource_obj::__mClass;

void AudioSource_obj::__register()
{
	AudioSource_obj _hx_dummy;
	AudioSource_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.audio.AudioSource",a4,76,9e,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioSource_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace audio
