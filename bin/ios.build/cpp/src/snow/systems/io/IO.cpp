// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_DebugError
#include <snow/api/DebugError.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_api_buffers_TAError
#include <snow/api/buffers/TAError.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2929d4353300c1f8_9_new,"snow.systems.io.IO","new",0xbb4a146b,"snow.systems.io.IO.new","snow/systems/io/IO.hx",9,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_32_app_path,"snow.systems.io.IO","app_path",0x169cd158,"snow.systems.io.IO.app_path","snow/systems/io/IO.hx",32,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_38_app_path_prefs,"snow.systems.io.IO","app_path_prefs",0x095ff2c9,"snow.systems.io.IO.app_path_prefs","snow/systems/io/IO.hx",38,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_45_url_open,"snow.systems.io.IO","url_open",0x47ad55ef,"snow.systems.io.IO.url_open","snow/systems/io/IO.hx",45,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_53_data_load,"snow.systems.io.IO","data_load",0x81f825e6,"snow.systems.io.IO.data_load","snow/systems/io/IO.hx",53,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_62_data_save,"snow.systems.io.IO","data_save",0x868e16fd,"snow.systems.io.IO.data_save","snow/systems/io/IO.hx",62,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_76_data_flow,"snow.systems.io.IO","data_flow",0x7dfea3ae,"snow.systems.io.IO.data_flow","snow/systems/io/IO.hx",76,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_73_data_flow,"snow.systems.io.IO","data_flow",0x7dfea3ae,"snow.systems.io.IO.data_flow","snow/systems/io/IO.hx",73,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_67_data_flow,"snow.systems.io.IO","data_flow",0x7dfea3ae,"snow.systems.io.IO.data_flow","snow/systems/io/IO.hx",67,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_98_string_save_path,"snow.systems.io.IO","string_save_path",0x42ee9e0e,"snow.systems.io.IO.string_save_path","snow/systems/io/IO.hx",98,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_108_string_save,"snow.systems.io.IO","string_save",0x486dafb6,"snow.systems.io.IO.string_save","snow/systems/io/IO.hx",108,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_141_string_load,"snow.systems.io.IO","string_load",0x43d7be9f,"snow.systems.io.IO.string_load","snow/systems/io/IO.hx",141,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_160_string_destroy,"snow.systems.io.IO","string_destroy",0x980f5a21,"snow.systems.io.IO.string_destroy","snow/systems/io/IO.hx",160,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_178_string_slots_sync,"snow.systems.io.IO","string_slots_sync",0x7ed90a9e,"snow.systems.io.IO.string_slots_sync","snow/systems/io/IO.hx",178,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_208_default_provider,"snow.systems.io.IO","default_provider",0x16d740c4,"snow.systems.io.IO.default_provider","snow/systems/io/IO.hx",208,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_213_onevent,"snow.systems.io.IO","onevent",0x7ba59c26,"snow.systems.io.IO.onevent","snow/systems/io/IO.hx",213,0x7ba838c6)
HX_LOCAL_STACK_FRAME(_hx_pos_2929d4353300c1f8_220_shutdown,"snow.systems.io.IO","shutdown",0xdecc30ab,"snow.systems.io.IO.shutdown","snow/systems/io/IO.hx",220,0x7ba838c6)
namespace snow{
namespace systems{
namespace io{

void IO_obj::__construct( ::snow::Snow _app){
            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_9_new)
HXLINE(  20)		this->string_save_prefix = HX_("slot",fe,dd,55,4c);
HXLINE(  25)		this->app = _app;
HXLINE(  26)		this->module =  ::snow::modules::sdl::IO_obj::__alloc( HX_CTX ,this->app);
            	}

Dynamic IO_obj::__CreateEmpty() { return new IO_obj; }

void *IO_obj::_hx_vtable = 0;

Dynamic IO_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IO_obj > _hx_result = new IO_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool IO_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7eecf769;
}

::String IO_obj::app_path(){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_32_app_path)
HXDLIN(  32)		return this->module->app_path();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IO_obj,app_path,return )

::String IO_obj::app_path_prefs(){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_38_app_path_prefs)
HXDLIN(  38)		return this->module->app_path_prefs();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IO_obj,app_path_prefs,return )

void IO_obj::url_open(::String _url){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_45_url_open)
HXDLIN(  45)		this->module->url_open(_url);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IO_obj,url_open,(void))

 ::snow::api::Promise IO_obj::data_load(::String _path, ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_53_data_load)
HXDLIN(  53)		return this->module->data_load(_path,_options);
            	}


HX_DEFINE_DYNAMIC_FUNC2(IO_obj,data_load,return )

bool IO_obj::data_save(::String _path, ::snow::api::buffers::ArrayBufferView _data, ::Dynamic _options){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_62_data_save)
HXDLIN(  62)		return this->module->data_save(_path,_data,_options);
            	}


HX_DEFINE_DYNAMIC_FUNC3(IO_obj,data_save,return )

 ::snow::api::Promise IO_obj::data_flow(::String _id, ::Dynamic _processor, ::Dynamic _provider){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::snow::systems::io::IO,_gthis, ::Dynamic,_provider,::String,_id, ::Dynamic,_processor) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0, ::snow::systems::io::IO,_gthis,::String,_id, ::Dynamic,resolve, ::Dynamic,reject, ::Dynamic,_processor) HXARGC(1)
            			void _hx_run( ::Dynamic data){
            				HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_76_data_flow)
HXLINE(  76)				if (hx::IsNotNull( _processor )) {
HXLINE(  77)					( ( ::snow::api::Promise)(_processor(_gthis->app,_id,data)) )->then(resolve,reject);
            				}
            				else {
HXLINE(  79)					resolve(data);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_73_data_flow)
HXLINE(  73)			( ( ::snow::api::Promise)(_provider(_gthis->app,_id)) )->then( ::Dynamic(new _hx_Closure_0(_gthis,_id,resolve,reject,_processor)),null())->error(reject);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_67_data_flow)
HXDLIN(  67)		 ::snow::systems::io::IO _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  69)		if (hx::IsNull( _provider )) {
HXLINE(  69)			_provider = this->default_provider_dyn();
            		}
HXLINE(  71)		return  ::snow::api::Promise_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis,_provider,_id,_processor)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(IO_obj,data_flow,return )

::String IO_obj::string_save_path(hx::Null< int >  __o__slot){
int _slot = __o__slot.Default(0);
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_98_string_save_path)
HXDLIN(  98)		return this->module->string_save_path(_slot);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IO_obj,string_save_path,return )

bool IO_obj::string_save(::String _key,::String _value,hx::Null< int >  __o__slot){
int _slot = __o__slot.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_108_string_save)
HXLINE( 110)		if (hx::IsNull( this->string_slots )) {
HXLINE( 110)			this->string_slots =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
HXDLIN( 110)		 ::haxe::ds::StringMap _string_map = ( ( ::haxe::ds::StringMap)(this->string_slots->get(_slot)) );
HXDLIN( 110)		if (hx::IsNull( _string_map )) {
HXLINE( 110)			 ::snow::modules::sdl::IO _this = this->module;
HXDLIN( 110)			 ::snow::api::buffers::ArrayBufferView _data = _this->_data_load(_this->string_save_path(_slot),null());
HXDLIN( 110)			::String _string;
HXDLIN( 110)			if (hx::IsNull( _data )) {
HXLINE( 110)				_string = null();
            			}
            			else {
HXLINE( 110)				_string = ::haxe::io::Bytes_obj::ofData(_data->buffer)->toString();
            			}
HXDLIN( 110)			if (hx::IsNull( _string )) {
HXLINE( 110)				_string_map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 110)				 ::snow::modules::sdl::IO _this1 = this->module;
HXDLIN( 110)				if (hx::IsNull( _string )) {
HXLINE( 110)					HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            				}
HXDLIN( 110)				 ::haxe::io::Bytes _bytes = ::haxe::crypto::Base64_obj::decode(_string,null());
HXDLIN( 110)				_string = _bytes->toString();
HXDLIN( 110)				_string_map = ( ( ::haxe::ds::StringMap)(::haxe::Unserializer_obj::run(_string)) );
            			}
HXDLIN( 110)			this->string_slots->set(_slot,_string_map);
            		}
HXDLIN( 110)		 ::haxe::ds::StringMap _string_map1 = _string_map;
HXLINE( 112)		 ::snow::modules::sdl::IO _this2 = this->module;
HXDLIN( 112)		if (hx::IsNull( _key )) {
HXLINE( 112)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            		}
HXDLIN( 112)		 ::haxe::io::Bytes _bytes1 = ::haxe::io::Bytes_obj::ofString(_key);
HXDLIN( 112)		::String _encoded_key = ::haxe::crypto::Base64_obj::encode(_bytes1,null());
HXLINE( 115)		if (hx::IsNull( _value )) {
HXLINE( 119)			_string_map1->remove(_encoded_key);
            		}
            		else {
HXLINE( 123)			 ::snow::modules::sdl::IO _this3 = this->module;
HXDLIN( 123)			if (hx::IsNull( _value )) {
HXLINE( 123)				HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            			}
HXDLIN( 123)			 ::haxe::io::Bytes _bytes2 = ::haxe::io::Bytes_obj::ofString(_value);
HXDLIN( 123)			::String _encoded_value = ::haxe::crypto::Base64_obj::encode(_bytes2,null());
HXLINE( 127)			_string_map1->set(_encoded_key,_encoded_value);
            		}
HXLINE( 131)		::String _contents = ::haxe::Serializer_obj::run(_string_map1);
HXLINE( 132)		 ::snow::modules::sdl::IO _this4 = this->module;
HXDLIN( 132)		if (hx::IsNull( _contents )) {
HXLINE( 132)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            		}
HXDLIN( 132)		 ::haxe::io::Bytes _bytes3 = ::haxe::io::Bytes_obj::ofString(_contents);
HXDLIN( 132)		_contents = ::haxe::crypto::Base64_obj::encode(_bytes3,null());
HXLINE( 134)		 ::snow::modules::sdl::IO _this5 = this->module;
HXDLIN( 134)		::String _path = _this5->string_save_path(_slot);
HXDLIN( 134)		 ::haxe::io::Bytes _bytes4 = ::haxe::io::Bytes_obj::ofString(_contents);
HXDLIN( 134)		 ::Dynamic _byteLength = null();
HXDLIN( 134)		if (hx::IsNull( _byteLength )) {
HXLINE( 134)			_byteLength = _bytes4->length;
            		}
HXDLIN( 134)		::Array< unsigned char > _buffer = _bytes4->b;
HXDLIN( 134)		int _byteOffset = 0;
HXDLIN( 134)		int _byteLength1 = ( (int)(_byteLength) );
HXDLIN( 134)		 ::snow::api::buffers::ArrayBufferView _view =  ::snow::api::buffers::ArrayBufferView_obj::__alloc( HX_CTX ,4);
HXDLIN( 134)		int _bytes_per_elem = _view->bytesPerElement;
HXDLIN( 134)		if ((_byteOffset < 0)) {
HXLINE( 134)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be positive (> 0)",07,9d,c2,39)));
            		}
HXDLIN( 134)		if ((hx::Mod(_byteOffset,_bytes_per_elem) != 0)) {
HXLINE( 134)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: byte offset must be aligned with the bytes per element",e2,98,67,08)));
            		}
HXDLIN( 134)		int _src_bytelen = _buffer->length;
HXDLIN( 134)		int _new_range = (_byteOffset + _byteLength1);
HXDLIN( 134)		if ((_new_range > _src_bytelen)) {
HXLINE( 134)			HX_STACK_DO_THROW(::snow::api::buffers::TAError_obj::RangeError(HX_("fromBuffer: specified range would exceed the source buffer",98,6f,a0,be)));
            		}
HXDLIN( 134)		_view->buffer = _buffer;
HXDLIN( 134)		_view->byteOffset = _byteOffset;
HXDLIN( 134)		_view->byteLength = _byteLength1;
HXDLIN( 134)		_view->length = ::Std_obj::_hx_int((( (Float)(_byteLength1) ) / ( (Float)(_bytes_per_elem) )));
HXDLIN( 134)		 ::snow::api::buffers::ArrayBufferView _data1 = _view;
HXDLIN( 134)		return _this5->data_save(_path,_data1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(IO_obj,string_save,return )

::String IO_obj::string_load(::String _key,hx::Null< int >  __o__slot){
int _slot = __o__slot.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_141_string_load)
HXLINE( 143)		if (hx::IsNull( this->string_slots )) {
HXLINE( 143)			this->string_slots =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
HXDLIN( 143)		 ::haxe::ds::StringMap _string_map = ( ( ::haxe::ds::StringMap)(this->string_slots->get(_slot)) );
HXDLIN( 143)		if (hx::IsNull( _string_map )) {
HXLINE( 143)			 ::snow::modules::sdl::IO _this = this->module;
HXDLIN( 143)			 ::snow::api::buffers::ArrayBufferView _data = _this->_data_load(_this->string_save_path(_slot),null());
HXDLIN( 143)			::String _string;
HXDLIN( 143)			if (hx::IsNull( _data )) {
HXLINE( 143)				_string = null();
            			}
            			else {
HXLINE( 143)				_string = ::haxe::io::Bytes_obj::ofData(_data->buffer)->toString();
            			}
HXDLIN( 143)			if (hx::IsNull( _string )) {
HXLINE( 143)				_string_map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 143)				 ::snow::modules::sdl::IO _this1 = this->module;
HXDLIN( 143)				if (hx::IsNull( _string )) {
HXLINE( 143)					HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            				}
HXDLIN( 143)				 ::haxe::io::Bytes _bytes = ::haxe::crypto::Base64_obj::decode(_string,null());
HXDLIN( 143)				_string = _bytes->toString();
HXDLIN( 143)				_string_map = ( ( ::haxe::ds::StringMap)(::haxe::Unserializer_obj::run(_string)) );
            			}
HXDLIN( 143)			this->string_slots->set(_slot,_string_map);
            		}
HXDLIN( 143)		 ::haxe::ds::StringMap _string_map1 = _string_map;
HXLINE( 145)		 ::snow::modules::sdl::IO _this2 = this->module;
HXDLIN( 145)		if (hx::IsNull( _key )) {
HXLINE( 145)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            		}
HXDLIN( 145)		 ::haxe::io::Bytes _bytes1 = ::haxe::io::Bytes_obj::ofString(_key);
HXDLIN( 145)		::String _encoded_key = ::haxe::crypto::Base64_obj::encode(_bytes1,null());
HXLINE( 146)		::String _encoded_value = _string_map1->get_string(_encoded_key);
HXLINE( 150)		if (hx::IsNull( _encoded_value )) {
HXLINE( 151)			return null();
            		}
HXLINE( 154)		 ::snow::modules::sdl::IO _this3 = this->module;
HXDLIN( 154)		if (hx::IsNull( _encoded_value )) {
HXLINE( 154)			HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            		}
HXDLIN( 154)		 ::haxe::io::Bytes _bytes2 = ::haxe::crypto::Base64_obj::decode(_encoded_value,null());
HXDLIN( 154)		return _bytes2->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC2(IO_obj,string_load,return )

bool IO_obj::string_destroy(hx::Null< int >  __o__slot){
int _slot = __o__slot.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_160_string_destroy)
HXLINE( 162)		if (hx::IsNull( this->string_slots )) {
HXLINE( 163)			this->string_slots =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 165)			this->string_slots->remove(_slot);
            		}
HXLINE( 168)		::String _path = this->module->string_save_path(_slot);
HXDLIN( 168)		bool _result = true;
HXDLIN( 168)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 168)			::sys::FileSystem_obj::deleteFile(_path);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 168)				_result = false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 168)		return _result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IO_obj,string_destroy,return )

 ::haxe::ds::StringMap IO_obj::string_slots_sync(hx::Null< int >  __o__slot){
int _slot = __o__slot.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_2929d4353300c1f8_178_string_slots_sync)
HXLINE( 181)		if (hx::IsNull( this->string_slots )) {
HXLINE( 182)			this->string_slots =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 185)		 ::haxe::ds::StringMap _string_map = ( ( ::haxe::ds::StringMap)(this->string_slots->get(_slot)) );
HXLINE( 187)		if (hx::IsNull( _string_map )) {
HXLINE( 189)			 ::snow::modules::sdl::IO _this = this->module;
HXDLIN( 189)			 ::snow::api::buffers::ArrayBufferView _data = _this->_data_load(_this->string_save_path(_slot),null());
HXDLIN( 189)			::String _string;
HXDLIN( 189)			if (hx::IsNull( _data )) {
HXLINE( 189)				_string = null();
            			}
            			else {
HXLINE( 189)				_string = ::haxe::io::Bytes_obj::ofData(_data->buffer)->toString();
            			}
HXLINE( 190)			if (hx::IsNull( _string )) {
HXLINE( 191)				_string_map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 193)				 ::snow::modules::sdl::IO _this1 = this->module;
HXDLIN( 193)				if (hx::IsNull( _string )) {
HXLINE( 193)					HX_STACK_DO_THROW(::snow::api::DebugError_obj::null_assertion(HX_("_string was null",8e,d0,63,3a)));
            				}
HXDLIN( 193)				 ::haxe::io::Bytes _bytes = ::haxe::crypto::Base64_obj::decode(_string,null());
HXDLIN( 193)				_string = _bytes->toString();
HXLINE( 194)				_string_map = ( ( ::haxe::ds::StringMap)(::haxe::Unserializer_obj::run(_string)) );
            			}
HXLINE( 197)			this->string_slots->set(_slot,_string_map);
            		}
HXLINE( 201)		return _string_map;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IO_obj,string_slots_sync,return )

 ::snow::api::Promise IO_obj::default_provider( ::snow::Snow _app,::String _id){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_208_default_provider)
HXDLIN( 208)		return this->module->data_load(_id,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(IO_obj,default_provider,return )

void IO_obj::onevent( ::snow::types::SystemEvent _event){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_213_onevent)
HXDLIN( 213)		this->module->onevent(_event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IO_obj,onevent,(void))

void IO_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_2929d4353300c1f8_220_shutdown)
HXDLIN( 220)		this->module->shutdown();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IO_obj,shutdown,(void))


hx::ObjectPtr< IO_obj > IO_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< IO_obj > __this = new IO_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< IO_obj > IO_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	IO_obj *__this = (IO_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IO_obj), true, "snow.systems.io.IO"));
	*(void **)__this = IO_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

IO_obj::IO_obj()
{
}

void IO_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IO);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(module,"module");
	HX_MARK_MEMBER_NAME(string_save_prefix,"string_save_prefix");
	HX_MARK_MEMBER_NAME(string_slots,"string_slots");
	HX_MARK_END_CLASS();
}

void IO_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(module,"module");
	HX_VISIT_MEMBER_NAME(string_save_prefix,"string_save_prefix");
	HX_VISIT_MEMBER_NAME(string_slots,"string_slots");
}

hx::Val IO_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { return hx::Val( module ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"app_path") ) { return hx::Val( app_path_dyn() ); }
		if (HX_FIELD_EQ(inName,"url_open") ) { return hx::Val( url_open_dyn() ); }
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"data_load") ) { return hx::Val( data_load_dyn() ); }
		if (HX_FIELD_EQ(inName,"data_save") ) { return hx::Val( data_save_dyn() ); }
		if (HX_FIELD_EQ(inName,"data_flow") ) { return hx::Val( data_flow_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"string_save") ) { return hx::Val( string_save_dyn() ); }
		if (HX_FIELD_EQ(inName,"string_load") ) { return hx::Val( string_load_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"string_slots") ) { return hx::Val( string_slots ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"app_path_prefs") ) { return hx::Val( app_path_prefs_dyn() ); }
		if (HX_FIELD_EQ(inName,"string_destroy") ) { return hx::Val( string_destroy_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"string_save_path") ) { return hx::Val( string_save_path_dyn() ); }
		if (HX_FIELD_EQ(inName,"default_provider") ) { return hx::Val( default_provider_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"string_slots_sync") ) { return hx::Val( string_slots_sync_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"string_save_prefix") ) { return hx::Val( string_save_prefix ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IO_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"module") ) { module=inValue.Cast<  ::snow::modules::sdl::IO >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"string_slots") ) { string_slots=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"string_save_prefix") ) { string_save_prefix=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IO_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("module",ac,34,d3,c0));
	outFields->push(HX_("string_save_prefix",e6,3d,79,2e));
	outFields->push(HX_("string_slots",87,c3,77,dd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo IO_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(IO_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsObject /*::snow::modules::sdl::IO*/ ,(int)offsetof(IO_obj,module),HX_("module",ac,34,d3,c0)},
	{hx::fsString,(int)offsetof(IO_obj,string_save_prefix),HX_("string_save_prefix",e6,3d,79,2e)},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(IO_obj,string_slots),HX_("string_slots",87,c3,77,dd)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IO_obj_sStaticStorageInfo = 0;
#endif

static ::String IO_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("module",ac,34,d3,c0),
	HX_("string_save_prefix",e6,3d,79,2e),
	HX_("app_path",43,9d,dc,a2),
	HX_("app_path_prefs",f4,00,3e,80),
	HX_("url_open",da,21,ed,d3),
	HX_("data_load",9b,c7,8a,ad),
	HX_("data_save",b2,b8,20,b2),
	HX_("data_flow",63,45,91,a9),
	HX_("string_slots",87,c3,77,dd),
	HX_("string_save_path",f9,cc,0c,b8),
	HX_("string_save",ab,e8,33,77),
	HX_("string_load",94,f7,9d,72),
	HX_("string_destroy",4c,68,ed,0e),
	HX_("string_slots_sync",53,e9,23,84),
	HX_("default_provider",af,6f,f5,8b),
	HX_("onevent",9b,f6,d4,78),
	HX_("shutdown",96,fc,0b,6b),
	::String(null()) };

hx::Class IO_obj::__mClass;

void IO_obj::__register()
{
	IO_obj _hx_dummy;
	IO_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.systems.io.IO",f9,02,1f,f5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IO_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IO_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IO_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IO_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace systems
} // end namespace io
