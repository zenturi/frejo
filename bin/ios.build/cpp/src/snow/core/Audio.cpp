// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_Promise
#include <snow/api/Promise.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_Audio
#include <snow/core/Audio.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_Audio
#include <snow/modules/interfaces/Audio.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioInstance
#include <snow/systems/audio/AudioInstance.h>
#endif
#ifndef INCLUDED_snow_systems_audio_AudioSource
#include <snow/systems/audio/AudioSource.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9854ceb54f542b6e_10_new,"snow.core.Audio","new",0x796c0e64,"snow.core.Audio.new","snow/core/Audio.hx",10,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_15_onevent,"snow.core.Audio","onevent",0x837e869f,"snow.core.Audio.onevent","snow/core/Audio.hx",15,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_16_shutdown,"snow.core.Audio","shutdown",0xb4c07012,"snow.core.Audio.shutdown","snow/core/Audio.hx",16,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_17_suspend,"snow.core.Audio","suspend",0x01f8bf80,"snow.core.Audio.suspend","snow/core/Audio.hx",17,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_18_resume,"snow.core.Audio","resume",0x4c4bc629,"snow.core.Audio.resume","snow/core/Audio.hx",18,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_20_data_from_load,"snow.core.Audio","data_from_load",0x61e15342,"snow.core.Audio.data_from_load","snow/core/Audio.hx",20,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_21_data_from_bytes,"snow.core.Audio","data_from_bytes",0x87f047cf,"snow.core.Audio.data_from_bytes","snow/core/Audio.hx",21,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_23_play,"snow.core.Audio","play",0xc6783370,"snow.core.Audio.play","snow/core/Audio.hx",23,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_24_loop,"snow.core.Audio","loop",0xc3d5abe0,"snow.core.Audio.loop","snow/core/Audio.hx",24,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_25_pause,"snow.core.Audio","pause",0xdb7e9dfa,"snow.core.Audio.pause","snow/core/Audio.hx",25,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_26_unpause,"snow.core.Audio","unpause",0xc4925e01,"snow.core.Audio.unpause","snow/core/Audio.hx",26,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_27_stop,"snow.core.Audio","stop",0xc879f57e,"snow.core.Audio.stop","snow/core/Audio.hx",27,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_29_volume,"snow.core.Audio","volume",0xa31a8656,"snow.core.Audio.volume","snow/core/Audio.hx",29,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_30_pan,"snow.core.Audio","pan",0x796d8f61,"snow.core.Audio.pan","snow/core/Audio.hx",30,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_31_pitch,"snow.core.Audio","pitch",0xe0c782c4,"snow.core.Audio.pitch","snow/core/Audio.hx",31,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_32_position,"snow.core.Audio","position",0x14af1425,"snow.core.Audio.position","snow/core/Audio.hx",32,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_34_volume_of,"snow.core.Audio","volume_of",0x94de0aa0,"snow.core.Audio.volume_of","snow/core/Audio.hx",34,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_35_pan_of,"snow.core.Audio","pan_of",0x2e9bfa75,"snow.core.Audio.pan_of","snow/core/Audio.hx",35,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_36_pitch_of,"snow.core.Audio","pitch_of",0x052c06f2,"snow.core.Audio.pitch_of","snow/core/Audio.hx",36,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_37_position_of,"snow.core.Audio","position_of",0x13b2c831,"snow.core.Audio.position_of","snow/core/Audio.hx",37,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_38_state_of,"snow.core.Audio","state_of",0xa93bd541,"snow.core.Audio.state_of","snow/core/Audio.hx",38,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_39_loop_of,"snow.core.Audio","loop_of",0x2b1f7756,"snow.core.Audio.loop_of","snow/core/Audio.hx",39,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_40_instance_of,"snow.core.Audio","instance_of",0x3d6d64c5,"snow.core.Audio.instance_of","snow/core/Audio.hx",40,0x9be785ec)
HX_LOCAL_STACK_FRAME(_hx_pos_9854ceb54f542b6e_43_audio_format_from_path,"snow.core.Audio","audio_format_from_path",0xeaf78ad7,"snow.core.Audio.audio_format_from_path","snow/core/Audio.hx",43,0x9be785ec)
namespace snow{
namespace core{

void Audio_obj::__construct( ::snow::Snow _app){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_10_new)
HXLINE(  13)		this->active = false;
HXLINE(  14)		this->app = _app;
            	}

Dynamic Audio_obj::__CreateEmpty() { return new Audio_obj; }

void *Audio_obj::_hx_vtable = 0;

Dynamic Audio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Audio_obj > _hx_result = new Audio_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Audio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x42d34754;
}

static ::snow::modules::interfaces::Audio_obj _hx_snow_core_Audio__hx_snow_modules_interfaces_Audio= {
	( void (hx::Object::*)( ::snow::types::SystemEvent))&::snow::core::Audio_obj::onevent,
	( void (hx::Object::*)())&::snow::core::Audio_obj::shutdown,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::Dynamic, ::Dynamic))&::snow::core::Audio_obj::data_from_load,
	(  ::snow::api::Promise (hx::Object::*)(::String, ::snow::api::buffers::ArrayBufferView, ::Dynamic))&::snow::core::Audio_obj::data_from_bytes,
	(  ::Dynamic (hx::Object::*)( ::snow::systems::audio::AudioSource,Float,bool))&::snow::core::Audio_obj::play,
	(  ::Dynamic (hx::Object::*)( ::snow::systems::audio::AudioSource,Float,bool))&::snow::core::Audio_obj::loop,
	( void (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::pause,
	( void (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::unpause,
	( void (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::stop,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::core::Audio_obj::volume,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::core::Audio_obj::pan,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::core::Audio_obj::pitch,
	( void (hx::Object::*)( ::Dynamic,Float))&::snow::core::Audio_obj::position,
	( Float (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::volume_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::pan_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::pitch_of,
	( Float (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::position_of,
	( int (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::state_of,
	( bool (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::loop_of,
	(  ::snow::systems::audio::AudioInstance (hx::Object::*)( ::Dynamic))&::snow::core::Audio_obj::instance_of,
	( void (hx::Object::*)())&::snow::core::Audio_obj::suspend,
	( void (hx::Object::*)())&::snow::core::Audio_obj::resume,
};

void *Audio_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x955683b8: return &_hx_snow_core_Audio__hx_snow_modules_interfaces_Audio;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Audio_obj::onevent( ::snow::types::SystemEvent event){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_15_onevent)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,onevent,(void))

void Audio_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_16_shutdown)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,shutdown,(void))

void Audio_obj::suspend(){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_17_suspend)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,suspend,(void))

void Audio_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_18_resume)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Audio_obj,resume,(void))

 ::snow::api::Promise Audio_obj::data_from_load(::String _path, ::Dynamic __o__is_stream, ::Dynamic _format){
 ::Dynamic _is_stream = __o__is_stream.Default(false);
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_20_data_from_load)
HXDLIN(  20)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,data_from_load,return )

 ::snow::api::Promise Audio_obj::data_from_bytes(::String _id, ::snow::api::buffers::ArrayBufferView _bytes, ::Dynamic _format){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_21_data_from_bytes)
HXDLIN(  21)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,data_from_bytes,return )

 ::Dynamic Audio_obj::play( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_23_play)
HXDLIN(  23)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,play,return )

 ::Dynamic Audio_obj::loop( ::snow::systems::audio::AudioSource _source,Float _volume,bool _paused){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_24_loop)
HXDLIN(  24)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Audio_obj,loop,return )

void Audio_obj::pause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_25_pause)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pause,(void))

void Audio_obj::unpause( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_26_unpause)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,unpause,(void))

void Audio_obj::stop( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_27_stop)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,stop,(void))

void Audio_obj::volume( ::Dynamic _handle,Float _volume){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_29_volume)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,volume,(void))

void Audio_obj::pan( ::Dynamic _handle,Float _pan){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_30_pan)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pan,(void))

void Audio_obj::pitch( ::Dynamic _handle,Float _pitch){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_31_pitch)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,pitch,(void))

void Audio_obj::position( ::Dynamic _handle,Float _time){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_32_position)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Audio_obj,position,(void))

Float Audio_obj::volume_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_34_volume_of)
HXDLIN(  34)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,volume_of,return )

Float Audio_obj::pan_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_35_pan_of)
HXDLIN(  35)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pan_of,return )

Float Audio_obj::pitch_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_36_pitch_of)
HXDLIN(  36)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,pitch_of,return )

Float Audio_obj::position_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_37_position_of)
HXDLIN(  37)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,position_of,return )

int Audio_obj::state_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_38_state_of)
HXDLIN(  38)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,state_of,return )

bool Audio_obj::loop_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_39_loop_of)
HXDLIN(  39)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,loop_of,return )

 ::snow::systems::audio::AudioInstance Audio_obj::instance_of( ::Dynamic _handle){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_40_instance_of)
HXDLIN(  40)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,instance_of,return )

 ::Dynamic Audio_obj::audio_format_from_path(::String _path){
            	HX_STACKFRAME(&_hx_pos_9854ceb54f542b6e_43_audio_format_from_path)
HXLINE(  45)		::String _ext = ::haxe::io::Path_obj::extension(_path);
HXLINE(  46)		::String _hx_switch_0 = _ext;
            		if (  (_hx_switch_0==HX_("ogg",4f,94,54,00)) ){
HXLINE(  48)			return 2;
HXDLIN(  48)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("pcm",1a,53,55,00)) ){
HXLINE(  49)			return 4;
HXDLIN(  49)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("wav",2c,a1,5a,00)) ){
HXLINE(  47)			return 3;
HXDLIN(  47)			goto _hx_goto_23;
            		}
            		/* default */{
HXLINE(  50)			return 0;
            		}
            		_hx_goto_23:;
HXLINE(  46)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Audio_obj,audio_format_from_path,return )


hx::ObjectPtr< Audio_obj > Audio_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Audio_obj > __this = new Audio_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Audio_obj > Audio_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Audio_obj *__this = (Audio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Audio_obj), true, "snow.core.Audio"));
	*(void **)__this = Audio_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Audio_obj::Audio_obj()
{
}

void Audio_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Audio);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_END_CLASS();
}

void Audio_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(active,"active");
}

hx::Val Audio_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		if (HX_FIELD_EQ(inName,"pan") ) { return hx::Val( pan_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch") ) { return hx::Val( pitch_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"pan_of") ) { return hx::Val( pan_of_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		if (HX_FIELD_EQ(inName,"suspend") ) { return hx::Val( suspend_dyn() ); }
		if (HX_FIELD_EQ(inName,"unpause") ) { return hx::Val( unpause_dyn() ); }
		if (HX_FIELD_EQ(inName,"loop_of") ) { return hx::Val( loop_of_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return hx::Val( shutdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position_dyn() ); }
		if (HX_FIELD_EQ(inName,"pitch_of") ) { return hx::Val( pitch_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"state_of") ) { return hx::Val( state_of_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"volume_of") ) { return hx::Val( volume_of_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"position_of") ) { return hx::Val( position_of_dyn() ); }
		if (HX_FIELD_EQ(inName,"instance_of") ) { return hx::Val( instance_of_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"data_from_load") ) { return hx::Val( data_from_load_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"data_from_bytes") ) { return hx::Val( data_from_bytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Audio_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 22:
		if (HX_FIELD_EQ(inName,"audio_format_from_path") ) { outValue = audio_format_from_path_dyn(); return true; }
	}
	return false;
}

hx::Val Audio_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Audio_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("active",c6,41,46,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Audio_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Audio_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsBool,(int)offsetof(Audio_obj,active),HX_("active",c6,41,46,16)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Audio_obj_sStaticStorageInfo = 0;
#endif

static ::String Audio_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("active",c6,41,46,16),
	HX_("onevent",9b,f6,d4,78),
	HX_("shutdown",96,fc,0b,6b),
	HX_("suspend",7c,2f,4f,f7),
	HX_("resume",ad,69,84,08),
	HX_("data_from_load",c6,1a,6f,90),
	HX_("data_from_bytes",cb,13,71,15),
	HX_("play",f4,2d,5a,4a),
	HX_("loop",64,a6,b7,47),
	HX_("pause",f6,d6,57,bd),
	HX_("unpause",fd,cd,e8,b9),
	HX_("stop",02,f0,5b,4c),
	HX_("volume",da,29,53,5f),
	HX_("pan",5d,51,55,00),
	HX_("pitch",c0,bb,a0,c2),
	HX_("position",a9,a0,fa,ca),
	HX_("volume_of",9c,71,ad,60),
	HX_("pan_of",f9,9d,d4,ea),
	HX_("pitch_of",76,93,77,bb),
	HX_("position_of",2d,e6,66,ff),
	HX_("state_of",c5,61,87,5f),
	HX_("loop_of",52,e7,75,20),
	HX_("instance_of",c1,82,21,29),
	::String(null()) };

hx::Class Audio_obj::__mClass;

static ::String Audio_obj_sStaticFields[] = {
	HX_("audio_format_from_path",5b,76,9e,5b),
	::String(null())
};

void Audio_obj::__register()
{
	Audio_obj _hx_dummy;
	Audio_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.core.Audio",72,4c,ec,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Audio_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Audio_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Audio_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Audio_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Audio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Audio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
