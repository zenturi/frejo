// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_api_buffers_ArrayBufferView
#include <snow/api/buffers/ArrayBufferView.h>
#endif
#ifndef INCLUDED_snow_core_native_audio_AudioDataWAV
#include <snow/core/native/audio/AudioDataWAV.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif
#ifndef INCLUDED_snow_types_AudioData
#include <snow/types/AudioData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_32d531bfc76ba268_16_new,"snow.core.native.audio.AudioDataWAV","new",0x7e745c49,"snow.core.native.audio.AudioDataWAV.new","snow/core/native/audio/AudioDataWAV.hx",16,0xe0c91f25)
HX_LOCAL_STACK_FRAME(_hx_pos_32d531bfc76ba268_37_seek,"snow.core.native.audio.AudioDataWAV","seek",0x2aaa656f,"snow.core.native.audio.AudioDataWAV.seek","snow/core/native/audio/AudioDataWAV.hx",37,0xe0c91f25)
HX_LOCAL_STACK_FRAME(_hx_pos_32d531bfc76ba268_45_portion,"snow.core.native.audio.AudioDataWAV","portion",0x6ccb2550,"snow.core.native.audio.AudioDataWAV.portion","snow/core/native/audio/AudioDataWAV.hx",45,0xe0c91f25)
namespace snow{
namespace core{
namespace native{
namespace audio{

void AudioDataWAV_obj::__construct( ::snow::Snow _app,::cpp::Pointer<  SDL_RWops > _handle,int _offset, ::Dynamic _opt){
            	HX_STACKFRAME(&_hx_pos_32d531bfc76ba268_16_new)
HXLINE(  18)		this->handle = _handle;
HXLINE(  19)		this->data_offset = _offset;
HXLINE(  21)		super::__construct(_app,_opt);
            	}

Dynamic AudioDataWAV_obj::__CreateEmpty() { return new AudioDataWAV_obj; }

void *AudioDataWAV_obj::_hx_vtable = 0;

Dynamic AudioDataWAV_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioDataWAV_obj > _hx_result = new AudioDataWAV_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool AudioDataWAV_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x09db98a5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x09db98a5;
	} else {
		return inClassId==(int)0x491fc56a;
	}
}

bool AudioDataWAV_obj::seek(int _to){
            	HX_STACKFRAME(&_hx_pos_32d531bfc76ba268_37_seek)
HXLINE(  39)		::cpp::Pointer<  SDL_RWops > tmp = this->handle;
HXDLIN(  39)		 ::snow::modules::sdl::IO _result = this->app->io->module;
HXDLIN(  39)		int _result1 = _result->file_seek(tmp,(this->data_offset + _to),0);
HXLINE(  41)		return (_result1 == 0);
            	}


::Array< int > AudioDataWAV_obj::portion( ::snow::api::buffers::ArrayBufferView _into,int _start,int _len,::Array< int > _into_result){
            	HX_STACKFRAME(&_hx_pos_32d531bfc76ba268_45_portion)
HXLINE(  47)		if ((_start != -1)) {
HXLINE(  48)			this->seek((_start + this->data_offset));
            		}
HXLINE(  51)		bool _complete = false;
HXLINE(  52)		int _read_len = _len;
HXLINE(  53)		::cpp::Pointer<  SDL_RWops > tmp = this->handle;
HXDLIN(  53)		int _current_pos = this->app->io->module->file_tell(tmp);
HXDLIN(  53)		int _current_pos1 = (_current_pos - this->data_offset);
HXLINE(  54)		int _distance_to_end = (this->length - _current_pos1);
HXLINE(  56)		if ((_distance_to_end <= _read_len)) {
HXLINE(  57)			_read_len = _distance_to_end;
HXLINE(  58)			_complete = true;
            		}
HXLINE(  61)		if ((_read_len <= 0)) {
HXLINE(  62)			_into_result[0] = 0;
HXLINE(  63)			_into_result[1] = 1;
HXLINE(  64)			return _into_result;
            		}
HXLINE(  70)		int _byte_gap = (_read_len & 3);
HXLINE(  72)		int _n_elements = 1;
HXLINE(  73)		::cpp::Pointer<  SDL_RWops > tmp1 = this->handle;
HXDLIN(  73)		int _elements_read = this->app->io->module->file_read(tmp1,_into,_read_len,_n_elements);
HXLINE(  77)		if ((_elements_read == 0)) {
HXLINE(  77)			_complete = true;
            		}
HXLINE(  81)		_into_result[0] = _read_len;
HXLINE(  82)		int _hx_tmp;
HXDLIN(  82)		if (_complete) {
HXLINE(  82)			_hx_tmp = 1;
            		}
            		else {
HXLINE(  82)			_hx_tmp = 0;
            		}
HXDLIN(  82)		_into_result[1] = _hx_tmp;
HXLINE(  84)		return _into_result;
            	}



hx::ObjectPtr< AudioDataWAV_obj > AudioDataWAV_obj::__new( ::snow::Snow _app,::cpp::Pointer<  SDL_RWops > _handle,int _offset, ::Dynamic _opt) {
	hx::ObjectPtr< AudioDataWAV_obj > __this = new AudioDataWAV_obj();
	__this->__construct(_app,_handle,_offset,_opt);
	return __this;
}

hx::ObjectPtr< AudioDataWAV_obj > AudioDataWAV_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app,::cpp::Pointer<  SDL_RWops > _handle,int _offset, ::Dynamic _opt) {
	AudioDataWAV_obj *__this = (AudioDataWAV_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AudioDataWAV_obj), true, "snow.core.native.audio.AudioDataWAV"));
	*(void **)__this = AudioDataWAV_obj::_hx_vtable;
	__this->__construct(_app,_handle,_offset,_opt);
	return __this;
}

AudioDataWAV_obj::AudioDataWAV_obj()
{
}

void AudioDataWAV_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioDataWAV);
	HX_MARK_MEMBER_NAME(data_offset,"data_offset");
	HX_MARK_MEMBER_NAME(handle,"handle");
	 ::snow::types::AudioData_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AudioDataWAV_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data_offset,"data_offset");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	 ::snow::types::AudioData_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AudioDataWAV_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seek") ) { return hx::Val( seek_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"portion") ) { return hx::Val( portion_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"data_offset") ) { return hx::Val( data_offset ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AudioDataWAV_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast< ::cpp::Pointer<  SDL_RWops > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"data_offset") ) { data_offset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioDataWAV_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data_offset",48,cc,50,43));
	outFields->push(HX_("handle",a8,83,fd,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AudioDataWAV_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(AudioDataWAV_obj,data_offset),HX_("data_offset",48,cc,50,43)},
	{hx::fsObject /*::cpp::Pointer< SDL_RWops >*/ ,(int)offsetof(AudioDataWAV_obj,handle),HX_("handle",a8,83,fd,b7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioDataWAV_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioDataWAV_obj_sMemberFields[] = {
	HX_("data_offset",48,cc,50,43),
	HX_("handle",a8,83,fd,b7),
	HX_("seek",78,85,50,4c),
	HX_("portion",e7,f0,ab,83),
	::String(null()) };

hx::Class AudioDataWAV_obj::__mClass;

void AudioDataWAV_obj::__register()
{
	AudioDataWAV_obj _hx_dummy;
	AudioDataWAV_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.core.native.audio.AudioDataWAV",d7,83,94,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioDataWAV_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioDataWAV_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioDataWAV_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioDataWAV_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
} // end namespace native
} // end namespace audio
