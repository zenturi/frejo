// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_io_IO
#include <snow/core/native/io/IO.h>
#endif
#ifndef INCLUDED_snow_modules_interfaces_IO
#include <snow/modules/interfaces/IO.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_IO
#include <snow/modules/sdl/IO.h>
#endif
#ifndef INCLUDED_snow_systems_io_IO
#include <snow/systems/io/IO.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a3649154d10a185_18_new,"snow.core.native.Runtime","new",0xe2653317,"snow.core.native.Runtime.new","snow/core/native/Runtime.hx",18,0x89911f1a)
namespace snow{
namespace core{
namespace native{

void Runtime_obj::__construct( ::snow::Snow _app){
            	HX_STACKFRAME(&_hx_pos_7a3649154d10a185_18_new)
HXLINE(  20)		this->name = HX_("native",97,c9,1c,22);
HXLINE(  27)		this->app = _app;
HXLINE(  30)		this->app->os = HX_("ios",cd,0d,50,00);
HXDLIN(  30)		this->app->platform = HX_("ios",cd,0d,50,00);
HXLINE(  38)		::String _app_path = this->app->io->module->app_path();
HXLINE(  43)		bool _hx_tmp;
HXDLIN(  43)		if (hx::IsNotNull( _app_path )) {
HXLINE(  43)			_hx_tmp = (_app_path != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  43)			_hx_tmp = false;
            		}
HXDLIN(  43)		if (_hx_tmp) {
HXLINE(  44)			::Sys_obj::setCwd(_app_path);
            		}
            	}

Dynamic Runtime_obj::__CreateEmpty() { return new Runtime_obj; }

void *Runtime_obj::_hx_vtable = 0;

Dynamic Runtime_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Runtime_obj > _hx_result = new Runtime_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Runtime_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x584d5d9f;
}

static ::snow::core::Runtime_obj _hx_snow_core_native_Runtime__hx_snow_core_Runtime= {
};

void *Runtime_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9fe29ed6: return &_hx_snow_core_native_Runtime__hx_snow_core_Runtime;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


hx::ObjectPtr< Runtime_obj > Runtime_obj::__new( ::snow::Snow _app) {
	hx::ObjectPtr< Runtime_obj > __this = new Runtime_obj();
	__this->__construct(_app);
	return __this;
}

hx::ObjectPtr< Runtime_obj > Runtime_obj::__alloc(hx::Ctx *_hx_ctx, ::snow::Snow _app) {
	Runtime_obj *__this = (Runtime_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Runtime_obj), true, "snow.core.native.Runtime"));
	*(void **)__this = Runtime_obj::_hx_vtable;
	__this->__construct(_app);
	return __this;
}

Runtime_obj::Runtime_obj()
{
}

void Runtime_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Runtime);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_END_CLASS();
}

void Runtime_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(app,"app");
}

hx::Val Runtime_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Runtime_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Runtime_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("app",a1,fc,49,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Runtime_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Runtime_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(Runtime_obj,app),HX_("app",a1,fc,49,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Runtime_obj_sStaticStorageInfo = 0;
#endif

static ::String Runtime_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("app",a1,fc,49,00),
	::String(null()) };

hx::Class Runtime_obj::__mClass;

void Runtime_obj::__register()
{
	Runtime_obj _hx_dummy;
	Runtime_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.core.native.Runtime",a5,5b,c2,c2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Runtime_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Runtime_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Runtime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Runtime_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
} // end namespace core
} // end namespace native
