// Generated by Haxe 4.0.0-preview.4+1e3e5e0
#include <hxcpp.h>

#ifndef INCLUDED_0a05af74edef3e68
#define INCLUDED_0a05af74edef3e68
#include "linc_timestamp.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_frejo_app_Application
#include <frejo/app/Application.h>
#endif
#ifndef INCLUDED_snow_App
#include <snow/App.h>
#endif
#ifndef INCLUDED_snow_Snow
#include <snow/Snow.h>
#endif
#ifndef INCLUDED_snow_core_Runtime
#include <snow/core/Runtime.h>
#endif
#ifndef INCLUDED_snow_core_native_Runtime
#include <snow/core/native/Runtime.h>
#endif
#ifndef INCLUDED_snow_modules_sdl_Runtime
#include <snow/modules/sdl/Runtime.h>
#endif
#ifndef INCLUDED_snow_types_ModState
#include <snow/types/ModState.h>
#endif
#ifndef INCLUDED_snow_types_SystemEvent
#include <snow/types/SystemEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2e7544c48b16306f_10_new,"snow.App","new",0x90aac908,"snow.App.new","snow/App.hx",10,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_70_config,"snow.App","config",0xed32371a,"snow.App.config","snow/App.hx",70,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_72_ready,"snow.App","ready",0x753f130b,"snow.App.ready","snow/App.hx",72,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_74_update,"snow.App","update",0xac656661,"snow.App.update","snow/App.hx",74,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_76_tick,"snow.App","tick",0x08bf5db5,"snow.App.tick","snow/App.hx",76,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_78_ondestroy,"snow.App","ondestroy",0xb8d6a463,"snow.App.ondestroy","snow/App.hx",78,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_80_onevent,"snow.App","onevent",0x07596343,"snow.App.onevent","snow/App.hx",80,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_83_ontickstart,"snow.App","ontickstart",0x0f08438e,"snow.App.ontickstart","snow/App.hx",83,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_85_ontickend,"snow.App","ontickend",0xaf357007,"snow.App.ontickend","snow/App.hx",85,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_88_onkeydown,"snow.App","onkeydown",0x45beb4ea,"snow.App.onkeydown","snow/App.hx",88,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_90_onkeyup,"snow.App","onkeyup",0x709370e3,"snow.App.onkeyup","snow/App.hx",90,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_92_ontextinput,"snow.App","ontextinput",0x66c9c7e6,"snow.App.ontextinput","snow/App.hx",92,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_95_onmousedown,"snow.App","onmousedown",0xa6d568b0,"snow.App.onmousedown","snow/App.hx",95,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_97_onmouseup,"snow.App","onmouseup",0x54c38729,"snow.App.onmouseup","snow/App.hx",97,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_99_onmousewheel,"snow.App","onmousewheel",0x3fd5088d,"snow.App.onmousewheel","snow/App.hx",99,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_101_onmousemove,"snow.App","onmousemove",0xacc8535f,"snow.App.onmousemove","snow/App.hx",101,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_104_ontouchdown,"snow.App","ontouchdown",0xbfed3f4a,"snow.App.ontouchdown","snow/App.hx",104,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_106_ontouchup,"snow.App","ontouchup",0x6d48a343,"snow.App.ontouchup","snow/App.hx",106,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_108_ontouchmove,"snow.App","ontouchmove",0xc5e029f9,"snow.App.ontouchmove","snow/App.hx",108,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_111_ongamepadaxis,"snow.App","ongamepadaxis",0x065d41ab,"snow.App.ongamepadaxis","snow/App.hx",111,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_113_ongamepaddown,"snow.App","ongamepaddown",0x08521d6c,"snow.App.ongamepaddown","snow/App.hx",113,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_115_ongamepadup,"snow.App","ongamepadup",0x022454e5,"snow.App.ongamepadup","snow/App.hx",115,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_118_ongamepaddevice,"snow.App","ongamepaddevice",0x9476d820,"snow.App.ongamepaddevice","snow/App.hx",118,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_121_internal_init,"snow.App","internal_init",0x2c38ed3a,"snow.App.internal_init","snow/App.hx",121,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_136_internal_tick,"snow.App","internal_tick",0x337a7587,"snow.App.internal_tick","snow/App.hx",136,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_161_internal_tick_default,"snow.App","internal_tick_default",0xa54206c9,"snow.App.internal_tick_default","snow/App.hx",161,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_190_internal_tick_fixed_timestep,"snow.App","internal_tick_fixed_timestep",0x5966903c,"snow.App.internal_tick_fixed_timestep","snow/App.hx",190,0xf7b8a629)
HX_LOCAL_STACK_FRAME(_hx_pos_2e7544c48b16306f_224_main,"snow.App","main",0x0418d291,"snow.App.main","snow/App.hx",224,0xf7b8a629)
namespace snow{

void App_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_10_new)
HXLINE(  64)		this->next_tick = ((Float)0);
HXLINE(  58)		this->fixed_overflow = ((Float)0.0);
HXLINE(  56)		this->fixed_frame_time = ((Float)0.0167);
HXLINE(  54)		this->fixed_timestep = false;
HXLINE(  52)		this->fixed_alpha = ((Float)1.0);
HXLINE(  47)		this->sim_time = ((Float)0);
HXLINE(  45)		this->sim_delta = ((Float)0.0166666666666666664);
HXLINE(  42)		this->frame_max_delta = ((Float)0.25);
HXLINE(  40)		this->frame_delta = ((Float)0.0166666666666666664);
HXLINE(  38)		this->frame_start_prev = ((Float)0.0);
HXLINE(  36)		this->frame_start = ((Float)0.0166666666666666664);
HXLINE(  33)		this->tick_delta = ((Float)0.0166666666666666664);
HXLINE(  31)		this->tick_start_prev = ((Float)0.0);
HXLINE(  29)		this->tick_start = ((Float)0.0166666666666666664);
HXLINE(  24)		this->update_rate = ((Float)0);
HXLINE(  22)		this->fixed_delta = ((Float)0);
HXLINE(  20)		this->timescale = ((Float)1);
            	}

Dynamic App_obj::__CreateEmpty() { return new App_obj; }

void *App_obj::_hx_vtable = 0;

Dynamic App_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< App_obj > _hx_result = new App_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool App_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e2b5c5e;
}

 ::Dynamic App_obj::config( ::Dynamic _config){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_70_config)
HXDLIN(  70)		return _config;
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,config,return )

void App_obj::ready(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_72_ready)
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,ready,(void))

void App_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_74_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,update,(void))

void App_obj::tick(Float dt){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_76_tick)
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,tick,(void))

void App_obj::ondestroy(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_78_ondestroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,ondestroy,(void))

void App_obj::onevent( ::snow::types::SystemEvent event){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_80_onevent)
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,onevent,(void))

void App_obj::ontickstart(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_83_ontickstart)
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,ontickstart,(void))

void App_obj::ontickend(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_85_ontickend)
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,ontickend,(void))

void App_obj::onkeydown(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_88_onkeydown)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,onkeydown,(void))

void App_obj::onkeyup(int keycode,int scancode,bool repeat, ::snow::types::ModState mod,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_90_onkeyup)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,onkeyup,(void))

void App_obj::ontextinput(::String text,int start,int length,int type,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_92_ontextinput)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,ontextinput,(void))

void App_obj::onmousedown(int x,int y,int button,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_95_onmousedown)
            	}


HX_DEFINE_DYNAMIC_FUNC5(App_obj,onmousedown,(void))

void App_obj::onmouseup(int x,int y,int button,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_97_onmouseup)
            	}


HX_DEFINE_DYNAMIC_FUNC5(App_obj,onmouseup,(void))

void App_obj::onmousewheel(Float x,Float y,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_99_onmousewheel)
            	}


HX_DEFINE_DYNAMIC_FUNC4(App_obj,onmousewheel,(void))

void App_obj::onmousemove(int x,int y,int xrel,int yrel,Float timestamp,int window_id){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_101_onmousemove)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,onmousemove,(void))

void App_obj::ontouchdown(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_104_ontouchdown)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,ontouchdown,(void))

void App_obj::ontouchup(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_106_ontouchup)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,ontouchup,(void))

void App_obj::ontouchmove(Float x,Float y,Float dx,Float dy,int touch_id,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_108_ontouchmove)
            	}


HX_DEFINE_DYNAMIC_FUNC6(App_obj,ontouchmove,(void))

void App_obj::ongamepadaxis(int gamepad,int axis,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_111_ongamepadaxis)
            	}


HX_DEFINE_DYNAMIC_FUNC4(App_obj,ongamepadaxis,(void))

void App_obj::ongamepaddown(int gamepad,int button,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_113_ongamepaddown)
            	}


HX_DEFINE_DYNAMIC_FUNC4(App_obj,ongamepaddown,(void))

void App_obj::ongamepadup(int gamepad,int button,Float value,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_115_ongamepadup)
            	}


HX_DEFINE_DYNAMIC_FUNC4(App_obj,ongamepadup,(void))

void App_obj::ongamepaddevice(int gamepad,::String id,int type,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_118_ongamepaddevice)
            	}


HX_DEFINE_DYNAMIC_FUNC4(App_obj,ongamepaddevice,(void))

void App_obj::internal_init(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_121_internal_init)
HXLINE( 123)		this->sim_time = ( (Float)(0) );
HXLINE( 124)		this->fixed_frame_time = ((Float)0.0166666666666666664);
HXLINE( 126)		 ::snow::Snow _this = this->app;
HXDLIN( 126)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 126)		this->tick_start = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 127)		this->tick_start_prev = (this->tick_start - this->fixed_frame_time);
HXLINE( 128)		this->tick_delta = this->fixed_frame_time;
HXLINE( 130)		 ::snow::Snow _this1 = this->app;
HXDLIN( 130)		Float _hx_tmp1 = linc::timestamp::now();
HXDLIN( 130)		this->frame_start = (_hx_tmp1 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 131)		this->frame_start_prev = (this->frame_start - this->fixed_frame_time);
HXLINE( 132)		this->frame_delta = (this->sim_delta = this->fixed_frame_time);
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,internal_init,(void))

void App_obj::internal_tick(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_136_internal_tick)
HXLINE( 138)		this->ontickstart();
HXLINE( 140)		 ::snow::Snow _this = this->app;
HXDLIN( 140)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 140)		this->tick_start = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 141)		this->tick_delta = (this->tick_start - this->tick_start_prev);
HXLINE( 142)		this->tick_start_prev = this->tick_start;
HXLINE( 144)		if (this->fixed_timestep) {
HXLINE( 145)			 ::snow::Snow _this1 = this->app;
HXDLIN( 145)			Float _hx_tmp1 = linc::timestamp::now();
HXDLIN( 145)			this->frame_start = (_hx_tmp1 - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXDLIN( 145)			this->frame_delta = (this->frame_start - this->frame_start_prev);
HXDLIN( 145)			this->frame_start_prev = this->frame_start;
HXDLIN( 145)			this->sim_delta = (this->frame_delta * this->timescale);
HXDLIN( 145)			if ((this->sim_delta > this->frame_max_delta)) {
HXLINE( 145)				this->sim_delta = this->frame_max_delta;
            			}
HXDLIN( 145)			 ::snow::App _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)			_hx_tmp2->fixed_overflow = (_hx_tmp2->fixed_overflow + this->sim_delta);
HXDLIN( 145)			Float _slice = (this->fixed_frame_time * this->timescale);
HXDLIN( 145)			while((this->fixed_overflow >= this->fixed_frame_time)){
HXLINE( 145)				this->update(_slice);
HXDLIN( 145)				 ::snow::App _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)				_hx_tmp3->sim_time = (_hx_tmp3->sim_time + _slice);
HXDLIN( 145)				 ::snow::App _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)				_hx_tmp4->fixed_overflow = (_hx_tmp4->fixed_overflow - _slice);
            			}
HXDLIN( 145)			this->fixed_alpha = (this->fixed_overflow / this->fixed_frame_time);
            		}
            		else {
HXLINE( 147)			this->internal_tick_default();
            		}
HXLINE( 150)		this->tick(this->tick_delta);
HXLINE( 152)		this->ontickend();
HXLINE( 155)		::Sys_obj::sleep(( (Float)(0) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,internal_tick,(void))

void App_obj::internal_tick_default(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_161_internal_tick_default)
HXLINE( 163)		if ((this->update_rate != 0)) {
HXLINE( 165)			 ::snow::Snow _this = this->app;
HXDLIN( 165)			Float _hx_tmp = linc::timestamp::now();
HXDLIN( 165)			if (((_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start) < this->next_tick)) {
HXLINE( 166)				return;
            			}
HXLINE( 169)			 ::snow::Snow _this1 = this->app;
HXDLIN( 169)			Float _hx_tmp1 = linc::timestamp::now();
HXDLIN( 169)			this->next_tick = ((_hx_tmp1 - ::snow::modules::sdl::Runtime_obj::timestamp_start) + this->update_rate);
            		}
HXLINE( 173)		this->frame_start = this->tick_start;
HXLINE( 174)		this->frame_delta = (this->frame_start - this->frame_start_prev);
HXLINE( 175)		this->frame_start_prev = this->frame_start;
HXLINE( 177)		if ((this->frame_delta > this->frame_max_delta)) {
HXLINE( 178)			this->frame_delta = this->frame_max_delta;
            		}
HXLINE( 181)		Float _used_delta;
HXDLIN( 181)		if ((this->fixed_delta == 0)) {
HXLINE( 181)			_used_delta = this->frame_delta;
            		}
            		else {
HXLINE( 181)			_used_delta = this->fixed_delta;
            		}
HXLINE( 182)		_used_delta = (_used_delta * this->timescale);
HXLINE( 183)		this->sim_delta = _used_delta;
HXLINE( 185)		 ::snow::App _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 185)		_hx_tmp2->sim_time = (_hx_tmp2->sim_time + _used_delta);
HXLINE( 186)		this->update(_used_delta);
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,internal_tick_default,(void))

void App_obj::internal_tick_fixed_timestep(){
            	HX_STACKFRAME(&_hx_pos_2e7544c48b16306f_190_internal_tick_fixed_timestep)
HXLINE( 192)		 ::snow::Snow _this = this->app;
HXDLIN( 192)		Float _hx_tmp = linc::timestamp::now();
HXDLIN( 192)		this->frame_start = (_hx_tmp - ::snow::modules::sdl::Runtime_obj::timestamp_start);
HXLINE( 193)		this->frame_delta = (this->frame_start - this->frame_start_prev);
HXLINE( 194)		this->frame_start_prev = this->frame_start;
HXLINE( 196)		this->sim_delta = (this->frame_delta * this->timescale);
HXLINE( 197)		if ((this->sim_delta > this->frame_max_delta)) {
HXLINE( 198)			this->sim_delta = this->frame_max_delta;
            		}
HXLINE( 201)		 ::snow::App _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 201)		_hx_tmp1->fixed_overflow = (_hx_tmp1->fixed_overflow + this->sim_delta);
HXLINE( 203)		Float _slice = (this->fixed_frame_time * this->timescale);
HXLINE( 204)		while((this->fixed_overflow >= this->fixed_frame_time)){
HXLINE( 206)			this->update(_slice);
HXLINE( 207)			 ::snow::App _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp2->sim_time = (_hx_tmp2->sim_time + _slice);
HXLINE( 208)			 ::snow::App _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 208)			_hx_tmp3->fixed_overflow = (_hx_tmp3->fixed_overflow - _slice);
            		}
HXLINE( 212)		this->fixed_alpha = (this->fixed_overflow / this->fixed_frame_time);
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,internal_tick_fixed_timestep,(void))

void App_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_2e7544c48b16306f_224_main)
HXDLIN( 224)		 ::snow::Snow_obj::__alloc( HX_CTX , ::Main_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(App_obj,main,(void))


hx::ObjectPtr< App_obj > App_obj::__new() {
	hx::ObjectPtr< App_obj > __this = new App_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< App_obj > App_obj::__alloc(hx::Ctx *_hx_ctx) {
	App_obj *__this = (App_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(App_obj), true, "snow.App"));
	*(void **)__this = App_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

App_obj::App_obj()
{
}

void App_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(App);
	HX_MARK_MEMBER_NAME(app,"app");
	HX_MARK_MEMBER_NAME(timescale,"timescale");
	HX_MARK_MEMBER_NAME(fixed_delta,"fixed_delta");
	HX_MARK_MEMBER_NAME(update_rate,"update_rate");
	HX_MARK_MEMBER_NAME(tick_start,"tick_start");
	HX_MARK_MEMBER_NAME(tick_start_prev,"tick_start_prev");
	HX_MARK_MEMBER_NAME(tick_delta,"tick_delta");
	HX_MARK_MEMBER_NAME(frame_start,"frame_start");
	HX_MARK_MEMBER_NAME(frame_start_prev,"frame_start_prev");
	HX_MARK_MEMBER_NAME(frame_delta,"frame_delta");
	HX_MARK_MEMBER_NAME(frame_max_delta,"frame_max_delta");
	HX_MARK_MEMBER_NAME(sim_delta,"sim_delta");
	HX_MARK_MEMBER_NAME(sim_time,"sim_time");
	HX_MARK_MEMBER_NAME(fixed_alpha,"fixed_alpha");
	HX_MARK_MEMBER_NAME(fixed_timestep,"fixed_timestep");
	HX_MARK_MEMBER_NAME(fixed_frame_time,"fixed_frame_time");
	HX_MARK_MEMBER_NAME(fixed_overflow,"fixed_overflow");
	HX_MARK_MEMBER_NAME(next_tick,"next_tick");
	HX_MARK_END_CLASS();
}

void App_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(app,"app");
	HX_VISIT_MEMBER_NAME(timescale,"timescale");
	HX_VISIT_MEMBER_NAME(fixed_delta,"fixed_delta");
	HX_VISIT_MEMBER_NAME(update_rate,"update_rate");
	HX_VISIT_MEMBER_NAME(tick_start,"tick_start");
	HX_VISIT_MEMBER_NAME(tick_start_prev,"tick_start_prev");
	HX_VISIT_MEMBER_NAME(tick_delta,"tick_delta");
	HX_VISIT_MEMBER_NAME(frame_start,"frame_start");
	HX_VISIT_MEMBER_NAME(frame_start_prev,"frame_start_prev");
	HX_VISIT_MEMBER_NAME(frame_delta,"frame_delta");
	HX_VISIT_MEMBER_NAME(frame_max_delta,"frame_max_delta");
	HX_VISIT_MEMBER_NAME(sim_delta,"sim_delta");
	HX_VISIT_MEMBER_NAME(sim_time,"sim_time");
	HX_VISIT_MEMBER_NAME(fixed_alpha,"fixed_alpha");
	HX_VISIT_MEMBER_NAME(fixed_timestep,"fixed_timestep");
	HX_VISIT_MEMBER_NAME(fixed_frame_time,"fixed_frame_time");
	HX_VISIT_MEMBER_NAME(fixed_overflow,"fixed_overflow");
	HX_VISIT_MEMBER_NAME(next_tick,"next_tick");
}

hx::Val App_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { return hx::Val( app ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tick") ) { return hx::Val( tick_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { return hx::Val( config_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onevent") ) { return hx::Val( onevent_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeyup") ) { return hx::Val( onkeyup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sim_time") ) { return hx::Val( sim_time ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timescale") ) { return hx::Val( timescale ); }
		if (HX_FIELD_EQ(inName,"sim_delta") ) { return hx::Val( sim_delta ); }
		if (HX_FIELD_EQ(inName,"next_tick") ) { return hx::Val( next_tick ); }
		if (HX_FIELD_EQ(inName,"ondestroy") ) { return hx::Val( ondestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontickend") ) { return hx::Val( ontickend_dyn() ); }
		if (HX_FIELD_EQ(inName,"onkeydown") ) { return hx::Val( onkeydown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmouseup") ) { return hx::Val( onmouseup_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchup") ) { return hx::Val( ontouchup_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tick_start") ) { return hx::Val( tick_start ); }
		if (HX_FIELD_EQ(inName,"tick_delta") ) { return hx::Val( tick_delta ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fixed_delta") ) { return hx::Val( fixed_delta ); }
		if (HX_FIELD_EQ(inName,"update_rate") ) { return hx::Val( update_rate ); }
		if (HX_FIELD_EQ(inName,"frame_start") ) { return hx::Val( frame_start ); }
		if (HX_FIELD_EQ(inName,"frame_delta") ) { return hx::Val( frame_delta ); }
		if (HX_FIELD_EQ(inName,"fixed_alpha") ) { return hx::Val( fixed_alpha ); }
		if (HX_FIELD_EQ(inName,"ontickstart") ) { return hx::Val( ontickstart_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontextinput") ) { return hx::Val( ontextinput_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousedown") ) { return hx::Val( onmousedown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onmousemove") ) { return hx::Val( onmousemove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchdown") ) { return hx::Val( ontouchdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ontouchmove") ) { return hx::Val( ontouchmove_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepadup") ) { return hx::Val( ongamepadup_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onmousewheel") ) { return hx::Val( onmousewheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ongamepadaxis") ) { return hx::Val( ongamepadaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"ongamepaddown") ) { return hx::Val( ongamepaddown_dyn() ); }
		if (HX_FIELD_EQ(inName,"internal_init") ) { return hx::Val( internal_init_dyn() ); }
		if (HX_FIELD_EQ(inName,"internal_tick") ) { return hx::Val( internal_tick_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fixed_timestep") ) { return hx::Val( fixed_timestep ); }
		if (HX_FIELD_EQ(inName,"fixed_overflow") ) { return hx::Val( fixed_overflow ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tick_start_prev") ) { return hx::Val( tick_start_prev ); }
		if (HX_FIELD_EQ(inName,"frame_max_delta") ) { return hx::Val( frame_max_delta ); }
		if (HX_FIELD_EQ(inName,"ongamepaddevice") ) { return hx::Val( ongamepaddevice_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frame_start_prev") ) { return hx::Val( frame_start_prev ); }
		if (HX_FIELD_EQ(inName,"fixed_frame_time") ) { return hx::Val( fixed_frame_time ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"internal_tick_default") ) { return hx::Val( internal_tick_default_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"internal_tick_fixed_timestep") ) { return hx::Val( internal_tick_fixed_timestep_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool App_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

hx::Val App_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=inValue.Cast<  ::snow::Snow >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sim_time") ) { sim_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timescale") ) { timescale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sim_delta") ) { sim_delta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next_tick") ) { next_tick=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tick_start") ) { tick_start=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tick_delta") ) { tick_delta=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fixed_delta") ) { fixed_delta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"update_rate") ) { update_rate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame_start") ) { frame_start=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame_delta") ) { frame_delta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixed_alpha") ) { fixed_alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fixed_timestep") ) { fixed_timestep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixed_overflow") ) { fixed_overflow=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tick_start_prev") ) { tick_start_prev=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame_max_delta") ) { frame_max_delta=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frame_start_prev") ) { frame_start_prev=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixed_frame_time") ) { fixed_frame_time=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void App_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("app",a1,fc,49,00));
	outFields->push(HX_("timescale",5d,33,92,9a));
	outFields->push(HX_("fixed_delta",ad,b7,aa,ba));
	outFields->push(HX_("update_rate",16,68,20,51));
	outFields->push(HX_("tick_start",c0,e2,af,a6));
	outFields->push(HX_("tick_start_prev",12,00,72,28));
	outFields->push(HX_("tick_delta",56,56,cb,f9));
	outFields->push(HX_("frame_start",90,13,a6,29));
	outFields->push(HX_("frame_start_prev",42,dd,48,75));
	outFields->push(HX_("frame_delta",26,87,c1,7c));
	outFields->push(HX_("frame_max_delta",0b,9b,49,7b));
	outFields->push(HX_("sim_delta",90,b9,d4,bf));
	outFields->push(HX_("sim_time",75,35,eb,54));
	outFields->push(HX_("fixed_alpha",13,77,1a,05));
	outFields->push(HX_("fixed_timestep",44,6d,0f,3d));
	outFields->push(HX_("fixed_frame_time",ca,cc,ec,0f));
	outFields->push(HX_("fixed_overflow",ad,12,67,7c));
	outFields->push(HX_("next_tick",69,89,25,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo App_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::snow::Snow*/ ,(int)offsetof(App_obj,app),HX_("app",a1,fc,49,00)},
	{hx::fsFloat,(int)offsetof(App_obj,timescale),HX_("timescale",5d,33,92,9a)},
	{hx::fsFloat,(int)offsetof(App_obj,fixed_delta),HX_("fixed_delta",ad,b7,aa,ba)},
	{hx::fsFloat,(int)offsetof(App_obj,update_rate),HX_("update_rate",16,68,20,51)},
	{hx::fsFloat,(int)offsetof(App_obj,tick_start),HX_("tick_start",c0,e2,af,a6)},
	{hx::fsFloat,(int)offsetof(App_obj,tick_start_prev),HX_("tick_start_prev",12,00,72,28)},
	{hx::fsFloat,(int)offsetof(App_obj,tick_delta),HX_("tick_delta",56,56,cb,f9)},
	{hx::fsFloat,(int)offsetof(App_obj,frame_start),HX_("frame_start",90,13,a6,29)},
	{hx::fsFloat,(int)offsetof(App_obj,frame_start_prev),HX_("frame_start_prev",42,dd,48,75)},
	{hx::fsFloat,(int)offsetof(App_obj,frame_delta),HX_("frame_delta",26,87,c1,7c)},
	{hx::fsFloat,(int)offsetof(App_obj,frame_max_delta),HX_("frame_max_delta",0b,9b,49,7b)},
	{hx::fsFloat,(int)offsetof(App_obj,sim_delta),HX_("sim_delta",90,b9,d4,bf)},
	{hx::fsFloat,(int)offsetof(App_obj,sim_time),HX_("sim_time",75,35,eb,54)},
	{hx::fsFloat,(int)offsetof(App_obj,fixed_alpha),HX_("fixed_alpha",13,77,1a,05)},
	{hx::fsBool,(int)offsetof(App_obj,fixed_timestep),HX_("fixed_timestep",44,6d,0f,3d)},
	{hx::fsFloat,(int)offsetof(App_obj,fixed_frame_time),HX_("fixed_frame_time",ca,cc,ec,0f)},
	{hx::fsFloat,(int)offsetof(App_obj,fixed_overflow),HX_("fixed_overflow",ad,12,67,7c)},
	{hx::fsFloat,(int)offsetof(App_obj,next_tick),HX_("next_tick",69,89,25,14)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *App_obj_sStaticStorageInfo = 0;
#endif

static ::String App_obj_sMemberFields[] = {
	HX_("app",a1,fc,49,00),
	HX_("timescale",5d,33,92,9a),
	HX_("fixed_delta",ad,b7,aa,ba),
	HX_("update_rate",16,68,20,51),
	HX_("tick_start",c0,e2,af,a6),
	HX_("tick_start_prev",12,00,72,28),
	HX_("tick_delta",56,56,cb,f9),
	HX_("frame_start",90,13,a6,29),
	HX_("frame_start_prev",42,dd,48,75),
	HX_("frame_delta",26,87,c1,7c),
	HX_("frame_max_delta",0b,9b,49,7b),
	HX_("sim_delta",90,b9,d4,bf),
	HX_("sim_time",75,35,eb,54),
	HX_("fixed_alpha",13,77,1a,05),
	HX_("fixed_timestep",44,6d,0f,3d),
	HX_("fixed_frame_time",ca,cc,ec,0f),
	HX_("fixed_overflow",ad,12,67,7c),
	HX_("next_tick",69,89,25,14),
	HX_("config",c2,56,d2,c7),
	HX_("ready",63,a0,ba,e6),
	HX_("update",09,86,05,87),
	HX_("tick",5d,c3,fc,4c),
	HX_("ondestroy",bb,bd,df,2e),
	HX_("onevent",9b,f6,d4,78),
	HX_("ontickstart",e6,62,8c,ec),
	HX_("ontickend",5f,89,3e,25),
	HX_("onkeydown",42,ce,c7,bb),
	HX_("onkeyup",3b,04,0f,e2),
	HX_("ontextinput",3e,e7,4d,44),
	HX_("onmousedown",08,88,59,84),
	HX_("onmouseup",81,a0,cc,ca),
	HX_("onmousewheel",35,56,ec,35),
	HX_("onmousemove",b7,72,4c,8a),
	HX_("ontouchdown",a2,5e,71,9d),
	HX_("ontouchup",9b,bc,51,e3),
	HX_("ontouchmove",51,49,64,a3),
	HX_("ongamepadaxis",03,e7,a9,64),
	HX_("ongamepaddown",c4,c2,9e,66),
	HX_("ongamepadup",3d,74,a8,df),
	HX_("ongamepaddevice",78,83,39,9b),
	HX_("internal_init",92,92,85,8a),
	HX_("internal_tick",df,1a,c7,91),
	HX_("internal_tick_default",21,c4,37,4b),
	HX_("internal_tick_fixed_timestep",e4,ad,a9,73),
	::String(null()) };

hx::Class App_obj::__mClass;

static ::String App_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void App_obj::__register()
{
	App_obj _hx_dummy;
	App_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("snow.App",16,e5,c7,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &App_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(App_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(App_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< App_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = App_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = App_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace snow
